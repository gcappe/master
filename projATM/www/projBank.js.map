)]}'
{"version":3,"file":"projBank.js","sources":["C:/fpc2js/pas2js-windows-0.9.19/packages/rtl/rtl.js","C:/fpc2js/pas2js-windows-0.9.19/packages/rtl/system.pas","C:/fpc2js/pas2js-windows-0.9.19/packages/rtl/types.pas","C:/fpc2js/pas2js-windows-0.9.19/packages/rtl/js.pas","C:/fpc2js/pas2js-windows-0.9.19/packages/rtl/rtlconsts.pas","C:/fpc2js/pas2js-windows-0.9.19/packages/rtl/sysutils.pas","C:/fpc2js/pas2js-windows-0.9.19/packages/rtl/classes.pas","C:/fpc2js/pas2js-windows-0.9.19/packages/rtl/web.pas","C:/fpc2js/projects/projBanking/upromises.pas","C:/fpc2js/projects/projBanking/uaccount.pas","C:/fpc2js/pas2js-windows-0.9.19/packages/rtl/math.pas","C:/fpc2js/projects/projBanking/udom.pas","C:/fpc2js/projects/projBanking/ubindelementaction.pas","C:/fpc2js/projects/projBanking/system.color.pas","C:/fpc2js/projects/projBanking/upages.pas","C:/fpc2js/projects/projBanking/main.pas","C:/fpc2js/projects/projBanking/projBank.lpr"],"sourcesContent":["var pas = {};\n\nvar rtl = {\n\n  quiet: false,\n  debug_load_units: false,\n  debug_rtti: false,\n\n  debug: function(){\n    if (rtl.quiet || !console || !console.log) return;\n    console.log(arguments);\n  },\n\n  error: function(s){\n    rtl.debug('Error: ',s);\n    throw s;\n  },\n\n  warn: function(s){\n    rtl.debug('Warn: ',s);\n  },\n\n  hasString: function(s){\n    return rtl.isString(s) && (s.length>0);\n  },\n\n  isArray: function(a) {\n    return Array.isArray(a);\n  },\n\n  isFunction: function(f){\n    return typeof(f)===\"function\";\n  },\n\n  isModule: function(m){\n    return rtl.isObject(m) && rtl.hasString(m.$name) && (pas[m.$name]===m);\n  },\n\n  isImplementation: function(m){\n    return rtl.isObject(m) && rtl.isModule(m.$module) && (m.$module.$impl===m);\n  },\n\n  isNumber: function(n){\n    return typeof(n)===\"number\";\n  },\n\n  isObject: function(o){\n    var s=typeof(o);\n    return (typeof(o)===\"object\") && (o!=null);\n  },\n\n  isString: function(s){\n    return typeof(s)===\"string\";\n  },\n\n  getNumber: function(n){\n    return typeof(n)===\"number\"?n:NaN;\n  },\n\n  getChar: function(c){\n    return ((typeof(c)===\"string\") && (c.length===1)) ? c : \"\";\n  },\n\n  getObject: function(o){\n    return ((typeof(o)===\"object\") || (typeof(o)==='function')) ? o : null;\n  },\n\n  isPasClass: function(type){\n    return (rtl.isObject(type) && type.hasOwnProperty('$classname') && rtl.isObject(type.$module));\n  },\n\n  isPasClassInstance: function(type){\n    return (rtl.isObject(type) && rtl.isPasClass(type.$class));\n  },\n\n  hexStr: function(n,digits){\n    return (\"000000000000000\"+n.toString(16).toUpperCase()).slice(-digits);\n  },\n\n  m_loading: 0,\n  m_loading_intf: 1,\n  m_intf_loaded: 2,\n  m_loading_impl: 3, // loading all used unit\n  m_initializing: 4, // running initialization\n  m_initialized: 5,\n\n  module: function(module_name, intfuseslist, intfcode, impluseslist, implcode){\n    if (rtl.debug_load_units) rtl.debug('rtl.module name=\"'+module_name+'\" intfuses='+intfuseslist+' impluses='+impluseslist+' hasimplcode='+rtl.isFunction(implcode));\n    if (!rtl.hasString(module_name)) rtl.error('invalid module name \"'+module_name+'\"');\n    if (!rtl.isArray(intfuseslist)) rtl.error('invalid interface useslist of \"'+module_name+'\"');\n    if (!rtl.isFunction(intfcode)) rtl.error('invalid interface code of \"'+module_name+'\"');\n    if (!(impluseslist==undefined) && !rtl.isArray(impluseslist)) rtl.error('invalid implementation useslist of \"'+module_name+'\"');\n    if (!(implcode==undefined) && !rtl.isFunction(implcode)) rtl.error('invalid implementation code of \"'+module_name+'\"');\n\n    if (pas[module_name])\n      rtl.error('module \"'+module_name+'\" is already registered');\n\n    var module = pas[module_name] = {\n      $name: module_name,\n      $intfuseslist: intfuseslist,\n      $impluseslist: impluseslist,\n      $state: rtl.m_loading,\n      $intfcode: intfcode,\n      $implcode: implcode,\n      $impl: null,\n      $rtti: Object.create(rtl.tSectionRTTI)\n    };\n    module.$rtti.$module = module;\n    if (implcode) module.$impl = {\n      $module: module,\n      $rtti: module.$rtti\n    };\n  },\n\n  exitcode: 0,\n\n  run: function(module_name){\n  \n    function doRun(){\n      if (!rtl.hasString(module_name)) module_name='program';\n      if (rtl.debug_load_units) rtl.debug('rtl.run module=\"'+module_name+'\"');\n      rtl.initRTTI();\n      var module = pas[module_name];\n      if (!module) rtl.error('rtl.run module \"'+module_name+'\" missing');\n      rtl.loadintf(module);\n      rtl.loadimpl(module);\n      if (module_name=='program'){\n        if (rtl.debug_load_units) rtl.debug('running $main');\n        var r = pas.program.$main();\n        if (rtl.isNumber(r)) rtl.exitcode = r;\n      }\n    }\n    \n    if (rtl.showUncaughtExceptions) {\n      try{\n        doRun();\n      } catch(re) {\n        var errMsg = re.hasOwnProperty('$class') ? re.$class.$classname : '';\n\t    errMsg +=  ((errMsg) ? ': ' : '') + (re.hasOwnProperty('fMessage') ? re.fMessage : re);\n        alert('Uncaught Exception : '+errMsg);\n        rtl.exitCode = 216;\n      }\n    } else {\n      doRun();\n    }\n    return rtl.exitcode;\n  },\n\n  loadintf: function(module){\n    if (module.$state>rtl.m_loading_intf) return; // already finished\n    if (rtl.debug_load_units) rtl.debug('loadintf: \"'+module.$name+'\"');\n    if (module.$state===rtl.m_loading_intf)\n      rtl.error('unit cycle detected \"'+module.$name+'\"');\n    module.$state=rtl.m_loading_intf;\n    // load interfaces of interface useslist\n    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadintf);\n    // run interface\n    if (rtl.debug_load_units) rtl.debug('loadintf: run intf of \"'+module.$name+'\"');\n    module.$intfcode(module.$intfuseslist);\n    // success\n    module.$state=rtl.m_intf_loaded;\n    // Note: units only used in implementations are not yet loaded (not even their interfaces)\n  },\n\n  loaduseslist: function(module,useslist,f){\n    if (useslist==undefined) return;\n    for (var i in useslist){\n      var unitname=useslist[i];\n      if (rtl.debug_load_units) rtl.debug('loaduseslist of \"'+module.$name+'\" uses=\"'+unitname+'\"');\n      if (pas[unitname]==undefined)\n        rtl.error('module \"'+module.$name+'\" misses \"'+unitname+'\"');\n      f(pas[unitname]);\n    }\n  },\n\n  loadimpl: function(module){\n    if (module.$state>=rtl.m_loading_impl) return; // already processing\n    if (module.$state<rtl.m_intf_loaded) rtl.error('loadimpl: interface not loaded of \"'+module.$name+'\"');\n    if (rtl.debug_load_units) rtl.debug('loadimpl: load uses of \"'+module.$name+'\"');\n    module.$state=rtl.m_loading_impl;\n    // load interfaces of implementation useslist\n    rtl.loaduseslist(module,module.$impluseslist,rtl.loadintf);\n    // load implementation of interfaces useslist\n    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadimpl);\n    // load implementation of implementation useslist\n    rtl.loaduseslist(module,module.$impluseslist,rtl.loadimpl);\n    // Note: At this point all interfaces used by this unit are loaded. If\n    //   there are implementation uses cycles some used units might not yet be\n    //   initialized. This is by design.\n    // run implementation\n    if (rtl.debug_load_units) rtl.debug('loadimpl: run impl of \"'+module.$name+'\"');\n    if (rtl.isFunction(module.$implcode)) module.$implcode(module.$impluseslist);\n    // run initialization\n    if (rtl.debug_load_units) rtl.debug('loadimpl: run init of \"'+module.$name+'\"');\n    module.$state=rtl.m_initializing;\n    if (rtl.isFunction(module.$init)) module.$init();\n    // unit initialized\n    module.$state=rtl.m_initialized;\n  },\n\n  createCallback: function(scope, fn){\n    var cb;\n    if (typeof(fn)==='string'){\n      cb = function(){\n        return scope[fn].apply(scope,arguments);\n      };\n    } else {\n      cb = function(){\n        return fn.apply(scope,arguments);\n      };\n    };\n    cb.scope = scope;\n    cb.fn = fn;\n    return cb;\n  },\n\n  cloneCallback: function(cb){\n    return rtl.createCallback(cb.scope,cb.fn);\n  },\n\n  eqCallback: function(a,b){\n    // can be a function or a function wrapper\n    if (a==b){\n      return true;\n    } else {\n      return (a!=null) && (b!=null) && (a.fn) && (a.scope===b.scope) && (a.fn==b.fn);\n    }\n  },\n\n  initClass: function(c,parent,name,initfn){\n    parent[name] = c;\n    c.$classname = name;\n    if ((parent.$module) && (parent.$module.$impl===parent)) parent=parent.$module;\n    c.$parent = parent;\n    c.$fullname = parent.$name+'.'+name;\n    if (rtl.isModule(parent)){\n      c.$module = parent;\n      c.$name = name;\n    } else {\n      c.$module = parent.$module;\n      c.$name = parent.name+'.'+name;\n    };\n    // rtti\n    if (rtl.debug_rtti) rtl.debug('initClass '+c.$fullname);\n    var t = c.$module.$rtti.$Class(c.$name,{ \"class\": c, module: parent });\n    c.$rtti = t;\n    if (rtl.isObject(c.$ancestor)) t.ancestor = c.$ancestor.$rtti;\n    if (!t.ancestor) t.ancestor = null;\n    // init members\n    initfn.call(c);\n  },\n\n  createClass: function(parent,name,ancestor,initfn){\n    // create a normal class,\n    // ancestor must be null or a normal class,\n    // the root ancestor can be an external class\n    var c = null;\n    if (ancestor != null){\n      c = Object.create(ancestor);\n      c.$ancestor = ancestor;\n      // Note:\n      // if root is an \"object\" then c.$ancestor === Object.getPrototypeOf(c)\n      // if root is a \"function\" then c.$ancestor === c.__proto__, Object.getPrototypeOf(c) returns the root\n    } else {\n      c = {};\n      c.$create = function(fnname,args){\n        if (args == undefined) args = [];\n        var o = Object.create(this);\n        o.$class = this; // Note: o.$class === Object.getPrototypeOf(o)\n        o.$init();\n        try{\n          o[fnname].apply(o,args);\n          o.AfterConstruction();\n        } catch($e){\n          o.$destroy;\n          throw $e;\n        }\n        return o;\n      };\n      c.$destroy = function(fnname){\n        this.BeforeDestruction();\n        this[fnname]();\n        this.$final;\n      };\n    };\n    rtl.initClass(c,parent,name,initfn);\n  },\n\n  createClassExt: function(parent,name,ancestor,newinstancefnname,initfn){\n    // Create a class using an external ancestor.\n    // If newinstancefnname is given, use that function to create the new object.\n    // If exist call BeforeDestruction and AfterConstruction.\n    var c = null;\n    c = Object.create(ancestor);\n    c.$create = function(fnname,args){\n      if (args == undefined) args = [];\n      var o = null;\n      if (newinstancefnname.length>0){\n        o = this[newinstancefnname](fnname,args);\n      } else {\n        o = Object.create(this);\n      }\n      o.$class = this; // Note: o.$class === Object.getPrototypeOf(o)\n      o.$init();\n      try{\n        o[fnname].apply(o,args);\n        if (o.AfterConstruction) o.AfterConstruction();\n      } catch($e){\n        o.$destroy;\n        throw $e;\n      }\n      return o;\n    };\n    c.$destroy = function(fnname){\n      if (this.BeforeDestruction) this.BeforeDestruction();\n      this[fnname]();\n      this.$final;\n    };\n    rtl.initClass(c,parent,name,initfn);\n  },\n\n  tObjectDestroy: \"Destroy\",\n\n  free: function(obj,name){\n    if (obj[name]==null) return;\n    obj[name].$destroy(rtl.tObjectDestroy);\n    obj[name]=null;\n  },\n\n  freeLoc: function(obj){\n    if (obj==null) return;\n    obj.$destroy(rtl.tObjectDestroy);\n    return null;\n  },\n\n  is: function(instance,type){\n    return type.isPrototypeOf(instance) || (instance===type);\n  },\n\n  isExt: function(instance,type,mode){\n    // mode===1 means instance must be a Pascal class instance\n    // mode===2 means instance must be a Pascal class\n    // Notes:\n    // isPrototypeOf and instanceof return false on equal\n    // isPrototypeOf does not work for Date.isPrototypeOf(new Date())\n    //   so if isPrototypeOf is false test with instanceof\n    // instanceof needs a function on right side\n    if (instance == null) return false; // Note: ==null checks for undefined too\n    if ((typeof(type) !== 'object') && (typeof(type) !== 'function')) return false;\n    if (instance === type){\n      if (mode===1) return false;\n      if (mode===2) return rtl.isPasClass(instance);\n      return true;\n    }\n    if (type.isPrototypeOf && type.isPrototypeOf(instance)){\n      if (mode===1) return rtl.isPasClassInstance(instance);\n      if (mode===2) return rtl.isPasClass(instance);\n      return true;\n    }\n    if ((typeof type == 'function') && (instance instanceof type)) return true;\n    return false;\n  },\n\n  Exception: null,\n  EInvalidCast: null,\n  EAbstractError: null,\n  ERangeError: null,\n\n  raiseE: function(typename){\n    var t = rtl[typename];\n    if (t==null){\n      var mod = pas.SysUtils;\n      if (!mod) mod = pas.sysutils;\n      if (mod){\n        t = mod[typename];\n        if (!t) t = mod[typename.toLowerCase()];\n        if (!t) t = mod['Exception'];\n        if (!t) t = mod['exception'];\n      }\n    }\n    if (t){\n      if (t.Create){\n        throw t.$create(\"Create\");\n      } else if (t.create){\n        throw t.$create(\"create\");\n      }\n    }\n    if (typename === \"EInvalidCast\") throw \"invalid type cast\";\n    if (typename === \"EAbstractError\") throw \"Abstract method called\";\n    if (typename === \"ERangeError\") throw \"range error\";\n    throw typename;\n  },\n\n  as: function(instance,type){\n    if((instance === null) || rtl.is(instance,type)) return instance;\n    rtl.raiseE(\"EInvalidCast\");\n  },\n\n  asExt: function(instance,type,mode){\n    if((instance === null) || rtl.isExt(instance,type,mode)) return instance;\n    rtl.raiseE(\"EInvalidCast\");\n  },\n\n  createInterface: function(module, name, guid, fnnames, ancestor, initfn){\n    //console.log('createInterface name=\"'+name+'\" guid=\"'+guid+'\" names='+fnnames);\n    var i = ancestor?Object.create(ancestor):{};\n    module[name] = i;\n    i.$module = module;\n    i.$name = name;\n    i.$fullname = module.$name+'.'+name;\n    i.$guid = guid;\n    i.$guidr = null;\n    i.$names = fnnames?fnnames:[];\n    if (rtl.isFunction(initfn)){\n      // rtti\n      if (rtl.debug_rtti) rtl.debug('createInterface '+i.$fullname);\n      var t = i.$module.$rtti.$Interface(name,{ \"interface\": i, module: module });\n      i.$rtti = t;\n      if (ancestor) t.ancestor = ancestor.$rtti;\n      if (!t.ancestor) t.ancestor = null;\n      initfn.call(i);\n    }\n    return i;\n  },\n\n  strToGUIDR: function(s,g){\n    var p = 0;\n    function n(l){\n      var h = s.substr(p,l);\n      p+=l;\n      return parseInt(h,16);\n    }\n    p+=1; // skip {\n    g.D1 = n(8);\n    p+=1; // skip -\n    g.D2 = n(4);\n    p+=1; // skip -\n    g.D3 = n(4);\n    p+=1; // skip -\n    if (!g.D4) g.D4=[];\n    g.D4[0] = n(2);\n    g.D4[1] = n(2);\n    p+=1; // skip -\n    for(var i=2; i<8; i++) g.D4[i] = n(2);\n    return g;\n  },\n\n  guidrToStr: function(g){\n    if (g.$intf) return g.$intf.$guid;\n    var h = rtl.hexStr;\n    var s='{'+h(g.D1,8)+'-'+h(g.D2,4)+'-'+h(g.D3,4)+'-'+h(g.D4[0],2)+h(g.D4[1],2)+'-';\n    for (var i=2; i<8; i++) s+=h(g.D4[i],2);\n    s+='}';\n    return s;\n  },\n\n  createTGUID: function(guid){\n    var TGuid = (pas.System)?pas.System.TGuid:pas.system.tguid;\n    var g = rtl.strToGUIDR(guid,new TGuid());\n    return g;\n  },\n\n  getIntfGUIDR: function(intfTypeOrVar){\n    if (!intfTypeOrVar) return null;\n    if (!intfTypeOrVar.$guidr){\n      var g = rtl.createTGUID(intfTypeOrVar.$guid);\n      if (!intfTypeOrVar.hasOwnProperty('$guid')) intfTypeOrVar = Object.getPrototypeOf(intfTypeOrVar);\n      g.$intf = intfTypeOrVar;\n      intfTypeOrVar.$guidr = g;\n    }\n    return intfTypeOrVar.$guidr;\n  },\n\n  addIntf: function (aclass, intf, map){\n    function jmp(fn){\n      if (typeof(fn)===\"function\"){\n        return function(){ return fn.apply(this.$o,arguments); };\n      } else {\n        return function(){ rtl.raiseE('EAbstractError'); };\n      }\n    }\n    if(!map) map = {};\n    var t = intf;\n    var item = Object.create(t);\n    aclass.$intfmaps[intf.$guid] = item;\n    do{\n      var names = t.$names;\n      if (!names) break;\n      for (var i=0; i<names.length; i++){\n        var intfname = names[i];\n        var fnname = map[intfname];\n        if (!fnname) fnname = intfname;\n        //console.log('addIntf: intftype='+t.$name+' index='+i+' intfname=\"'+intfname+'\" fnname=\"'+fnname+'\" proc='+typeof(fn));\n        item[intfname] = jmp(aclass[fnname]);\n      }\n      t = Object.getPrototypeOf(t);\n    }while(t!=null);\n  },\n\n  getIntfG: function (obj, guid, query){\n    if (!obj) return null;\n    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query);\n    // search\n    var maps = obj.$intfmaps;\n    if (!maps) return null;\n    var item = maps[guid];\n    if (!item) return null;\n    // check delegation\n    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query+' item='+typeof(item));\n    if (typeof item === 'function') return item.call(obj); // COM: contains _AddRef\n    // check cache\n    var intf = null;\n    if (obj.$interfaces){\n      intf = obj.$interfaces[guid];\n      //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' cache='+typeof(intf));\n    }\n    if (!intf){ // intf can be undefined!\n      intf = Object.create(item);\n      intf.$o = obj;\n      if (!obj.$interfaces) obj.$interfaces = {};\n      obj.$interfaces[guid] = intf;\n    }\n    if (typeof(query)==='object'){\n      // called by queryIntfT\n      var o = null;\n      if (intf.QueryInterface(rtl.getIntfGUIDR(query),\n          {get:function(){ return o; }, set:function(v){ o=v; }}) === 0){\n        return o;\n      } else {\n        return null;\n      }\n    } else if(query===2){\n      // called by TObject.GetInterfaceByStr\n      if (intf.$kind === 'com') intf._AddRef();\n    }\n    return intf;\n  },\n\n  getIntfT: function(obj,intftype){\n    return rtl.getIntfG(obj,intftype.$guid);\n  },\n\n  queryIntfT: function(obj,intftype){\n    return rtl.getIntfG(obj,intftype.$guid,intftype);\n  },\n\n  queryIntfIsT: function(obj,intftype){\n    var i = rtl.queryIntfG(obj,intftype.$guid);\n    if (!i) return false;\n    if (i.$kind === 'com') i._Release();\n    return true;\n  },\n\n  asIntfT: function (obj,intftype){\n    var i = rtl.getIntfG(obj,intftype.$guid);\n    if (i!==null) return i;\n    rtl.raiseEInvalidCast();\n  },\n\n  intfIsClass: function(intf,classtype){\n    return (intf!=null) && (rtl.is(intf.$o,classtype));\n  },\n\n  intfAsClass: function(intf,classtype){\n    if (intf==null) return null;\n    return rtl.as(intf.$o,classtype);\n  },\n\n  intfToClass: function(intf,classtype){\n    if ((intf!==null) && rtl.is(intf.$o,classtype)) return intf.$o;\n    return null;\n  },\n\n  // interface reference counting\n  intfRefs: { // base object for temporary interface variables\n    ref: function(id,intf){\n      // called for temporary interface references needing delayed release\n      var old = this[id];\n      //console.log('rtl.intfRefs.ref: id='+id+' old=\"'+(old?old.$name:'null')+'\" intf=\"'+(intf?intf.$name:'null'));\n      if (old){\n        // called again, e.g. in a loop\n        delete this[id];\n        old._Release(); // may fail\n      }\n      this[id]=intf;\n      return intf;\n    },\n    free: function(){\n      //console.log('rtl.intfRefs.free...');\n      for (var id in this){\n        if (this.hasOwnProperty(id)) this[id]._Release;\n      }\n    }\n  },\n\n  createIntfRefs: function(){\n    //console.log('rtl.createIntfRefs');\n    return Object.create(rtl.intfRefs);\n  },\n\n  setIntfP: function(path,name,value,skipAddRef){\n    var old = path[name];\n    //console.log('rtl.setIntfP path='+path+' name='+name+' old=\"'+(old?old.$name:'null')+'\" value=\"'+(value?value.$name:'null')+'\"');\n    if (old === value) return;\n    if (old !== null){\n      path[name]=null;\n      old._Release();\n    }\n    if (value !== null){\n      if (!skipAddRef) value._AddRef();\n      path[name]=value;\n    }\n  },\n\n  setIntfL: function(old,value,skipAddRef){\n    //console.log('rtl.setIntfL old=\"'+(old?old.$name:'null')+'\" value=\"'+(value?value.$name:'null')+'\"');\n    if (old !== value){\n      if (value!==null){\n        if (!skipAddRef) value._AddRef();\n      }\n      if (old!==null){\n        old._Release();  // Release after AddRef, to avoid double Release if Release creates an exception\n      }\n    } else if (skipAddRef){\n      if (old!==null){\n        old._Release();  // value has an AddRef\n      }\n    }\n    return value;\n  },\n\n  _AddRef: function(intf){\n    //if (intf) console.log('rtl._AddRef intf=\"'+(intf?intf.$name:'null')+'\"');\n    if (intf) intf._AddRef();\n    return intf;\n  },\n\n  _Release: function(intf){\n    //if (intf) console.log('rtl._Release intf=\"'+(intf?intf.$name:'null')+'\"');\n    if (intf) intf._Release();\n    return intf;\n  },\n\n  checkMethodCall: function(obj,type){\n    if (rtl.isObject(obj) && rtl.is(obj,type)) return;\n    rtl.raiseE(\"EInvalidCast\");\n  },\n\n  rc: function(i,minval,maxval){\n    // range check integer\n    if ((Math.floor(i)===i) && (i>=minval) && (i<=maxval)) return i;\n    rtl.raiseE('ERangeError');\n  },\n\n  rcc: function(c,minval,maxval){\n    // range check char\n    if ((typeof(c)==='string') && (c.length===1)){\n      var i = c.charCodeAt(0);\n      if ((i>=minval) && (i<=maxval)) return c;\n    }\n    rtl.raiseE('ERangeError');\n  },\n\n  rcSetCharAt: function(s,index,c){\n    // range check setCharAt\n    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');\n    return rtl.setCharAt(s,index,c);\n  },\n\n  rcCharAt: function(s,index){\n    // range check charAt\n    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');\n    return s.charAt(index);\n  },\n\n  rcArrR: function(arr,index){\n    // range check read array\n    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){\n      if (arguments.length>2){\n        // arr,index1,index2,...\n        arr=arr[index];\n        for (var i=2; i<arguments.length; i++) arr=rtl.rcArrR(arr,arguments[i]);\n        return arr;\n      }\n      return arr[index];\n    }\n    rtl.raiseE('ERangeError');\n  },\n\n  rcArrW: function(arr,index,value){\n    // range check write array\n    // arr,index1,index2,...,value\n    for (var i=3; i<arguments.length; i++){\n      arr=rtl.rcArrR(arr,index);\n      index=arguments[i-1];\n      value=arguments[i];\n    }\n    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){\n      return arr[index]=value;\n    }\n    rtl.raiseE('ERangeError');\n  },\n\n  length: function(arr){\n    return (arr == null) ? 0 : arr.length;\n  },\n\n  arraySetLength: function(arr,defaultvalue,newlength){\n    // multi dim: (arr,defaultvalue,dim1,dim2,...)\n    if (arr == null) arr = [];\n    var p = arguments;\n    function setLength(a,argNo){\n      var oldlen = a.length;\n      var newlen = p[argNo];\n      if (oldlen!==newlength){\n        a.length = newlength;\n        if (argNo === p.length-1){\n          if (rtl.isArray(defaultvalue)){\n            for (var i=oldlen; i<newlen; i++) a[i]=[]; // nested array\n          } else if (rtl.isFunction(defaultvalue)){\n            for (var i=oldlen; i<newlen; i++) a[i]=new defaultvalue(); // e.g. record\n          } else if (rtl.isObject(defaultvalue)) {\n            for (var i=oldlen; i<newlen; i++) a[i]={}; // e.g. set\n          } else {\n            for (var i=oldlen; i<newlen; i++) a[i]=defaultvalue;\n          }\n        } else {\n          for (var i=oldlen; i<newlen; i++) a[i]=[]; // nested array\n        }\n      }\n      if (argNo < p.length-1){\n        // multi argNo\n        for (var i=0; i<newlen; i++) a[i]=setLength(a[i],argNo+1);\n      }\n      return a;\n    }\n    return setLength(arr,2);\n  },\n\n  arrayEq: function(a,b){\n    if (a===null) return b===null;\n    if (b===null) return false;\n    if (a.length!==b.length) return false;\n    for (var i=0; i<a.length; i++) if (a[i]!==b[i]) return false;\n    return true;\n  },\n\n  arrayClone: function(type,src,srcpos,end,dst,dstpos){\n    // type: 0 for references, \"refset\" for calling refSet(), a function for new type()\n    // src must not be null\n    // This function does not range check.\n    if (rtl.isFunction(type)){\n      for (; srcpos<end; srcpos++) dst[dstpos++] = new type(src[srcpos]); // clone record\n    } else if((typeof(type)===\"string\") && (type === 'refSet')) {\n      for (; srcpos<end; srcpos++) dst[dstpos++] = rtl.refSet(src[srcpos]); // ref set\n    }  else {\n      for (; srcpos<end; srcpos++) dst[dstpos++] = src[srcpos]; // reference\n    };\n  },\n\n  arrayConcat: function(type){\n    // type: see rtl.arrayClone\n    var a = [];\n    var l = 0;\n    for (var i=1; i<arguments.length; i++) l+=arguments[i].length;\n    a.length = l;\n    l=0;\n    for (var i=1; i<arguments.length; i++){\n      var src = arguments[i];\n      if (src == null) continue;\n      rtl.arrayClone(type,src,0,src.length,a,l);\n      l+=src.length;\n    };\n    return a;\n  },\n\n  arrayCopy: function(type, srcarray, index, count){\n    // type: see rtl.arrayClone\n    // if count is missing, use srcarray.length\n    if (srcarray == null) return [];\n    if (index < 0) index = 0;\n    if (count === undefined) count=srcarray.length;\n    var end = index+count;\n    if (end>srcarray.length) end = srcarray.length;\n    if (index>=end) return [];\n    if (type===0){\n      return srcarray.slice(index,end);\n    } else {\n      var a = [];\n      a.length = end-index;\n      rtl.arrayClone(type,srcarray,index,end,a,0);\n      return a;\n    }\n  },\n\n  setCharAt: function(s,index,c){\n    return s.substr(0,index)+c+s.substr(index+1);\n  },\n\n  getResStr: function(mod,name){\n    var rs = mod.$resourcestrings[name];\n    return rs.current?rs.current:rs.org;\n  },\n\n  createSet: function(){\n    var s = {};\n    for (var i=0; i<arguments.length; i++){\n      if (arguments[i]!=null){\n        s[arguments[i]]=true;\n      } else {\n        var first=arguments[i+=1];\n        var last=arguments[i+=1];\n        for(var j=first; j<=last; j++) s[j]=true;\n      }\n    }\n    return s;\n  },\n\n  cloneSet: function(s){\n    var r = {};\n    for (var key in s) r[key]=true;\n    return r;\n  },\n\n  refSet: function(s){\n    s.$shared = true;\n    return s;\n  },\n\n  includeSet: function(s,enumvalue){\n    if (s.$shared) s = rtl.cloneSet(s);\n    s[enumvalue] = true;\n    return s;\n  },\n\n  excludeSet: function(s,enumvalue){\n    if (s.$shared) s = rtl.cloneSet(s);\n    delete s[enumvalue];\n    return s;\n  },\n\n  diffSet: function(s,t){\n    var r = {};\n    for (var key in s) if (!t[key]) r[key]=true;\n    delete r.$shared;\n    return r;\n  },\n\n  unionSet: function(s,t){\n    var r = {};\n    for (var key in s) r[key]=true;\n    for (var key in t) r[key]=true;\n    delete r.$shared;\n    return r;\n  },\n\n  intersectSet: function(s,t){\n    var r = {};\n    for (var key in s) if (t[key]) r[key]=true;\n    delete r.$shared;\n    return r;\n  },\n\n  symDiffSet: function(s,t){\n    var r = {};\n    for (var key in s) if (!t[key]) r[key]=true;\n    for (var key in t) if (!s[key]) r[key]=true;\n    delete r.$shared;\n    return r;\n  },\n\n  eqSet: function(s,t){\n    for (var key in s) if (!t[key] && (key!='$shared')) return false;\n    for (var key in t) if (!s[key] && (key!='$shared')) return false;\n    return true;\n  },\n\n  neSet: function(s,t){\n    return !rtl.eqSet(s,t);\n  },\n\n  leSet: function(s,t){\n    for (var key in s) if (!t[key] && (key!='$shared')) return false;\n    return true;\n  },\n\n  geSet: function(s,t){\n    for (var key in t) if (!s[key] && (key!='$shared')) return false;\n    return true;\n  },\n\n  strSetLength: function(s,newlen){\n    var oldlen = s.length;\n    if (oldlen > newlen){\n      return s.substring(0,newlen);\n    } else if (s.repeat){\n      // Note: repeat needs ECMAScript6!\n      return s+' '.repeat(newlen-oldlen);\n    } else {\n       while (oldlen<newlen){\n         s+=' ';\n         oldlen++;\n       };\n       return s;\n    }\n  },\n\n  spaceLeft: function(s,width){\n    var l=s.length;\n    if (l>=width) return s;\n    if (s.repeat){\n      // Note: repeat needs ECMAScript6!\n      return ' '.repeat(width-l) + s;\n    } else {\n      while (l<width){\n        s=' '+s;\n        l++;\n      };\n    };\n  },\n\n  floatToStr : function(d,w,p){\n    // input 1-3 arguments: double, width, precision\n    if (arguments.length>2){\n      return rtl.spaceLeft(d.toFixed(p),w);\n    } else {\n\t  // exponent width\n\t  var pad = \"\";\n\t  var ad = Math.abs(d);\n\t  if (ad<1.0e+10) {\n\t\tpad='00';\n\t  } else if (ad<1.0e+100) {\n\t\tpad='0';\n      }  \t\n\t  if (arguments.length<2) {\n\t    w=9;\t\t\n      } else if (w<9) {\n\t\tw=9;\n      }\t\t  \n      var p = w-8;\n      var s=(d>0 ? \" \" : \"\" ) + d.toExponential(p);\n      s=s.replace(/e(.)/,'E$1'+pad);\n      return rtl.spaceLeft(s,w);\n    }\n  },\n\n  initRTTI: function(){\n    if (rtl.debug_rtti) rtl.debug('initRTTI');\n\n    // base types\n    rtl.tTypeInfo = { name: \"tTypeInfo\" };\n    function newBaseTI(name,kind,ancestor){\n      if (!ancestor) ancestor = rtl.tTypeInfo;\n      if (rtl.debug_rtti) rtl.debug('initRTTI.newBaseTI \"'+name+'\" '+kind+' (\"'+ancestor.name+'\")');\n      var t = Object.create(ancestor);\n      t.name = name;\n      t.kind = kind;\n      rtl[name] = t;\n      return t;\n    };\n    function newBaseInt(name,minvalue,maxvalue,ordtype){\n      var t = newBaseTI(name,1 /* tkInteger */,rtl.tTypeInfoInteger);\n      t.minvalue = minvalue;\n      t.maxvalue = maxvalue;\n      t.ordtype = ordtype;\n      return t;\n    };\n    newBaseTI(\"tTypeInfoInteger\",1 /* tkInteger */);\n    newBaseInt(\"shortint\",-0x80,0x7f,0);\n    newBaseInt(\"byte\",0,0xff,1);\n    newBaseInt(\"smallint\",-0x8000,0x7fff,2);\n    newBaseInt(\"word\",0,0xffff,3);\n    newBaseInt(\"longint\",-0x80000000,0x7fffffff,4);\n    newBaseInt(\"longword\",0,0xffffffff,5);\n    newBaseInt(\"nativeint\",-0x10000000000000,0xfffffffffffff,6);\n    newBaseInt(\"nativeuint\",0,0xfffffffffffff,7);\n    newBaseTI(\"char\",2 /* tkChar */);\n    newBaseTI(\"string\",3 /* tkString */);\n    newBaseTI(\"tTypeInfoEnum\",4 /* tkEnumeration */,rtl.tTypeInfoInteger);\n    newBaseTI(\"tTypeInfoSet\",5 /* tkSet */);\n    newBaseTI(\"double\",6 /* tkDouble */);\n    newBaseTI(\"boolean\",7 /* tkBool */);\n    newBaseTI(\"tTypeInfoProcVar\",8 /* tkProcVar */);\n    newBaseTI(\"tTypeInfoMethodVar\",9 /* tkMethod */,rtl.tTypeInfoProcVar);\n    newBaseTI(\"tTypeInfoArray\",10 /* tkArray */);\n    newBaseTI(\"tTypeInfoDynArray\",11 /* tkDynArray */);\n    newBaseTI(\"tTypeInfoPointer\",15 /* tkPointer */);\n    var t = newBaseTI(\"pointer\",15 /* tkPointer */,rtl.tTypeInfoPointer);\n    t.reftype = null;\n    newBaseTI(\"jsvalue\",16 /* tkJSValue */);\n    newBaseTI(\"tTypeInfoRefToProcVar\",17 /* tkRefToProcVar */,rtl.tTypeInfoProcVar);\n\n    // member kinds\n    rtl.tTypeMember = {};\n    function newMember(name,kind){\n      var m = Object.create(rtl.tTypeMember);\n      m.name = name;\n      m.kind = kind;\n      rtl[name] = m;\n    };\n    newMember(\"tTypeMemberField\",1); // tmkField\n    newMember(\"tTypeMemberMethod\",2); // tmkMethod\n    newMember(\"tTypeMemberProperty\",3); // tmkProperty\n\n    // base object for storing members: a simple object\n    rtl.tTypeMembers = {};\n\n    // tTypeInfoStruct - base object for tTypeInfoClass, tTypeInfoRecord, tTypeInfoInterface\n    var tis = newBaseTI(\"tTypeInfoStruct\",0);\n    tis.$addMember = function(name,ancestor,options){\n      if (rtl.debug_rtti){\n        if (!rtl.hasString(name) || (name.charAt()==='$')) throw 'invalid member \"'+name+'\", this=\"'+this.name+'\"';\n        if (!rtl.is(ancestor,rtl.tTypeMember)) throw 'invalid ancestor \"'+ancestor+':'+ancestor.name+'\", \"'+this.name+'.'+name+'\"';\n        if ((options!=undefined) && (typeof(options)!='object')) throw 'invalid options \"'+options+'\", \"'+this.name+'.'+name+'\"';\n      };\n      var t = Object.create(ancestor);\n      t.name = name;\n      this.members[name] = t;\n      this.names.push(name);\n      if (rtl.isObject(options)){\n        for (var key in options) if (options.hasOwnProperty(key)) t[key] = options[key];\n      };\n      return t;\n    };\n    tis.addField = function(name,type,options){\n      var t = this.$addMember(name,rtl.tTypeMemberField,options);\n      if (rtl.debug_rtti){\n        if (!rtl.is(type,rtl.tTypeInfo)) throw 'invalid type \"'+type+'\", \"'+this.name+'.'+name+'\"';\n      };\n      t.typeinfo = type;\n      this.fields.push(name);\n      return t;\n    };\n    tis.addFields = function(){\n      var i=0;\n      while(i<arguments.length){\n        var name = arguments[i++];\n        var type = arguments[i++];\n        if ((i<arguments.length) && (typeof(arguments[i])==='object')){\n          this.addField(name,type,arguments[i++]);\n        } else {\n          this.addField(name,type);\n        };\n      };\n    };\n    tis.addMethod = function(name,methodkind,params,result,options){\n      var t = this.$addMember(name,rtl.tTypeMemberMethod,options);\n      t.methodkind = methodkind;\n      t.procsig = rtl.newTIProcSig(params);\n      t.procsig.resulttype = result?result:null;\n      this.methods.push(name);\n      return t;\n    };\n    tis.addProperty = function(name,flags,result,getter,setter,options){\n      var t = this.$addMember(name,rtl.tTypeMemberProperty,options);\n      t.flags = flags;\n      t.typeinfo = result;\n      t.getter = getter;\n      t.setter = setter;\n      // Note: in options: params, stored, defaultvalue\n      if (rtl.isArray(t.params)) t.params = rtl.newTIParams(t.params);\n      this.properties.push(name);\n      if (!rtl.isString(t.stored)) t.stored = \"\";\n      return t;\n    };\n    tis.getField = function(index){\n      return this.members[this.fields[index]];\n    };\n    tis.getMethod = function(index){\n      return this.members[this.methods[index]];\n    };\n    tis.getProperty = function(index){\n      return this.members[this.properties[index]];\n    };\n\n    newBaseTI(\"tTypeInfoRecord\",12 /* tkRecord */,rtl.tTypeInfoStruct);\n    newBaseTI(\"tTypeInfoClass\",13 /* tkClass */,rtl.tTypeInfoStruct);\n    newBaseTI(\"tTypeInfoClassRef\",14 /* tkClassRef */);\n    newBaseTI(\"tTypeInfoInterface\",15 /* tkInterface */,rtl.tTypeInfoStruct);\n  },\n\n  tSectionRTTI: {\n    $module: null,\n    $inherited: function(name,ancestor,o){\n      if (rtl.debug_rtti){\n        rtl.debug('tSectionRTTI.newTI \"'+(this.$module?this.$module.$name:\"(no module)\")\n          +'\".\"'+name+'\" ('+ancestor.name+') '+(o?'init':'forward'));\n      };\n      var t = this[name];\n      if (t){\n        if (!t.$forward) throw 'duplicate type \"'+name+'\"';\n        if (!ancestor.isPrototypeOf(t)) throw 'typeinfo ancestor mismatch \"'+name+'\" ancestor=\"'+ancestor.name+'\" t.name=\"'+t.name+'\"';\n      } else {\n        t = Object.create(ancestor);\n        t.name = name;\n        t.module = this.module;\n        this[name] = t;\n      }\n      if (o){\n        delete t.$forward;\n        for (var key in o) if (o.hasOwnProperty(key)) t[key]=o[key];\n      } else {\n        t.$forward = true;\n      }\n      return t;\n    },\n    $Scope: function(name,ancestor,o){\n      var t=this.$inherited(name,ancestor,o);\n      t.members = {};\n      t.names = [];\n      t.fields = [];\n      t.methods = [];\n      t.properties = [];\n      return t;\n    },\n    $TI: function(name,kind,o){ var t=this.$inherited(name,rtl.tTypeInfo,o); t.kind = kind; return t; },\n    $Int: function(name,o){ return this.$inherited(name,rtl.tTypeInfoInteger,o); },\n    $Enum: function(name,o){ return this.$inherited(name,rtl.tTypeInfoEnum,o); },\n    $Set: function(name,o){ return this.$inherited(name,rtl.tTypeInfoSet,o); },\n    $StaticArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoArray,o); },\n    $DynArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoDynArray,o); },\n    $ProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoProcVar,o); },\n    $RefToProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoRefToProcVar,o); },\n    $MethodVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoMethodVar,o); },\n    $Record: function(name,o){ return this.$Scope(name,rtl.tTypeInfoRecord,o); },\n    $Class: function(name,o){ return this.$Scope(name,rtl.tTypeInfoClass,o); },\n    $ClassRef: function(name,o){ return this.$inherited(name,rtl.tTypeInfoClassRef,o); },\n    $Pointer: function(name,o){ return this.$inherited(name,rtl.tTypeInfoPointer,o); },\n    $Interface: function(name,o){ return this.$Scope(name,rtl.tTypeInfoInterface,o); }\n  },\n\n  newTIParam: function(param){\n    // param is an array, 0=name, 1=type, 2=optional flags\n    var t = {\n      name: param[0],\n      typeinfo: param[1],\n      flags: (rtl.isNumber(param[2]) ? param[2] : 0)\n    };\n    return t;\n  },\n\n  newTIParams: function(list){\n    // list: optional array of [paramname,typeinfo,optional flags]\n    var params = [];\n    if (rtl.isArray(list)){\n      for (var i=0; i<list.length; i++) params.push(rtl.newTIParam(list[i]));\n    };\n    return params;\n  },\n\n  newTIProcSig: function(params,result,flags){\n    var s = {\n      params: rtl.newTIParams(params),\n      resulttype: result,\n      flags: flags\n    };\n    return s;\n  }\n}\n","{\r\n    This file is part of the Pas2JS run time library.\r\n    Copyright (c) 2018 by Mattias Gaertner\r\n\r\n    See the file COPYING.FPC, included in this distribution,\r\n    for details about the copyright.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n **********************************************************************}\r\nunit System;\r\n\r\n{$mode objfpc}\r\n{$modeswitch externalclass}\r\n\r\ninterface\r\n\r\nconst\r\n  LineEnding = #10;\r\n  sLineBreak = LineEnding;\r\n\r\n  MaxSmallint = 32767;\r\n  MinSmallint = -32768;\r\n  MaxShortInt = 127;\r\n  MinShortInt = -128;\r\n  MaxByte = $FF;\r\n  MaxWord = $FFFF;\r\n  MaxLongint  = $7fffffff;\r\n  MaxCardinal = LongWord($ffffffff);\r\n\r\n  Maxint = MaxLongint;\r\n  IsMultiThread = false;\r\n\r\n{*****************************************************************************\r\n                               Base types\r\n*****************************************************************************}\r\ntype\r\n  Integer = LongInt;\r\n  Cardinal = LongWord;\r\n  DWord = LongWord;\r\n  SizeInt = NativeInt;\r\n  SizeUInt = NativeUInt;\r\n  PtrInt = NativeInt;\r\n  PtrUInt = NativeUInt;\r\n  ValSInt = NativeInt;\r\n  ValUInt = NativeUInt;\r\n  ValReal = Double;\r\n  Real = Double;\r\n  Extended = Double;\r\n\r\n  Int64 = NativeInt unimplemented; // only 53 bits at runtime\r\n  UInt64 = NativeUInt unimplemented; // only 52 bits at runtime\r\n  QWord = NativeUInt unimplemented; // only 52 bits at runtime\r\n  Single = Double unimplemented;\r\n  Comp = NativeInt unimplemented;\r\n  NativeLargeInt = NativeInt;\r\n  NativeLargeUInt = NativeUInt;\r\n\r\n  UnicodeString = String;\r\n  WideString = String;\r\n  WideChar = char;\r\n\r\n  TDynArrayIndex = NativeInt;\r\n  TTextLineBreakStyle = (tlbsLF,tlbsCRLF,tlbsCR);\r\n\r\n{*****************************************************************************\r\n            TObject, TClass, IUnknown, IInterface, TInterfacedObject\r\n*****************************************************************************}\r\ntype\r\n  TGuid = record\r\n    D1: DWord;\r\n    D2: word;\r\n    D3: word;\r\n    D4: array[0..7] of byte;\r\n  end;\r\n  TGUIDString = string; // ToDo: use type string when supported by compiler\r\n\r\n  TClass = class of TObject;\r\n\r\n  { TObject }\r\n\r\n  TObject = class\r\n  private\r\n    class var FClassName: String; external name '$classname';\r\n    class var FClassParent: TClass; external name '$ancestor';\r\n    class var FUnitName: String; external name '$module.$name';\r\n  public\r\n    constructor Create;\r\n    destructor Destroy; virtual;\r\n\r\n    // Free is using compiler magic.\r\n    // Reasons:\r\n    // 1. In JS calling obj.Free when obj=nil would crash.\r\n    // 2. In JS freeing memory requires to set all references to nil.\r\n    // Therefore any obj.free call is replaced by the compiler with some rtl magic.\r\n    procedure Free;\r\n\r\n    class function ClassType: TClass; assembler;\r\n    class property ClassName: String read FClassName;\r\n    class function ClassNameIs(const Name: string): boolean;\r\n    class property ClassParent: TClass read FClassParent;\r\n    class function InheritsFrom(aClass: TClass): boolean; assembler;\r\n    class property UnitName: String read FUnitName;\r\n\r\n    procedure AfterConstruction; virtual;\r\n    procedure BeforeDestruction; virtual;\r\n\r\n    function GetInterface(const iid: TGuid; out obj): boolean;\r\n    function GetInterface(const iidstr: String; out obj): boolean; inline;\r\n    function GetInterfaceByStr(const iidstr: String; out obj): boolean;\r\n    function GetInterfaceWeak(const iid: TGuid; out obj): boolean; // equal to GetInterface but the interface returned is not referenced\r\n\r\n    function Equals(Obj: TObject): boolean; virtual;\r\n    function ToString: String; virtual;\r\n  end;\r\n\r\nconst\r\n  { IInterface }\r\n  S_OK          = 0;\r\n  S_FALSE       = 1;\r\n  E_NOINTERFACE = -2147467262; // FPC: longint($80004002)\r\n  E_UNEXPECTED  = -2147418113; // FPC: longint($8000FFFF)\r\n  E_NOTIMPL     = -2147467263; // FPC: longint($80004001)\r\n\r\ntype\r\n  IUnknown = interface\r\n    ['{00000000-0000-0000-C000-000000000046}']\r\n    function QueryInterface(const iid: TGuid; out obj): Integer;\r\n    function _AddRef: Integer;\r\n    function _Release: Integer;\r\n  end;\r\n  IInterface = IUnknown;\r\n\r\n  {$M+}\r\n  IInvokable = interface(IInterface)\r\n  end;\r\n  {$M-}\r\n\r\n  { Enumerator support }\r\n  IEnumerator = interface(IInterface)\r\n    function GetCurrent: TObject;\r\n    function MoveNext: Boolean;\r\n    procedure Reset;\r\n    property Current: TObject read GetCurrent;\r\n  end;\r\n\r\n  IEnumerable = interface(IInterface)\r\n    function GetEnumerator: IEnumerator;\r\n  end;\r\n\r\n  { TInterfacedObject }\r\n\r\n  TInterfacedObject = class(TObject,IUnknown)\r\n  protected\r\n    fRefCount: Integer;\r\n    { implement methods of IUnknown }\r\n    function QueryInterface(const iid: TGuid; out obj): Integer; virtual;\r\n    function _AddRef: Integer; virtual;\r\n    function _Release: Integer; virtual;\r\n  public\r\n    procedure BeforeDestruction; override;\r\n    property RefCount: Integer read fRefCount;\r\n  end;\r\n  TInterfacedClass = class of TInterfacedObject;\r\n\r\n  { TAggregatedObject - sub or satellite object using same interface as controller }\r\n\r\n  TAggregatedObject = class(TObject)\r\n  private\r\n    fController: Pointer;\r\n    function GetController: IUnknown;\r\n  protected\r\n    { implement methods of IUnknown }\r\n    function QueryInterface(const iid: TGuid; out obj): Integer; virtual;\r\n    function _AddRef: Integer; virtual;\r\n    function _Release: Integer; virtual;\r\n  public\r\n    constructor Create(const aController: IUnknown);\r\n    property Controller: IUnknown read GetController;\r\n  end;\r\n\r\n  { TContainedObject }\r\n\r\n  TContainedObject = class(TAggregatedObject,IInterface)\r\n  protected\r\n    function QueryInterface(const iid: TGuid; out obj): Integer; override;\r\n  end;\r\n\r\nconst\r\n  { for safe as operator support }\r\n  IObjectInstance: TGuid = '{D91C9AF4-3C93-420F-A303-BF5BA82BFD23}';\r\n\r\nfunction GUIDToString(const GUID: TGUID): string; external name 'rtl.guidrToStr';\r\n\r\n{*****************************************************************************\r\n                            Init / Exit / ExitProc\r\n*****************************************************************************}\r\nvar\r\n  ExitCode: Integer; external name 'rtl.exitcode';\r\n  IsConsole: Boolean = {$IFDEF NodeJS}true{$ELSE}false{$ENDIF};\r\n\r\ntype\r\n  TOnParamCount = function: Longint;\r\n  TOnParamStr = function(Index: Longint): String;\r\nvar\r\n  OnParamCount: TOnParamCount;\r\n  OnParamStr: TOnParamStr;\r\n\r\nfunction ParamCount: Longint;\r\nfunction ParamStr(Index: Longint): String;\r\n\r\n{*****************************************************************************\r\n                                 Math\r\n*****************************************************************************}\r\nvar // ToDo: make these const\r\n  PI: Double; external name 'Math.PI';\r\n  MathE: Double; external name 'Math.E'; // Euler's number\r\n  MathLN10: Double; external name 'Math.LN10'; // ln(10)\r\n  MathLN2: Double; external name 'Math.LN2'; // ln(2)\r\n  MathLog10E: Double; external name 'Math.Log10E'; // log10(e)\r\n  MathLog2E: Double; external name 'Math.LOG2E'; // log2(e)\r\n  MathSQRT1_2: Double; external name 'Math.SQRT1_2'; // sqrt(0.5)\r\n  MathSQRT2: Double; external name 'Math.SQRT2'; // sqrt(2)\r\n\r\nfunction Abs(const A: integer): integer; overload; external name 'Math.abs';\r\nfunction Abs(const A: NativeInt): integer; overload; external name 'Math.abs';\r\nfunction Abs(const A: Double): Double; overload; external name 'Math.abs';\r\nfunction ArcTan(const A, B: Double): Double; external name 'Math.atan';\r\nfunction Cos(const A: Double): Double; external name 'Math.cos';\r\nfunction Exp(const A: Double): Double; external name 'Math.exp';\r\nfunction Frac(const A: Double): Double; assembler;\r\nfunction Ln(const A: Double): Double; external name 'Math.log';\r\nfunction Odd(const A: Integer): Boolean; assembler;\r\nfunction Random(const Range: Integer): Integer; overload; assembler;\r\nfunction Random: Double; overload; external name 'Math.random';\r\nfunction Round(const A: Double): NativeInt; external name 'Math.round';\r\nfunction Sin(const A: Double): Double; external name 'Math.sin';\r\nfunction Sqr(const A: Integer): Integer; assembler; overload;\r\nfunction Sqr(const A: Double): Double; assembler; overload;\r\nfunction sqrt(const A: Double): Double; external name 'Math.sqrt';\r\nfunction Trunc(const A: Double): NativeInt;\r\n\r\n{*****************************************************************************\r\n                          String functions\r\n*****************************************************************************}\r\nconst\r\n  DefaultTextLineBreakStyle : TTextLineBreakStyle = tlbsLF;\r\n\r\nfunction Int(const A: Double): double;\r\nfunction Copy(const S: string; Index, Size: Integer): String; assembler; overload;\r\nfunction Copy(const S: string; Index: Integer): String; assembler; overload;\r\nprocedure Delete(var S: String; Index, Size: Integer); assembler; overload;\r\nfunction Pos(const Search, InString: String): Integer; assembler; overload;\r\nfunction Pos(const Search, InString: String; StartAt : Integer): Integer; assembler; overload;\r\nprocedure Insert(const Insertion: String; var Target: String; Index: Integer); overload;\r\nfunction upcase(c : char) : char; assembler;\r\nfunction HexStr(Val: NativeInt; cnt: byte): string; external name 'rtl.hexStr'; overload;\r\n\r\nprocedure val(const S: String; out NI : NativeInt; out Code: Integer); overload;\r\nprocedure val(const S: String; out SI : ShortInt; out Code: Integer); overload;\r\nprocedure val(const S: String; out B : Byte; out Code: Integer); overload;\r\nprocedure val(const S: String; out SI : smallint; out Code: Integer); overload;\r\nprocedure val(const S: String; out W : word; out Code : Integer); overload;\r\nprocedure val(const S: String; out I : integer; out Code : Integer); overload;\r\nprocedure val(const S: String; out C : Cardinal; out Code: Integer); overload;\r\nprocedure val(const S: String; out d : double; out Code : Integer); overload;\r\nfunction StringOfChar(c: Char; l: NativeInt): String;\r\n\r\n{*****************************************************************************\r\n                          Other functions\r\n*****************************************************************************}\r\nprocedure Write; varargs; // ToDo: should be compiler built-in function\r\nprocedure Writeln; varargs; // ToDo: should be compiler built-in function\r\n\r\nType\r\n  TConsoleHandler = Procedure (S : JSValue; NewLine : Boolean);\r\nFunction SetWriteCallBack(H : TConsoleHandler) : TConsoleHandler;\r\n\r\nfunction Assigned(const V: JSValue): boolean; assembler; overload;\r\nfunction StrictEqual(const A: JSValue; const B): boolean; assembler;\r\nfunction StrictInequal(const A: JSValue; const B): boolean; assembler;\r\n\r\nimplementation\r\n\r\n// function parseInt(s: String; Radix: NativeInt): NativeInt; external name 'parseInt'; // may result NaN\r\nfunction isNaN(i: JSValue): boolean; external name 'isNaN'; // may result NaN\r\n\r\n// needed by ClassNameIs, the real SameText is in SysUtils\r\nfunction SameText(const s1, s2: String): Boolean; assembler;\r\nasm\r\n  return s1.toLowerCase() == s2.toLowerCase();\r\nend;\r\n\r\nfunction ParamCount: Longint;\r\nbegin\r\n  if Assigned(OnParamCount) then\r\n    Result:=OnParamCount()\r\n  else\r\n    Result:=0;\r\nend;\r\n\r\nfunction ParamStr(Index: Longint): String;\r\nbegin\r\n  if Assigned(OnParamStr) then\r\n    Result:=OnParamStr(Index)\r\n  else if Index=0 then\r\n    Result:='js'\r\n  else\r\n    Result:='';\r\nend;\r\n\r\n\r\nfunction Frac(const A: Double): Double; assembler;\r\nasm\r\n  return A % 1;\r\nend;\r\n\r\nfunction Odd(const A: Integer): Boolean; assembler;\r\nasm\r\n  return A&1 != 0;\r\nend;\r\n\r\nfunction Random(const Range: Integer): Integer; assembler;\r\nasm\r\n  return Math.floor(Math.random()*Range);\r\nend;\r\n\r\nfunction Sqr(const A: Integer): Integer; assembler;\r\nasm\r\n  return A*A;\r\nend;\r\n\r\nfunction Sqr(const A: Double): Double; assembler;\r\nasm\r\n  return A*A;\r\nend;\r\n\r\nfunction Trunc(const A: Double): NativeInt; assembler;\r\nasm\r\n  if (!Math.trunc) {\r\n    Math.trunc = function(v) {\r\n      v = +v;\r\n      if (!isFinite(v)) return v;\r\n      return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);\r\n    };\r\n  }\r\n  $mod.Trunc = Math.trunc;\r\n  return Math.trunc(A);\r\nend;\r\n\r\nfunction Copy(const S: string; Index, Size: Integer): String; assembler;\r\nasm\r\n  if (Index<1) Index = 1;\r\n  return (Size>0) ? S.substring(Index-1,Index+Size-1) : \"\";\r\nend;\r\n\r\nfunction Copy(const S: string; Index: Integer): String; assembler;\r\nasm\r\n  if (Index<1) Index = 1;\r\n  return S.substr(Index-1);\r\nend;\r\n\r\nprocedure Delete(var S: String; Index, Size: Integer);\r\nvar\r\n  h: String;\r\nbegin\r\n  if (Index<1) or (Index>length(S)) or (Size<=0) then exit;\r\n  h:=S;\r\n  S:=copy(h,1,Index-1)+copy(h,Index+Size);\r\nend;\r\n\r\nfunction Pos(const Search, InString: String): Integer; assembler;\r\nasm\r\n  return InString.indexOf(Search)+1;\r\nend;\r\n\r\nfunction Pos(const Search, InString: String; StartAt : Integer): Integer; assembler; overload;\r\n\r\nasm\r\n  return InString.indexOf(Search,StartAt-1)+1;\r\nend;\r\n\r\n\r\n\r\nprocedure Insert(const Insertion: String; var Target: String; Index: Integer);\r\nvar\r\n  t: String;\r\nbegin\r\n  if Insertion='' then exit;\r\n  t:=Target;\r\n  if Index<1 then\r\n    Target:=Insertion+t\r\n  else if Index>length(t) then\r\n    Target:=t+Insertion\r\n  else\r\n    Target:=copy(t,1,Index-1)+Insertion+copy(t,Index,length(t));\r\nend;\r\n\r\nvar\r\n  WriteBuf: String;\r\n  JSArguments: array of JSValue; external name 'arguments';\r\n  WriteCallBack : TConsoleHandler;\r\n\r\nFunction SetWriteCallBack(H : TConsoleHandler) : TConsoleHandler;\r\n\r\nbegin\r\n  Result:=WriteCallBack;\r\n  WriteCallBack:=H;\r\nend;\r\n\r\nprocedure Write;\r\nvar\r\n  i: Integer;\r\nbegin\r\n  for i:=0 to length(JSArguments)-1 do\r\n    if Assigned(WriteCallBack) then\r\n      WriteCallBack(JSArguments[i],False)\r\n    else\r\n      WriteBuf:=WriteBuf+String(JSArguments[i]);\r\nend;\r\n\r\nprocedure Writeln;\r\n\r\nvar\r\n  i,l: Integer;\r\n  s: String;\r\n\r\nbegin\r\n  L:=length(JSArguments)-1;\r\n  if Assigned(WriteCallBack) then\r\n    begin\r\n    for i:=0 to L do\r\n      WriteCallBack(JSArguments[i],I=L);\r\n    end\r\n  else\r\n    begin\r\n    s:=WriteBuf;\r\n    for i:=0 to L do\r\n      s:=s+String(JSArguments[i]);\r\n    asm\r\n      console.log(s);\r\n    end;\r\n    WriteBuf:='';\r\n    end;\r\nend;\r\n\r\nfunction Int(const A: Double): double;\r\n\r\n  function FTrunc(const A: Double): double; overload; external name 'Math.trunc';\r\n\r\nbegin\r\n  Result:=FTrunc(A);\r\nend;\r\n\r\nfunction Number(S: String): Double; external name 'Number';\r\n\r\nprocedure val(const S: String; out NI : NativeInt; out Code: Integer);\r\n\r\nvar\r\n  x : double;\r\n\r\nbegin\r\n  Code:=0;\r\n  x:=Number(S);\r\n  if isNaN(x) or (X<>Int(X)) then\r\n    Code:=1\r\n  else\r\n    NI:=Trunc(x);\r\nend;\r\n\r\nprocedure val(const S: String; out SI : ShortInt; out Code: Integer);\r\n\r\nvar\r\n  X:Double;\r\nbegin\r\n  Code:=0;\r\n  x:=Number(S);\r\n  if isNaN(x) or (X<>Int(X)) then\r\n    Code:=1\r\n  else if (x<MinShortInt) or (x>MaxShortInt) then\r\n    Code:=2\r\n  else\r\n    SI:=Trunc(x);\r\nend;\r\n\r\nprocedure val(const S: String; out SI: smallint; out Code: Integer);\r\n\r\nvar\r\n  x: double;\r\nbegin\r\n  Code:=0;\r\n  x:=Number(S);\r\n  if isNaN(x) or (X<>Int(X)) then\r\n    Code:=1\r\n  else if (x<MinSmallint) or (x>MaxSmallint) then\r\n    Code:=2\r\n  else\r\n    SI:=Trunc(x);\r\nend;\r\n\r\nprocedure val(const S: String; out C: Cardinal; out Code: Integer);\r\n\r\nvar\r\n  x: double;\r\nbegin\r\n  Code:=0;\r\n  x:=Number(S);\r\n  if isNaN(x) or (X<>Int(X)) then\r\n    Code:=1\r\n  else if (x<0) or (x>MaxCardinal) then\r\n    Code:=2\r\n  else\r\n    C:=trunc(x);\r\nend;\r\n\r\nprocedure val(const S: String; out B: Byte; out Code: Integer);\r\n\r\nvar\r\n  x: double;\r\nbegin\r\n  Code:=0;\r\n  x:=Number(S);\r\n  if isNaN(x) or (X<>Int(X)) then\r\n    Code:=1\r\n  else if (x<0) or (x>MaxByte) then\r\n    Code:=2\r\n  else\r\n    B:=Trunc(x);\r\nend;\r\n\r\n\r\nprocedure val(const S: String; out W: word; out Code: Integer);\r\n\r\nvar\r\n  x: double;\r\nbegin\r\n  Code:=0;\r\n  x:=Number(S);\r\n  if isNaN(x) then\r\n    Code:=1\r\n  else if (x<0) or (x>MaxWord) then\r\n    Code:=2\r\n  else\r\n    W:=Trunc(x);\r\nend;\r\n\r\nprocedure val(const S : String; out I : integer; out Code : Integer);\r\nvar\r\n  x: double;\r\nbegin\r\n  Code:=0;\r\n  x:=Number(S);\r\n  if isNaN(x) then\r\n    Code:=1\r\n  else if x>MaxInt then\r\n    Code:=2\r\n  else\r\n    I:=Trunc(x);\r\nend;\r\n\r\nprocedure val(const S : String; out d : double; out Code : Integer);\r\n\r\nVar\r\n  x: double;\r\nbegin\r\n  x:=Number(S);\r\n  if isNaN(x) then\r\n    Code:=1\r\n  else\r\n    begin\r\n    Code:=0;\r\n    d:=x;\r\n    end;\r\nend;\r\n\r\nfunction upcase(c : char) : char; assembler;\r\n\r\nasm\r\n  return c.toUpperCase();\r\nend;\r\n\r\nfunction StringOfChar(c: Char; l: NativeInt): String;\r\nvar\r\n  i: Integer;\r\nbegin\r\n  Result:='';\r\n  for i:=1 to l do Result:=Result+c;\r\nend;\r\n\r\nfunction Assigned(const V: JSValue): boolean; assembler;\r\nasm\r\n  return (V!=undefined) && (V!=null) && (!rtl.isArray(V) || (V.length > 0));\r\nend;\r\n\r\nfunction StrictEqual(const A: JSValue; const B): boolean; assembler;\r\nasm\r\n  return A === B;\r\nend;\r\n\r\nfunction StrictInequal(const A: JSValue; const B): boolean; assembler;\r\nasm\r\n  return A !== B;\r\nend;\r\n\r\n{ TContainedObject }\r\n\r\nfunction TContainedObject.QueryInterface(const iid: TGuid; out obj): Integer;\r\nbegin\r\n  if GetInterface(iid,obj) then\r\n    Result:=S_OK\r\n  else\r\n    Result:=Integer(E_NOINTERFACE);\r\nend;\r\n\r\n{ TAggregatedObject }\r\n\r\nfunction TAggregatedObject.GetController: IUnknown;\r\nbegin\r\n  Result := IUnknown(fController);\r\nend;\r\n\r\nfunction TAggregatedObject.QueryInterface(const iid: TGuid; out obj): Integer;\r\nbegin\r\n  Result := IUnknown(fController).QueryInterface(iid, obj);\r\nend;\r\n\r\nfunction TAggregatedObject._AddRef: Integer;\r\nbegin\r\n  Result := IUnknown(fController)._AddRef;\r\nend;\r\n\r\nfunction TAggregatedObject._Release: Integer;\r\nbegin\r\n  Result := IUnknown(fController)._Release;\r\nend;\r\n\r\nconstructor TAggregatedObject.Create(const aController: IUnknown);\r\nbegin\r\n  inherited Create;\r\n  { do not keep a counted reference to the controller! }\r\n  fController := Pointer(aController);\r\nend;\r\n\r\n{ TInterfacedObject }\r\n\r\nfunction TInterfacedObject.QueryInterface(const iid: TGuid; out obj): Integer;\r\nbegin\r\n  if GetInterface(iid,obj) then\r\n    Result:=S_OK\r\n  else\r\n    Result:=Integer(E_NOINTERFACE);\r\nend;\r\n\r\nfunction TInterfacedObject._AddRef: Integer;\r\nbegin\r\n  inc(fRefCount);\r\n  Result:=fRefCount;\r\nend;\r\n\r\nfunction TInterfacedObject._Release: Integer;\r\nbegin\r\n  dec(fRefCount);\r\n  Result:=fRefCount;\r\n  if fRefCount=0 then\r\n    Destroy;\r\nend;\r\n\r\nprocedure TInterfacedObject.BeforeDestruction;\r\nbegin\r\n  if fRefCount<>0 then\r\n    asm\r\n    rtl.raiseE('EHeapMemoryError');\r\n    end;\r\nend;\r\n\r\n{ TObject }\r\n\r\nconstructor TObject.Create;\r\nbegin\r\n\r\nend;\r\n\r\ndestructor TObject.Destroy;\r\nbegin\r\n\r\nend;\r\n\r\nprocedure TObject.Free;\r\nbegin\r\n  Destroy;\r\nend;\r\n\r\nclass function TObject.ClassType: TClass; assembler;\r\nasm\r\n  return this;\r\nend;\r\n\r\nclass function TObject.ClassNameIs(const Name: string): boolean;\r\nbegin\r\n  Result:=SameText(Name,ClassName);\r\nend;\r\n\r\nclass function TObject.InheritsFrom(aClass: TClass): boolean; assembler;\r\nasm\r\n  return (aClass!=null) && ((this==aClass) || aClass.isPrototypeOf(this));\r\nend;\r\n\r\nprocedure TObject.AfterConstruction;\r\nbegin\r\n\r\nend;\r\n\r\nprocedure TObject.BeforeDestruction;\r\nbegin\r\n\r\nend;\r\n\r\nfunction TObject.GetInterface(const iid: TGuid; out obj): boolean;\r\nbegin\r\n  asm\r\n    var i = iid.$intf;\r\n    if (i){\r\n      i = rtl.getIntfG(this,i.$guid,2);\r\n      if (i){\r\n        obj.set(i);\r\n        return true;\r\n      }\r\n    }\r\n  end;\r\n  Result := GetInterfaceByStr(GUIDToString(iid),obj);\r\nend;\r\n\r\nfunction TObject.GetInterface(const iidstr: String; out obj): boolean;\r\nbegin\r\n  Result := GetInterfaceByStr(iidstr,obj);\r\nend;\r\n\r\nfunction TObject.GetInterfaceByStr(const iidstr: String; out obj): boolean;\r\nbegin\r\n  if (iidstr = IObjectInstance) then\r\n    begin\r\n    obj:=Self;\r\n    exit(true);\r\n    end;\r\n  asm\r\n    var i = rtl.getIntfG(this,iidstr,2);\r\n    obj.set(i);\r\n    return i!==null;\r\n  end;\r\n  Result:=false;\r\nend;\r\n\r\nfunction TObject.GetInterfaceWeak(const iid: TGuid; out obj): boolean;\r\nbegin\r\n  Result:=GetInterface(iid,obj);\r\n  asm\r\n    if (Result){\r\n      var o = obj.get();\r\n      if (o.$kind==='com'){\r\n        o._Release();\r\n      }\r\n    }\r\n  end;\r\nend;\r\n\r\nfunction TObject.Equals(Obj: TObject): boolean;\r\nbegin\r\n  Result:=Obj=Self;\r\nend;\r\n\r\nfunction TObject.ToString: String;\r\nbegin\r\n  Result:=ClassName;\r\nend;\r\n\r\n\r\ninitialization\r\n  ExitCode:=0; // set it here, so that WPO does not remove it\r\n\r\nend.\r\n\r\n","{\r\n    This file is part of the Pas2JS run time library.\r\n    Copyright (c) 2018 by Mattias Gaertner\r\n\r\n    See the file COPYING.FPC, included in this distribution,\r\n    for details about the copyright.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n **********************************************************************}\r\nunit Types;\r\n\r\n{$mode objfpc}\r\n\r\ninterface\r\n\r\ntype\r\n  TDirection = (FromBeginning, FromEnd);\r\n\r\n  TBooleanDynArray = array of Boolean;\r\n  TIntegerDynArray = array of Integer;\r\n  TStringDynArray = array of String;\r\n  TDoubleDynArray = array of Double;\r\n  TJSValueDynArray = array of JSValue;\r\n\r\n  TDuplicates = (dupIgnore, dupAccept, dupError);\r\n\r\n  TListCallback = procedure(data, arg: JSValue) of object;\r\n  TListStaticCallback = procedure(data, arg: JSValue);\r\n\r\n  TSize  = record\r\n    cx, cy: integer;\r\n  end;\r\n\r\n  TPoint  = record\r\n    x, y: integer;\r\n  end;\r\n\r\n  TRect  = record\r\n    Left, Top, Right, Bottom: Integer;\r\n  end;\r\n\r\nfunction EqualRect(const r1,r2 : TRect) : Boolean;\r\nfunction Rect(Left, Top, Right, Bottom : Integer) : TRect;\r\nfunction Bounds(ALeft, ATop, AWidth, AHeight : Integer) : TRect;\r\nfunction Point(x,y : Integer): TPoint; {$IFDEF Has_Inline}inline;{$ENDIF}\r\nfunction PtInRect(const aRect: TRect; const p: TPoint) : Boolean;\r\nfunction IntersectRect(out aRect: TRect; const R1,R2: TRect) : Boolean;\r\nfunction UnionRect(out aRect: TRect; const R1,R2: TRect) : Boolean;\r\nfunction IsRectEmpty(const aRect: TRect) : Boolean;\r\nfunction OffsetRect(var aRect: TRect; DX, DY: Integer) : Boolean;\r\nfunction CenterPoint(const aRect: TRect): TPoint;\r\nfunction InflateRect(var aRect: TRect; dx, dy: Integer): Boolean;\r\nfunction Size(AWidth, AHeight: Integer): TSize;\r\nfunction Size(const aRect: TRect): TSize;\r\n\r\nimplementation\r\n\r\nfunction EqualRect(const r1, r2: TRect): Boolean;\r\nbegin\r\n  Result:=(r1.left=r2.left) and (r1.right=r2.right) and (r1.top=r2.top) and (r1.bottom=r2.bottom);\r\nend;\r\n\r\nfunction Rect(Left, Top, Right, Bottom: Integer): TRect;\r\nbegin\r\n  Result.Left:=Left;\r\n  Result.Top:=Top;\r\n  Result.Right:=Right;\r\n  Result.Bottom:=Bottom;\r\nend;\r\n\r\nfunction Bounds(ALeft, ATop, AWidth, AHeight: Integer): TRect;\r\nbegin\r\n  Result.Left:=ALeft;\r\n  Result.Top:=ATop;\r\n  Result.Right:=ALeft+AWidth;\r\n  Result.Bottom:=ATop+AHeight;\r\nend;\r\n\r\nfunction Point(x, y: Integer): TPoint;\r\nbegin\r\n  Result.x:=x;\r\n  Result.y:=y;\r\nend;\r\n\r\nfunction PtInRect(const aRect: TRect; const p: TPoint): Boolean;\r\nbegin\r\n  Result:=(p.y>=aRect.Top) and\r\n          (p.y<aRect.Bottom) and\r\n          (p.x>=aRect.Left) and\r\n          (p.x<aRect.Right);\r\nend;\r\n\r\nfunction IntersectRect(out aRect: TRect; const R1, R2: TRect): Boolean;\r\nvar\r\n  lRect: TRect;\r\nbegin\r\n  lRect := R1;\r\n  if R2.Left > R1.Left then\r\n    lRect.Left := R2.Left;\r\n  if R2.Top > R1.Top then\r\n    lRect.Top := R2.Top;\r\n  if R2.Right < R1.Right then\r\n    lRect.Right := R2.Right;\r\n  if R2.Bottom < R1.Bottom then\r\n    lRect.Bottom := R2.Bottom;\r\n\r\n  // The var parameter is only assigned in the end to avoid problems\r\n  // when passing the same rectangle in the var and const parameters.\r\n  if IsRectEmpty(lRect) then\r\n  begin\r\n    aRect:=Rect(0,0,0,0);\r\n    Result:=false;\r\n  end\r\n  else\r\n  begin\r\n    Result:=true;\r\n    aRect := lRect;\r\n  end;\r\nend;\r\n\r\nfunction UnionRect(out aRect: TRect; const R1, R2: TRect): Boolean;\r\nvar\r\n  lRect: TRect;\r\nbegin\r\n  lRect:=R1;\r\n  if R2.Left<R1.Left then\r\n    lRect.Left:=R2.Left;\r\n  if R2.Top<R1.Top then\r\n    lRect.Top:=R2.Top;\r\n  if R2.Right>R1.Right then\r\n    lRect.Right:=R2.Right;\r\n  if R2.Bottom>R1.Bottom then\r\n    lRect.Bottom:=R2.Bottom;\r\n\r\n  if IsRectEmpty(lRect) then\r\n  begin\r\n    aRect:=Rect(0,0,0,0);\r\n    Result:=false;\r\n  end\r\n  else\r\n  begin\r\n    aRect:=lRect;\r\n    Result:=true;\r\n  end;\r\nend;\r\n\r\nfunction IsRectEmpty(const aRect: TRect): Boolean;\r\nbegin\r\n  Result:=(aRect.Right<=aRect.Left) or (aRect.Bottom<=aRect.Top);\r\nend;\r\n\r\nfunction OffsetRect(var aRect: TRect; DX, DY: Integer): Boolean;\r\nbegin\r\n  with aRect do\r\n    begin\r\n    inc(Left,dx);\r\n    inc(Top,dy);\r\n    inc(Right,dx);\r\n    inc(Bottom,dy);\r\n    end;\r\n  Result:=true;\r\nend;\r\n\r\nfunction CenterPoint(const aRect: TRect): TPoint;\r\n\r\n  function Avg(a, b: Longint): Longint;\r\n  begin\r\n    if a < b then\r\n      Result := a + ((b - a) shr 1)\r\n    else\r\n      Result := b + ((a - b) shr 1);\r\n  end;\r\n\r\nbegin\r\n  with aRect do\r\n    begin\r\n      Result.X := Avg(Left, Right);\r\n      Result.Y := Avg(Top, Bottom);\r\n    end;\r\nend;\r\n\r\nfunction InflateRect(var aRect: TRect; dx, dy: Integer): Boolean;\r\nbegin\r\n  with aRect do\r\n  begin\r\n    dec(Left, dx);\r\n    dec(Top, dy);\r\n    inc(Right, dx);\r\n    inc(Bottom, dy);\r\n  end;\r\n  Result := True;\r\nend;\r\n\r\nfunction Size(AWidth, AHeight: Integer): TSize;\r\nbegin\r\n  Result.cx := AWidth;\r\n  Result.cy := AHeight;\r\nend;\r\n\r\nfunction Size(const aRect: TRect): TSize;\r\nbegin\r\n  Result.cx := aRect.Right - aRect.Left;\r\n  Result.cy := aRect.Bottom - aRect.Top;\r\nend;\r\n\r\nend.\r\n\r\n","{\r\n    This file is part of the Pas2JS run time library.\r\n    Copyright (c) 2017 by Mattias Gaertner\r\n\r\n    See the file COPYING.FPC, included in this distribution,\r\n    for details about the copyright.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n **********************************************************************}\r\nunit JS;\r\n\r\n{$mode objfpc}\r\n{$modeswitch externalclass}\r\n\r\ninterface\r\n\r\nuses\r\n  Types;\r\n\r\ntype\r\n  // We cannot use EConvertError or Exception, this would result in a circular dependency.\r\n\r\n  { EJS }\r\n\r\n  EJS = class(TObject)\r\n  private\r\n    FMessage: string;\r\n  Public\r\n    constructor Create(const Msg: String); reintroduce;\r\n    property Message : string Read FMessage Write FMessage;\r\n  end;\r\n\r\n  TJSObjectPropertyDescriptor = JSValue;\r\n  Float32 = Double;\r\n  Float64 = Double;\r\n\r\n  { TJSObject }\r\n\r\n  TJSObject = class external name 'Object'\r\n  private\r\n    function GetProperties(Name: String): JSValue; external name '[]';\r\n    procedure SetProperties(Name: String; const AValue: JSValue); external name '[]';\r\n  public\r\n    constructor new;\r\n    class function create(const proto: TJSObject): TJSObject;\r\n    class function create(const proto, propertiesObject: TJSObject): TJSObject;\r\n    class function assign(const Target, Source1: TJSObject): TJSObject; varargs;\r\n    class procedure defineProperty(const obj: TJSObject; propname: String; const descriptor: TJSObjectPropertyDescriptor);\r\n    //class procedure defineProperties\r\n    class function freeze(const obj: TJSObject): TJSObject;\r\n    class function getOwnPropertyDescriptor(const obj: TJSObject; propname: String): TJSObjectPropertyDescriptor;\r\n    //class function getOwnPropertyDescriptors\r\n    class function getOwnPropertyNames(const obj: TJSObject): TStringDynArray;\r\n    {$IFDEF FIREFOX}\r\n    class function getOwnPropertySymbols(const obj: TJSObject): TJSValueDynArray;\r\n    {$ENDIF}\r\n    class function getPrototypeOf(const obj: TJSObject): TJSObject;\r\n    {$IFDEF FIREFOX}\r\n    class function _is(const value1, value2: JSValue): boolean;\r\n    {$ENDIF}\r\n    class function isExtensible(const obj: TJSObject): boolean;\r\n    class function isFrozen(const obj: TJSObject): boolean;\r\n    class function isSealed(const obj: TJSObject): boolean;\r\n    class function keys(const obj: TJSObject): TStringDynArray;\r\n    class function preventExtensions(const obj: TJSObject): TJSObject;\r\n    class function seal(const obj: TJSObject): TJSObject;\r\n    class function setPrototypeOf(const obj, prototype: TJSObject): TJSObject;\r\n    function hasOwnProperty(prop: String): boolean;\r\n    function isPrototypeOf(const obj: TJSObject): boolean;\r\n    function propertyIsEnumerable(propname: String): boolean;\r\n    function toLocaleString: String;\r\n    function toString: String;\r\n    function valueOf: JSValue;\r\n    property Properties[Name: String]: JSValue read GetProperties write SetProperties; default;\r\n  end;\r\n\r\n  TJSObjectDynArray = Array of TJSObject;\r\n  TJSObjectDynArrayArray = Array of TJSObjectDynArray;\r\n  TJSStringDynArray = Array of String;\r\n\r\n  { TJSFunction }\r\n\r\n  TJSFunction = class external name 'Function'(TJSObject)\r\n  private\r\n    Flength: NativeInt external name 'length';\r\n    Fprototyp: TJSFunction external name 'prototyp';\r\n  public\r\n    name: String;\r\n    property prototyp: TJSFunction read Fprototyp;\r\n    property length: NativeInt read Flength;\r\n    function apply(thisArg: TJSObject; const ArgArray: TJSValueDynArray): JSValue; varargs;\r\n    function bind(thisArg: TJSObject): JSValue; varargs;\r\n    function call(thisArg: TJSObject): JSValue; varargs;\r\n  end;\r\n\r\n  { TJSDate - wrapper for JavaScript Date }\r\n\r\n  TJSDate = class external name 'Date'(TJSFunction)\r\n  private\r\n    function getDate: NativeInt;\r\n    function getFullYear: NativeInt;\r\n    function getHours: NativeInt;\r\n    function getMilliseconds: NativeInt;\r\n    function getMinutes: NativeInt;\r\n    function getMonth: NativeInt;\r\n    function getSeconds: NativeInt;\r\n    function getYear: NativeInt;\r\n    function getTime: NativeInt;\r\n    function getUTCDate: NativeInt;\r\n    function getUTCFullYear: NativeInt;\r\n    function getUTCHours: NativeInt;\r\n    function getUTCMilliseconds: NativeInt;\r\n    function getUTCMinutes: NativeInt;\r\n    function getUTCMonth: NativeInt;\r\n    function getUTCSeconds: NativeInt;\r\n    procedure setDate(const AValue: NativeInt);\r\n    procedure setFullYear(const AValue: NativeInt);\r\n    procedure setHours(const AValue: NativeInt);\r\n    procedure setMilliseconds(const AValue: NativeInt);\r\n    procedure setMinutes(const AValue: NativeInt);\r\n    procedure setMonth(const AValue: NativeInt);\r\n    procedure setSeconds(const AValue: NativeInt);\r\n    procedure setYear(const AValue: NativeInt);\r\n    procedure setTime(const AValue: NativeInt);\r\n    procedure setUTCDate(const AValue: NativeInt);\r\n    procedure setUTCFullYear(const AValue: NativeInt);\r\n    procedure setUTCHours(const AValue: NativeInt);\r\n    procedure setUTCMilliseconds(const AValue: NativeInt);\r\n    procedure setUTCMinutes(const AValue: NativeInt);\r\n    procedure setUTCMonth(const AValue: NativeInt);\r\n    procedure setUTCSeconds(const AValue: NativeInt);\r\n  public\r\n    constructor New; reintroduce;\r\n    constructor New(const MilliSecsSince1970: NativeInt); // milliseconds since 1 January 1970 00:00:00 UTC, with leap seconds ignored\r\n    constructor New(const aDateString: String); // RFC 2822, ISO8601\r\n    constructor New(aYear: NativeInt; aMonth: NativeInt; aDayOfMonth: NativeInt = 1;\r\n      TheHours: NativeInt = 0; TheMinutes: NativeInt = 0; TheSeconds: NativeInt = 0;\r\n      TheMilliseconds: NativeInt = 0);\r\n    class function now: NativeInt; // current date and time in milliseconds since 1 January 1970 00:00:00 UTC, with leap seconds ignored\r\n    class function parse(const aDateString: string): NativeInt; // format depends on browser\r\n    class function UTC(aYear: NativeInt; aMonth: NativeInt = 0; aDayOfMonth: NativeInt = 1;\r\n      TheHours: NativeInt = 0; TheMinutes: NativeInt = 0; TheSeconds: NativeInt = 0;\r\n      TheMilliseconds: NativeInt = 0): NativeInt;\r\n    function getDay: NativeInt;\r\n    function getTimezoneOffset: NativeInt;\r\n    function getUTCDay: NativeInt; // day of the week\r\n    function toDateString: string; // human readable date, without time\r\n    function toISOString: string; // ISO 8601 Extended Format\r\n    function toJSON: string;\r\n    function toGMTString: string; // in GMT timezone\r\n    function toLocaleDateString: string; // date in locale timezone, no time\r\n    function toLocaleString: string; reintroduce; // date and time in locale timezone\r\n    function toLocaleTimeString: string; // time in locale timezone, no date\r\n    function toTimeString: string; // time human readable, no date\r\n    function toUTCString: string; // date and time using UTC timezone\r\n    property Year: NativeInt read getYear write setYear;\r\n    property Time: NativeInt read getTime write setTime; // milliseconds since 1 January 1970 00:00:00 UTC, with leap seconds ignored\r\n    property FullYear: NativeInt read getFullYear write setFullYear;\r\n    property UTCDate: NativeInt read getUTCDate write setUTCDate; // day of month\r\n    property UTCFullYear: NativeInt read getUTCFullYear write setUTCFullYear;\r\n    property UTCHours: NativeInt read getUTCHours write setUTCHours;\r\n    property UTCMilliseconds: NativeInt read getUTCMilliseconds write setUTCMilliseconds;\r\n    property UTCMinutes: NativeInt read getUTCMinutes write setUTCMinutes;\r\n    property UTCMonth: NativeInt read getUTCMonth write setUTCMonth;\r\n    property UTCSeconds: NativeInt read getUTCSeconds write setUTCSeconds;\r\n    property Month: NativeInt read getMonth write setMonth;\r\n    property Date: NativeInt read getDate write setDate; // day of the month, starting at 1\r\n    property Hours: NativeInt read getHours write setHours;\r\n    property Minutes: NativeInt read getMinutes write setMinutes;\r\n    property Seconds: NativeInt read getSeconds write setSeconds;\r\n    property Milliseconds: NativeInt read getMilliseconds write setMilliseconds;\r\n  end;\r\n\r\n  TLocaleCompareOptions = record\r\n    localematched : string;\r\n    usage: string;\r\n    sensitivity : string;\r\n    ignorePunctuation : Boolean;\r\n    numeric : boolean;\r\n    caseFirst : string;\r\n  end;\r\n\r\n  TJSRegexp = class external name 'RegExp'\r\n  private\r\n  {$IFDEF FIREFOX}\r\n    // not on all browsers:\r\n    FFlags : string; external name 'flags';\r\n    FSticky : boolean; external name 'sticky';\r\n  {$endif}\r\n    fglobal: boolean; external name 'global';\r\n    fignoreCase : boolean; external name 'ignoreCase';\r\n    fmultiline : boolean; external name 'multiline';\r\n    fsource : string; external name 'source';\r\n    funicode : boolean; external name 'unicode';\r\n  public\r\n    Constructor New(Pattern : string);\r\n    Constructor New(Pattern, Flags : string);\r\n    lastIndex: NativeInt;\r\n    function exec(aString : string): TStringDynArray;\r\n    function test(aString : string) : boolean;\r\n    function toString : String;\r\n    property Global : boolean read fglobal;\r\n    property IgnoreCase : Boolean read FIgnoreCase;\r\n    property Multiline : Boolean Read FMultiLine;\r\n    Property Source : string Read FSource;\r\n    Property Unicode : boolean Read FUnicode;\r\n    {$IFDEF FIREFOX}\r\n    // not on all browsers:\r\n    property Flags : string read FFlags;\r\n    property Sticky : boolean read FSticky;\r\n    {$endif}\r\n  end;\r\n\r\n\r\n  TReplaceCallBack = Function () : string; varargs;\r\n\r\n  TJSString = class external name 'String'\r\n  private\r\n    flength : NativeInt; external name 'length';\r\n  public \r\n    constructor New(Const S : String);\r\n    constructor New(Const I : NativeInt);\r\n    constructor New(Const D : double);\r\n    property length : NativeInt read flength; \r\n    class function fromCharCode() : string; varargs;\r\n    class function fromCodePoint() : string; varargs;\r\n    function anchor(const aName : string) : string;\r\n    function charAt(aIndex : NativeInt) : string;\r\n    function charCodeAt(aIndex : NativeInt) : NativeInt;\r\n    function codePointAt(aIndex : NativeInt) : NativeInt;\r\n    function concat(s : string) : string; varargs;\r\n    function endsWith(aSearchString : string; Pos : NativeInt = 0) : boolean;\r\n    function includes(aSearchString : string; Pos : NativeInt = 0) : boolean;\r\n    function indexOf(aSearchString : String; Pos : NativeInt = 0) : Integer;\r\n    function lastIndexOf(aSearchString : String) : NativeInt;overload;\r\n    function lastIndexOf(aSearchString : String; Pos : NativeInt) : Integer;overload;\r\n    function link(aUrl : string) : String;\r\n    function localeCompare(aCompareString : string) : NativeInt; overload;\r\n    function localeCompare(aCompareString : string; aLocales: string) : integer; overload;\r\n    function localeCompare(compareString : string; locales: string; Options : TlocaleCompareOptions) : integer; overload;\r\n    function match(aRegexp : TJSRegexp) : TStringDynArray; overload;\r\n    function match(aRegexp : String) : TStringDynArray;overload;\r\n    {$IFDEF ECMAScript6}\r\n    function normalize(aForm : string) : string;\r\n    {$ENDIF}\r\n    function _repeat(aCount : NativeInt) : Integer; external name 'repeat';\r\n    function replace(aRegexp : String; NewString : String) : String; overload;\r\n    function replace(aRegexp : TJSRegexp; NewString : String) : String; overload;\r\n    function replace(Regexp : String; aCallback : TReplaceCallBack) : String; overload;\r\n    function replace(Regexp : TJSRegexp; aCallback : TReplaceCallBack) : String; overload;\r\n    function search(Regexp : TJSRegexp) : NativeInt; overload;\r\n    function search(Regexp : JSValue) : NativeInt; overload;\r\n    function slice(aBeginIndex : NativeInt) : String; overload;\r\n    function slice(aBeginIndex, aEndIndex : NativeInt) : String; overload;\r\n    function split : TStringDynArray; overload;\r\n    function split(aSeparator : string) : TStringDynArray; overload;\r\n    function split(aSeparator : string; aLimit : NativeInt) : TStringDynArray; overload;\r\n    function startsWith(aSearchString : String) : Boolean; overload;\r\n    function startsWith(aSearchString : String; aPosition : NativeInt) : Boolean; overload;\r\n    function substr(aStartIndex : NativeInt) : String; overload;\r\n    function substr(aStartIndex,aLength : NativeInt) : String; overload;\r\n    function subString(aStartIndex : NativeInt) : String; overload;\r\n    function subString(aStartIndex,aEndIndex : NativeInt) : String; overload;\r\n    function toLocaleLowerCase : String;\r\n    function toLocaleUpperCase : String;\r\n    function toLowerCase : String;\r\n    function toString : string;\r\n    function toUpperCase : String;\r\n    function trim : string;\r\n    function valueOf : string;\r\n  end;\r\n\r\n  TJSArray = Class;\r\n  \r\n  TJSArrayEvent = reference to function (element : JSValue; index: NativeInt; anArray : TJSArray) : Boolean;\r\n  TJSArrayMapEvent = reference to function (element : JSValue; index: NativeInt; anArray : TJSArray) : JSValue;\r\n  TJSArrayReduceEvent = reference to function (accumulator, currentValue : JSValue; currentIndex : NativeInt; anArray : TJSArray) : JSValue;\r\n  TJSArrayCompareEvent = reference to function (a,b : JSValue) : NativeInt;\r\n  TJSArrayCallback = TJSArrayEvent;\r\n  TJSArrayMapCallback = TJSArrayMapEvent;\r\n  TJSArrayReduceCallBack = TJSArrayReduceEvent;\r\n  TJSArrayCompareCallBack = TJSArrayCompareEvent;\r\n\r\n  { TJSArray }\r\n\r\n  TJSArray = Class external name 'Array'\r\n  private\r\n    function GetElements(Index: NativeInt): JSValue; external name '[]';\r\n    procedure SetElements(Index: NativeInt; const AValue: JSValue); external name '[]';\r\n  public\r\n    flength : integer; external name 'length';\r\n    constructor new; overload;\r\n    constructor new(aLength : NativeInt); overload;\r\n    constructor new(aElement1 : JSValue); varargs; overload;\r\n    class function _of() : TJSArray; varargs; external name 'of'; \r\n    class function isArray(a: JSValue) : Boolean;\r\n{$IFDEF JAVASCRIPT2015}    \r\n    class function from(a : JSValue) : TJSArray;\r\n{$ENDIF}    \r\n    function concat(el : JSValue) : TJSArray; varargs;\r\n    function copyWithin(aTarget : NativeInt) : TJSarray;overload; // not in IE\r\n    function copyWithin(aTarget, aStart : NativeInt) : TJSarray;overload; // not in IE\r\n    function copyWithin(aTarget, aStart, aEnd : NativeInt) : TJSarray;overload; // not in IE\r\n    Function every(const aCallback : TJSArrayCallBack) : boolean;overload;\r\n    Function every(const aCallback : TJSArrayEvent; aThis : TObject) : boolean;overload;\r\n    Function filter(const aCallBack : TJSArrayCallBack) : TJSArray; overload;\r\n    Function filter(const aCallBack : TJSArrayEvent; aThis : TObject) : TJSArray;overload;\r\n    Function fill(aValue : JSValue) : TJSArray; overload;\r\n    Function fill(aValue : JSValue; aStartIndex : NativeInt) : TJSArray; overload;\r\n    Function fill(aValue : JSValue; aStartIndex,aEndIndex : NativeInt) : TJSArray; overload;\r\n    Function find(const aCallBack : TJSArrayCallBack) : JSValue; overload;\r\n    Function find(const aCallBack : TJSArrayEvent; aThis : TObject) : JSValue; overload;\r\n    Function findIndex(const aCallBack : TJSArrayCallBack) : NativeInt; overload;\r\n    Function findIndex(const aCallBack : TJSArrayEvent; aThis : TObject) : NativeInt; overload;\r\n    procedure forEach(const aCallBack : TJSArrayEvent); overload;\r\n    procedure forEach(const aCallBack : TJSArrayEvent; aThis : TObject); overload;\r\n    function includes(aElement : JSValue) : Boolean; overload;\r\n    function includes(aElement : JSValue; FromIndex : NativeInt) : Boolean; overload;\r\n    function indexOf(aElement : JSValue) : NativeInt; overload;\r\n    function indexOf(aElement : JSValue; FromIndex : NativeInt) : NativeInt; overload;\r\n    function join : String; overload;\r\n    function join (aSeparator : string) : String; overload;\r\n    function lastIndexOf(aElement : JSValue) : NativeInt; overload;\r\n    function lastIndexOf(aElement : JSValue; FromIndex : NativeInt) : NativeInt; overload;\r\n    Function map(const aCallBack : TJSArrayMapCallBack) : TJSArray; overload;\r\n    Function map(const aCallBack : TJSArrayMapEvent; aThis : TObject) : TJSArray; overload;\r\n    function pop : JSValue; \r\n    function push(aElement : JSValue) : NativeInt; varargs;\r\n    function reduce(const aCallBack : TJSArrayReduceCallBack) : JSValue; overload;\r\n    function reduce(const aCallBack : TJSArrayReduceCallBack; initialValue : JSValue) : JSValue; overload;\r\n    function reduceRight(const aCallBack : TJSArrayReduceCallBack) : JSValue; overload;\r\n    function reduceRight(const aCallBack : TJSArrayReduceCallBack; initialValue : JSValue) : JSValue; overload;\r\n    Function reverse : TJSArray;\r\n    Function shift : JSValue;\r\n    Function slice : TJSArray; overload;\r\n    function slice(aBegin : NativeInt) : TJSArray; overload;\r\n    function slice(aBegin,aEnd : NativeInt) : TJSArray; overload;\r\n    Function some(const aCallback : TJSArrayCallBack) : boolean; overload;\r\n    Function some(const aCallback : TJSArrayEvent; aThis : TObject) : boolean; overload;\r\n    Function sort(const aCallback : TJSArrayCompareCallBack) : TJSArray; overload;\r\n    Function sort() : TJSArray; overload;\r\n    function splice(aStart : NativeInt) : TJSArray; overload;\r\n    function splice(aStart,aDeleteCount : NativeInt) : TJSArray; varargs; overload;\r\n    function toLocaleString: String; overload;\r\n    function toLocaleString(locales : string) : String; overload;\r\n    function toLocaleString(locales : string; const Options : TLocaleCompareOptions) : String; overload;\r\n    function toString : String;\r\n    function unshift : NativeInt; varargs; \r\n    Property Length : Integer Read FLength Write FLength;\r\n    property Elements[Index: NativeInt]: JSValue read GetElements write SetElements; default;\r\n  end;\r\n\r\n  TJSArrayBuffer = Class external name 'ArrayBuffer'\r\n  private\r\n    fLength : NativeInt; external name 'byteLength';\r\n  public\r\n    constructor new(aByteLength : NativeInt);\r\n    class function isView(aValue : JSValue) : Boolean;   \r\n    function slice(aBegin : NativeInt) : TJSArrayBuffer; overload;\r\n    function slice(aBegin,aEnd : NativeInt) : TJSArrayBuffer; overload;\r\n    Property byteLength : NativeInt Read fLength;\r\n  end;\r\n\r\n  TJSBufferSource = class external name 'BufferSource'\r\n  end;\r\n\r\n  { TJSTypedArray }\r\n  TJSTypedArray = Class;\r\n\r\n  TJSTypedArrayCallBack = function (element : JSValue; index: NativeInt; anArray : TJSTypedArray) : Boolean;\r\n  TJSTypedArrayEvent = function (element : JSValue; index: NativeInt; anArray : TJSTypedArray) : Boolean of object;\r\n  TJSTypedArrayMapCallBack = function (element : JSValue; index: NativeInt; anArray : TJSTypedArray) : JSValue;\r\n  TJSTypedArrayMapEvent = function (element : JSValue; index: NativeInt; anArray : TJSTypedArray) : JSValue of object;\r\n  TJSTypedArrayReduceCallBack = function (accumulator, currentValue : JSValue; currentIndex : NativeInt; anArray : TJSTypedArray) : JSValue;\r\n  TJSTypedArrayCompareCallBack = function (a,b : JSValue) : NativeInt;\r\n\r\n  TJSTypedArray = class external name 'TypedArray' (TJSBufferSource)\r\n  Private\r\n    FBuffer: TJSArrayBuffer; external name 'buffer';\r\n    FByteLength: NativeInt; external name 'byteLength';\r\n    FLength: NativeInt; external name 'length';\r\n    FByteOffset: NativeInt; external name 'byteOffset';\r\n    function getValue(Index : NativeInt) : JSValue; external name '[]';\r\n    procedure setValue(Index : NativeInt;AValue : JSValue); external name '[]';\r\n  Public\r\n    class var BYTES_PER_ELEMENT : NativeInt;\r\n    class var name : string;\r\n    class function from(aValue : jsValue) : TJSTypedArray;\r\n    class function from(aValue : jsValue; Map : TJSTypedArrayMapCallBack) : TJSTypedArray;\r\n    class function from(aValue : jsValue; aMap : TJSTypedArrayMapEvent) : TJSTypedArray;\r\n    class function _of(aValue : jsValue) : TJSTypedArray; varargs;\r\n    function copyWithin(aTarget : NativeInt) : TJSTypedArray;overload;\r\n    function copyWithin(aTarget, aStart : NativeInt) : TJSTypedArray;overload;\r\n    function copyWithin(aTarget, aStart, aEnd : NativeInt) : TJSTypedArray;overload;\r\n    Function every(const aCallback : TJSTypedArrayCallBack) : boolean;overload;\r\n    Function every(const aCallback : TJSTypedArrayEvent; aThis : TObject) : boolean;overload;\r\n    Function fill(aValue : JSValue) : TJSTypedArray; overload;\r\n    Function fill(aValue : JSValue; aStartIndex : NativeInt) : TJSTypedArray; overload;\r\n    Function fill(aValue : JSValue; aStartIndex,aEndIndex : NativeInt) : TJSTypedArray; overload;\r\n    Function filter(const aCallBack : TJSTypedArrayCallBack) : TJSTypedArray; overload;\r\n    Function filter(const aCallBack : TJSTypedArrayEvent; aThis : TObject) : TJSTypedArray;overload;\r\n    Function find(const aCallBack : TJSTypedArrayCallBack) : JSValue; overload;\r\n    Function find(const aCallBack : TJSTypedArrayEvent; aThis : TObject) : JSValue; overload;\r\n    Function findIndex(const aCallBack : TJSTypedArrayCallBack) : NativeInt; overload;\r\n    Function findIndex(const aCallBack : TJSTypedArrayEvent; aThis : TObject) : NativeInt; overload;\r\n    procedure forEach(const aCallBack : TJSTypedArrayCallBack); overload;\r\n    procedure forEach(const aCallBack : TJSTypedArrayEvent; aThis : TObject); overload;\r\n    function includes(aElement : JSValue) : Boolean; overload;\r\n    function includes(aElement : JSValue; FromIndex : NativeInt) : Boolean; overload;\r\n    function indexOf(aElement : JSValue) : NativeInt; overload;\r\n    function indexOf(aElement : JSValue; FromIndex : NativeInt) : NativeInt; overload;\r\n    function join : String; overload;\r\n    function join (aSeparator : string) : String; overload;\r\n    function lastIndexOf(aElement : JSValue) : NativeInt; overload;\r\n    function lastIndexOf(aElement : JSValue; FromIndex : NativeInt) : NativeInt; overload;\r\n    Function map(const aCallBack : TJSTypedArrayCallBack) : TJSTypedArray; overload;\r\n    Function map(const aCallBack : TJSTypedArrayEvent; aThis : TObject) : TJSTypedArray; overload;\r\n    function reduce(const aCallBack : TJSTypedArrayReduceCallBack) : JSValue; overload;\r\n    function reduce(const aCallBack : TJSTypedArrayReduceCallBack; initialValue : JSValue) : JSValue; overload;\r\n    function reduceRight(const aCallBack : TJSTypedArrayReduceCallBack) : JSValue; overload;\r\n    function reduceRight(const aCallBack : TJSTypedArrayReduceCallBack; initialValue : JSValue) : JSValue; overload;\r\n    Function reverse : TJSTypedArray;\r\n    procedure _set(anArray : TJSTypedArray);\r\n    procedure _set(anArray : TJSTypedArray; anOffset : NativeInt);\r\n    Function slice : TJSTypedArray; overload;\r\n    function slice(aBegin : NativeInt) : TJSTypedArray; overload;\r\n    function slice(aBegin,aEnd : NativeInt) : TJSTypedArray; overload;\r\n    Function some(const aCallback : TJSTypedArrayCallBack) : boolean; overload;\r\n    Function some(const aCallback : TJSTypedArrayEvent; aThis : TObject) : boolean; overload;\r\n    Function sort(const aCallback : TJSTypedArrayCompareCallBack) : TJSTypedArray; overload;\r\n    Function sort() : TJSTypedArray; overload;\r\n    function splice(aStart : NativeInt) : TJSTypedArray; overload;\r\n    function splice(aStart,aDeleteCount : NativeInt) : TJSTypedArray; varargs; overload;\r\n    function toLocaleString: String; overload;\r\n    function toLocaleString(locales : string) : String; overload;\r\n    function toLocaleString(locales : string; const Options : TLocaleCompareOptions) : String; overload;\r\n    function toString : String;\r\n    function unshift : NativeInt; varargs;\r\n    property buffer : TJSArrayBuffer read FBuffer;\r\n    property byteLength : NativeInt Read FByteLength;\r\n    property byteOffset : NativeInt Read FByteOffset;\r\n    property length : NativeInt Read FLength;\r\n    Property values[Index : NativeInt] : JSValue Read getValue Write SetValue; default;\r\n  end;\r\n\r\n  { TJSInt8Array }\r\n\r\n  TJSInt8Array = class external name 'Int8Array' (TJSTypedArray)\r\n  private\r\n    function getTypedValue(Index : Integer): Shortint; external name '[]';\r\n    procedure setTypedValue(Index : Integer; AValue: Shortint);external name '[]';\r\n  public\r\n    Property values[Index : Integer] : Shortint Read getTypedValue Write setTypedValue; default;\r\n  end;\r\n\r\n  TJSUint8Array  = class external name 'UInt8Array' (TJSTypedArray)\r\n  private\r\n    function getTypedValue(Index : Integer): Byte; external name '[]';\r\n    procedure setTypedValue(Index : Integer; AValue: Byte);external name '[]';\r\n  public\r\n    Property values[Index : Integer] : Byte Read getTypedValue Write setTypedValue; default;\r\n  end;\r\n\r\n  TJSUint8ClampedArray  = class external name 'UInt8ClampedArray' (TJSTypedArray)\r\n  private\r\n    function getTypedValue(Index : Integer): Byte; external name '[]';\r\n    procedure setTypedValue(Index : Integer; AValue: Byte);external name '[]';\r\n  public\r\n    Property values[Index : Integer] : Byte Read getTypedValue Write setTypedValue; default;\r\n  end;\r\n\r\n  TJSInt16Array = class external name 'Int16Array' (TJSTypedArray)\r\n  private\r\n    function getTypedValue(Index : Integer): smallint; external name '[]';\r\n    procedure setTypedValue(Index : Integer; AValue: Smallint);external name '[]';\r\n  public\r\n    Property values[Index : Integer] : SmallInt Read getTypedValue Write setTypedValue; default;\r\n  end;\r\n\r\n  TJSUint16Array = class external name 'UInt16Array' (TJSTypedArray)\r\n  private\r\n    function getTypedValue(Index : Integer): Word; external name '[]';\r\n    procedure setTypedValue(Index : Integer; AValue: Word);external name '[]';\r\n  public\r\n    Property values[Index : Integer] : Word Read getTypedValue Write setTypedValue; default;\r\n  end;\r\n\r\n  TJSInt32Array = class external name 'Int32Array' (TJSTypedArray)\r\n  private\r\n    function getTypedValue(Index : Integer): longint; external name '[]';\r\n    procedure setTypedValue(Index : Integer; AValue: longint);external name '[]';\r\n  public\r\n    Property values[Index : Integer] : longint Read getTypedValue Write setTypedValue; default;\r\n  end;\r\n\r\n  TJSUint32Array = class external name 'UInt32Array' (TJSTypedArray)\r\n  private\r\n    function getTypedValue(Index : Integer): LongWord; external name '[]';\r\n    procedure setTypedValue(Index : Integer; AValue: LongWord);external name '[]';\r\n  public\r\n    Property values[Index : Integer] : LongWord Read getTypedValue Write setTypedValue; default;\r\n  end;\r\n\r\n  TJSFloat32Array = class external name 'Float32Array' (TJSTypedArray)\r\n  private\r\n    function getTypedValue(Index : Integer): Float32; external name '[]';\r\n    procedure setTypedValue(Index : Integer; AValue: Float32);external name '[]';\r\n  public\r\n    Property values[Index : Integer] : Float32 Read getTypedValue Write setTypedValue; default;\r\n  end;\r\n\r\n  TJSFloat64Array = class external name 'Float64Array' (TJSTypedArray)\r\n  private\r\n    function getTypedValue(Index : Integer): Float64; external name '[]';\r\n    procedure setTypedValue(Index : Integer; AValue: Float64);external name '[]';\r\n  public\r\n    Property values[Index : Integer] : Float64 Read getTypedValue Write setTypedValue; default;\r\n  end;\r\n\r\n  TJSDataView = Class external name 'DataView' (TJSBufferSource)\r\n  private\r\n    fBuffer : TJSArrayBuffer; external name 'buffer';\r\n    fLength : NativeInt; external name 'byteLength';\r\n    fOffset : NativeInt; external name 'byteOffset';\r\n\r\n  public\r\n    constructor new(aBuffer : TJSArrayBuffer); overload;\r\n    constructor new(aBuffer : TJSArrayBuffer; aOffset : NativeInt); overload;\r\n    constructor new(aBuffer : TJSArrayBuffer; aOffset,aByteLength : NativeInt); overload;\r\n    function getFloat32(aByteOffset : NativeInt) : double; overload;\r\n    function getFloat32(aByteOffset : NativeInt; aLittleEndian: Boolean) : double; overload;\r\n    function getFloat64(aByteOffset : NativeInt) : double; overload;\r\n    function getFloat64(aByteOffset : NativeInt; aLittleEndian: Boolean) : double; overload;\r\n    function getInt8(aByteOffset : NativeInt) : ShortInt; \r\n    function getInt16(aByteOffset : NativeInt) : SmallInt; overload;\r\n    function getInt16(aByteOffset : NativeInt; aLittleEndian : Boolean) : SmallInt; overload;\r\n    function getInt32(aByteOffset : NativeInt) : Longint; overload;\r\n    function getInt32(aByteOffset : NativeInt; aLittleEndian : Boolean) : Longint; overload;\r\n    function getUint8(aByteOffset : NativeInt) : Byte; overload;\r\n    function getUint16(aByteOffset : NativeInt) : Word; overload;\r\n    function getUint16(aByteOffset : NativeInt; aLittleEndian : Boolean) : Word; overload;\r\n    function getUint32(aByteOffset : NativeInt) : LongWord; overload;\r\n    function getUint32(aByteOffset : NativeInt; aLittleEndian : Boolean) : LongWord; overload;\r\n\r\n    procedure setFloat32(aByteOffset : NativeInt; aValue : double); overload;\r\n    procedure setFloat32(aByteOffset : NativeInt; aValue : double; aLittleEndian: Boolean); overload;\r\n    procedure setFloat64(aByteOffset : NativeInt; aValue : double); overload;\r\n    procedure setFloat64(aByteOffset : NativeInt; aValue : double; aLittleEndian: Boolean); overload;\r\n    procedure setInt8(aByteOffset : NativeInt; aValue : ShortInt); \r\n    procedure setInt16(aByteOffset : NativeInt; aValue : SmallInt); overload;\r\n    procedure setInt16(aByteOffset : NativeInt; aValue : SmallInt; aLittleEndian : Boolean); overload;\r\n    procedure setInt32(aByteOffset : NativeInt; aValue : Longint); overload;\r\n    procedure setInt32(aByteOffset : NativeInt; aValue : Longint; aLittleEndian : Boolean); overload;\r\n    procedure setUint8(aByteOffset : NativeInt; aValue : Byte); overload;\r\n    procedure setUint16(aByteOffset : NativeInt; aValue : Word); overload;\r\n    procedure setUint16(aByteOffset : NativeInt; aValue : Word; aLittleEndian : Boolean); overload;\r\n    procedure setUint32(aByteOffset : NativeInt; aValue : LongWord); overload;\r\n    procedure setUint32(aByteOffset : NativeInt; aValue: LongWord; aLittleEndian : Boolean); overload;\r\n \r\n    Property byteLength : NativeInt Read fLength;\r\n    Property byteOffset : NativeInt read fOffset;\r\n    property buffer : TJSArrayBuffer Read fBuffer;\r\n  end;\r\n\r\n  TJSJSON = class external name 'JSON' (TJSObject)\r\n  Public\r\n    class function parse(aJSON : String) : JSValue;\r\n    // Use this only when you are sure you will get an object, no checking is done.\r\n    class function parseObject(aJSON : String) : TJSObject; external name 'parse';\r\n    class function stringify(aValue : JSValue) : string;\r\n    class function stringify(aValue,aReplacer : JSValue) : string;\r\n    class function stringify(aValue,aReplacer : JSValue; space:  NativeInt) : string;\r\n    class function stringify(aValue,aReplacer : JSValue; space:  String) : string;\r\n  end;\r\n\r\n  { TJSError }\r\n\r\n  TJSError = CLass external name 'Error'\r\n  private\r\n    FMessage: String; external name 'message';\r\n  Public\r\n    Constructor new;\r\n    Constructor new(Const aMessage : string);\r\n    Constructor new(Const aMessage,aFileName : string);\r\n    Constructor new(Const aMessage,aFileName : string; aLineNumber : NativeInt);\r\n    Property Message : String Read FMessage;\r\n  end;\r\n\r\n\r\n  TJSPromiseResolver = reference to function (aValue : JSValue) : JSValue;\r\n  TJSPromiseExecutor = reference to procedure (resolve,reject : TJSPromiseResolver);\r\n  TJSPromiseFinallyHandler = reference to procedure;\r\n  TJSPromise = Class;\r\n  TJSPromiseArray = array of TJSPromise;\r\n\r\n  TJSPromise = class external name 'Promise'\r\n    constructor new(Executor : TJSPromiseExecutor);\r\n    class function all(arg : Array of JSValue) : TJSPromise; overload;\r\n    class function all(arg : JSValue) : TJSPromise; overload;\r\n    class function all(arg : TJSPromiseArray) : TJSPromise; overload;\r\n    class function race(arg : Array of JSValue) : TJSPromise; overload;\r\n    class function race(arg : JSValue) : TJSPromise; overload;\r\n    class function race(arg : TJSPromiseArray) : TJSPromise; overload;\r\n    class function reject(reason : JSValue) : TJSPromise;\r\n    class function resolve(value : JSValue): TJSPromise; overload;\r\n    class function resolve : TJSPromise; overload;\r\n    function _then (onAccepted : TJSPromiseResolver) : TJSPromise; external name 'then';\r\n    function catch (onRejected : TJSPromiseResolver) : TJSPromise;\r\n    function _finally(value : TJSPromiseFinallyHandler): TJSPromise;\r\n  end;\r\n\r\n\r\nvar\r\n  // This can be used in procedures/functions to provide access to the 'arguments' array.\r\n  JSArguments: TJSValueDynArray; external name 'arguments';\r\n  // This can be used in all code to access the javascript 'this' object.\r\n  JSThis: TJSObject; external name 'this';\r\n  // This can be used in catch blocks to access the JS throw value\r\n  JSExceptValue: JSValue; external name '$e';\r\n\r\nFunction new(aElements: TJSValueDynArray) : TJSObject; overload;\r\n\r\nfunction decodeURIComponent(encodedURI : String) : String; external name 'decodeURIComponent';\r\nfunction encodeURIComponent(str : String) : String; external name 'encodeURIComponent';\r\n\r\nfunction parseInt(s: String; Radix: NativeInt): NativeInt; overload; external name 'parseInt'; // may result NaN\r\nfunction parseInt(s: String): NativeInt; overload; external name 'parseInt'; // may result NaN\r\nfunction parseFloat(s: String): double; overload; external name 'parseFloat'; // may result NaN\r\n\r\nfunction hasString(const v: JSValue): boolean; external name 'rtl.hasString';// isString(v) and v<>''\r\nfunction hasValue(const v: JSValue): boolean; assembler; // returns the JS definition of if(v): v is not false, undefined, null, 0, NaN, or the empty string. Note: JS if(new Boolean(false)) returns true.\r\nfunction isArray(const v: JSValue): boolean; external name 'rtl.isArray';\r\nfunction isBoolean(const v: JSValue): boolean; assembler;\r\nfunction isCallback(const v: JSValue): boolean; assembler;\r\nfunction isChar(const v: JSValue): boolean; assembler;\r\nfunction isClass(const v: JSValue): boolean; assembler; // is a Pascal class, e.g. a TClass\r\nfunction isClassInstance(const v: JSValue): boolean; assembler;// is a Pascal class instance, e.g. a TObject\r\nfunction isFunction(const v: JSValue): boolean; external name 'rtl.isFunction';\r\nfunction isInteger(const v: JSValue): boolean; assembler;\r\nfunction isModule(const v: JSValue): boolean; external name 'rtl.isModule';\r\nfunction isNull(const v: JSValue): boolean; assembler;\r\nfunction isNumber(const v: JSValue): boolean; external name 'rtl.isNumber';\r\nfunction isObject(const v: JSValue): boolean; external name 'rtl.isObject'; // true if not null and a JS Object\r\nfunction isRecord(const v: JSValue): boolean; assembler;\r\nfunction isString(const v: JSValue): boolean; external name 'rtl.isString';\r\nfunction isUndefined(const v: JSValue): boolean; assembler;\r\nfunction isDefined(const v: JSValue): boolean; assembler;\r\nfunction isUTF16Char(const v: JSValue): boolean; assembler;\r\nfunction isExt(const InstanceOrClass, aClass: JSValue): boolean; external name 'rtl.isExt'; // aClass can be a JS object or function\r\nfunction jsInstanceOf(const aFunction, aFunctionWithPrototype: JSValue): String; assembler;\r\nfunction jsTypeOf(const v: JSValue): String; external name 'typeof';\r\nfunction jsIsNaN(const v: JSValue): boolean; external name 'isNaN';// true if value cannot be converted to a number. e.g. True on NaN, undefined, {}, '123'. False on true, null, '', ' ', '1A'\r\nfunction toNumber(const v: JSValue): double; assembler; // if not possible, returns NaN\r\nfunction toInteger(const v: JSValue): NativeInt; // if v is not an integer, returns 0\r\nfunction toObject(Value: JSValue): TJSObject; // If Value is not a Javascript object, returns Nil\r\nfunction toArray(Value: JSValue): TJSArray; // If Value is not a Javascript array, returns Nil\r\nfunction toBoolean(Value: JSValue): Boolean; // If Value is not a Boolean, returns False\r\nfunction toString(Value: JSValue): String; // If Value is not a string, returns ''\r\n\r\nType\r\n  TJSValueType = (jvtNull,jvtBoolean,jvtInteger,jvtFloat,jvtString,jvtObject,jvtArray);\r\n\r\nFunction GetValueType(JS : JSValue) : TJSValueType;\r\n\r\nVar\r\n  Null : JSValue; external name 'null';\r\n  Undefined : JSValue; external name 'undefined';\r\n\r\nimplementation\r\n\r\nFunction new(aElements: TJSValueDynArray) : TJSObject;\r\n\r\n  function toString(I : Integer): string; external name 'String';\r\n\r\nVar\r\n  L,I : integer;\r\n  S : String;\r\n\r\nbegin\r\n  L:=length(aElements);\r\n  if (L mod 2)=1 then\r\n    raise EJS.Create('Number of arguments must be even');\r\n  I:=0;\r\n  // Check all arguments;\r\n  While (i<L) do\r\n    begin\r\n    if Not isString(aElements[i]) then\r\n      begin\r\n      S:=ToString(I);\r\n      raise EJS.Create('Argument '+S+' must be a string.');\r\n      end;\r\n    inc(I,2);\r\n    end;\r\n  I:=0;\r\n  Result:=TJSObject.New;\r\n  While (i<L) do\r\n    begin\r\n    S:=String(aElements[i]);\r\n    Result.Properties[S]:=aElements[i+1];\r\n    inc(I,2);\r\n    end;\r\nend;\r\n\r\nfunction hasValue(const v: JSValue): boolean; assembler;\r\nasm\r\n  if(v){ return true; } else { return false; };\r\nend;\r\n\r\nfunction isBoolean(const v: JSValue): boolean; assembler;\r\nasm\r\n  return typeof(v) == 'boolean';\r\nend;\r\n\r\nfunction isCallback(const v: JSValue): boolean; assembler;\r\nasm\r\n  return rtl.isObject(v) && rtl.isObject(v.scope) && (rtl.isString(v.fn) || rtl.isFunction(v.fn));\r\nend;\r\n\r\nfunction isChar(const v: JSValue): boolean; assembler;\r\nasm\r\n  return (typeof(v)!=\"string\") && (v.length==1);\r\nend;\r\n\r\nfunction isClass(const v: JSValue): boolean; assembler;\r\nasm\r\n  return (typeof(v)==\"object\") && (v!=null) && (v.$class == v);\r\nend;\r\n\r\nfunction isClassInstance(const v: JSValue): boolean; assembler;\r\nasm\r\n  return (typeof(v)==\"object\") && (v!=null) && (v.$class == Object.getPrototypeOf(v));\r\nend;\r\n\r\nfunction isInteger(const v: JSValue): boolean; assembler;\r\nasm\r\n  return Math.floor(v)===v;\r\nend;\r\n\r\nfunction isNull(const v: JSValue): boolean; assembler;\r\n// Note: use identity, \"==\" would fit undefined\r\nasm\r\n  return v === null;\r\nend;\r\n\r\nfunction isRecord(const v: JSValue): boolean; assembler;\r\nasm\r\n  return (typeof(v)==\"function\") && (typeof(v.$create) == \"function\");\r\nend;\r\n\r\nfunction isUndefined(const v: JSValue): boolean; assembler;\r\nasm\r\n  return v == undefined;\r\nend;\r\n\r\nfunction isDefined(const v: JSValue): boolean; assembler;\r\nasm\r\n  return !(v == undefined);\r\nend;\r\n\r\nfunction isUTF16Char(const v: JSValue): boolean; assembler;\r\nasm\r\n  if (typeof(v)!=\"string\") return false;\r\n  if ((v.length==0) || (v.length>2)) return false;\r\n  var code = v.charCodeAt(0);\r\n  if (code < 0xD800){\r\n    if (v.length == 1) return true;\r\n  } else if (code <= 0xDBFF){\r\n    if (v.length==2){\r\n      code = v.charCodeAt(1);\r\n      if (code >= 0xDC00 && code <= 0xDFFF) return true;\r\n    };\r\n  };\r\n  return false;\r\nend;\r\n\r\nfunction jsInstanceOf(const aFunction, aFunctionWithPrototype: JSValue\r\n  ): String; assembler;\r\nasm\r\n  return aFunction instanceof aFunctionWithPrototype;\r\nend;\r\n\r\nfunction toNumber(const v: JSValue): double; assembler;\r\nasm\r\n  return v-0;\r\nend;\r\n\r\nfunction toInteger(const v: JSValue): NativeInt;\r\nbegin\r\n  if IsInteger(v) then\r\n    Result:=NativeInt(v)\r\n  else\r\n    Result:=0;\r\nend;\r\n\r\nfunction toObject(Value: JSValue): TJSObject;\r\n\r\nbegin\r\n  if IsObject(Value) then\r\n    Result:=TJSObject(Value)\r\n  else\r\n    Result:=Nil;\r\nend;\r\n\r\nfunction toArray(Value: JSValue): TJSArray; // If not possible, returns Nil\r\n\r\nbegin\r\n  if IsArray(Value) then\r\n    Result:=TJSArray(Value)\r\n  else\r\n    Result:=Nil;\r\nend;\r\n\r\nfunction toBoolean(Value: JSValue): Boolean; // If not possible, returns False\r\n\r\nbegin\r\n  if isBoolean(Value) then\r\n    Result:=Boolean(Value)\r\n  else\r\n    Result:=False;\r\nend;\r\n\r\nfunction toString(Value: JSValue): String; // If not possible, returns ''\r\n\r\nbegin\r\n  if IsString(Value) then\r\n    Result:=String(Value)\r\n  else\r\n    Result:='';\r\nend;\r\n\r\n{ EJS }\r\n\r\nconstructor EJS.Create(const Msg: String);\r\nbegin\r\n  FMessage:=Msg;\r\nend;\r\n\r\n\r\nFunction GetValueType(JS : JSValue) : TJSValueType;\r\n\r\nVar\r\n  t : string;\r\n\r\nbegin\r\n  if isNull(js) then   // null reported as object\r\n    result:=jvtNull\r\n  else\r\n    begin\r\n    t:=jsTypeOf(js);\r\n    if (t='string') then\r\n      Result:=jvtString\r\n    else if (t='boolean') then\r\n      Result:=jvtBoolean\r\n    else if (t='object') then\r\n      begin\r\n      if IsArray(JS) then\r\n        Result:=jvtArray\r\n      else\r\n        Result:=jvtObject;\r\n      end\r\n    else if (t='number') then\r\n      if isInteger(JS) then\r\n        result:=jvtInteger\r\n      else\r\n        result:=jvtFloat\r\n    end;\r\nend;\r\n\r\nend.\r\n\r\n","{\r\n    This file is part of the Pas2JS run time library.\r\n    Copyright (c) 2017 by Mattias Gaertner\r\n\r\n    See the file COPYING.FPC, included in this distribution,\r\n    for details about the copyright.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n **********************************************************************}\r\nunit RTLConsts;\r\n\r\ninterface\r\n\r\nconst\r\n  SArgumentMissing              = 'Missing argument in format \"%s\"';\r\n  SInvalidFormat                = 'Invalid format specifier : \"%s\"';\r\n  SInvalidArgIndex              = 'Invalid argument index in format: \"%s\"';\r\n  SListCapacityError            = 'List capacity (%s) exceeded.';\r\n  SListCountError               = 'List count (%s) out of bounds.';\r\n  SListIndexError               = 'List index (%s) out of bounds';\r\n  SSortedListError              = 'Operation not allowed on sorted list';\r\n  SDuplicateString              = 'String list does not allow duplicates';  \r\n  SErrFindNeedsSortedList       = 'Cannot use find on unsorted list';\r\n\r\n  SInvalidName                  = 'Invalid component name: \"%s\"';\r\n  SInvalidBoolean               = '\"%s\" is not a valid boolean.';\r\n  SDuplicateName                = 'Duplicate component name: \"%s\"';\r\n\r\n  SErrInvalidDate               = 'Invalid date: \"%s\"';\r\n  SErrInvalidTimeFormat         = 'Invalid time format: \"%s\"';\r\n  SInvalidDateFormat            = 'Invalid date format: \"%s\"';\r\n\r\n  SCantReadPropertyS            = 'Cannot read property \"%s\"';\r\n  SCantWritePropertyS           = 'Cannot write property \"%s\"';\r\n  SErrPropertyNotFound          = 'Unknown property: \"%s\"';\r\n  SIndexedPropertyNeedsParams   = 'Indexed property \"%s\" needs parameters';\r\n\r\n  SErrInvalidInteger            = 'Invalid integer value: \"%s\"';\r\n  SErrInvalidFloat              = 'Invalid floating-point value: \"%s\"';\r\n  SInvalidDateTime              = 'Invalid date-time value: %s';\r\n  SInvalidCurrency              = 'Invalid currency value: %s';\r\n  SErrInvalidDayOfWeek          = '%d is not a valid day of the week';\r\n  SErrInvalidTimeStamp          = 'Invalid date/timestamp : \"%s\"';\r\n  SErrInvalidDateWeek           = '%d %d %d is not a valid dateweek';\r\n  SErrInvalidDayOfYear          = 'Year %d does not have a day number %d';\r\n  SErrInvalidDateMonthWeek      = 'Year %d, month %d, Week %d and day %d is not a valid date.';\r\n  SErrInvalidDayOfWeekInMonth   = 'Year %d Month %d NDow %d DOW %d is not a valid date';\r\n  SInvalidJulianDate            = '%f Julian cannot be represented as a DateTime';\r\n  SErrInvalidHourMinuteSecMsec  = '%d:%d:%d.%d is not a valid time specification';\r\n\r\n  SInvalidGUID                  = '\"%s\" is not a valid GUID value';\r\n\r\nimplementation\r\n\r\nend.\r\n\r\n","{\r\n    This file is part of the Pas2JS run time library.\r\n    Copyright (c) 2017 by Mattias Gaertner\r\n\r\n    See the file COPYING.FPC, included in this distribution,\r\n    for details about the copyright.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n **********************************************************************}\r\nunit SysUtils;\r\n\r\n{$mode objfpc}\r\n\r\ninterface\r\n\r\nuses\r\n  RTLConsts, js;\r\n\r\nprocedure FreeAndNil(var Obj);\r\n\r\ntype\r\n  TProcedure = procedure;\r\n\r\n {*****************************************************************************\r\n                              Various types\r\n  *****************************************************************************}\r\n\r\ntype\r\n  { TFloatRec }\r\n  TFloatRec = Record\r\n     Exponent: Integer;\r\n     Negative: Boolean;\r\n     Digits: Array Of Char;\r\n  End;\r\n  TEndian = (Little,Big);\r\n  TFileName = String;\r\n  TByteArray = array [0..32767] of Byte;\r\n  TWordArray = array [0..16383] of Word;\r\n  TBytes = Array of byte;\r\n  TStringArray = array of string;\r\n\r\n  TMonthNameArray = array [1..12] of string;\r\n  TDayTable = array [1..12] of Word;\r\n  TWeekNameArray = array [1..7] of string;\r\n  TMonthNames = TMonthNameArray;\r\n  TDayNames = array[0..6] of string;\r\n\r\n{*****************************************************************************\r\n                            Exception handling\r\n*****************************************************************************}\r\n\r\n  { Exception }\r\n\r\n  Exception = class(TObject)\r\n  private\r\n    fMessage: String;\r\n    fHelpContext: Integer;\r\n  public\r\n    constructor Create(const Msg: String); reintroduce;\r\n    constructor CreateFmt(const Msg: string; const Args: array of jsvalue);\r\n    constructor CreateHelp(const Msg: String; AHelpContext: Integer);\r\n    constructor CreateFmtHelp(const Msg: string; const Args: array of jsvalue; AHelpContext: Integer);\r\n    function ToString: String; override;\r\n    property HelpContext: Integer read fHelpContext write fHelpContext;\r\n    property Message: String read fMessage write fMessage;\r\n  end;\r\n\r\n  ExceptClass = class of Exception;\r\n\r\n  EExternal = class(Exception);\r\n\r\n  { General math errors }\r\n  EMathError  = class(EExternal);\r\n  EInvalidOp  = class(EMathError);\r\n  EZeroDivide = class(EMathError);\r\n  EOverflow   = class(EMathError);\r\n  EUnderflow  = class(EMathError);\r\n\r\n  EAbort           = class(Exception);\r\n  EInvalidCast     = class(Exception);\r\n  EAssertionFailed = class(Exception);\r\n  EObjectCheck     = class(Exception);\r\n\r\n  { String conversion errors }\r\n  EConvertError = class(Exception);\r\n  EFormatError = class(Exception);\r\n\r\n\r\n  { integer math exceptions }\r\n  EIntError    = Class(EExternal);\r\n  EDivByZero   = Class(EIntError);\r\n  ERangeError  = Class(EIntError);\r\n  EIntOverflow = Class(EIntError);\r\n\r\n  { General math errors }\r\n\r\n  { Run-time and I/O Errors }\r\n  EInOutError = class(Exception)\r\n  public\r\n    ErrorCode : Integer;\r\n  end;\r\n\r\n  EHeapMemoryError = class(Exception);\r\n  EHeapException = EHeapMemoryError;\r\n\r\n  EExternalException = class(EExternal);\r\n  EInvalidPointer  = Class(EHeapMemoryError);\r\n  EOutOfMemory     = Class(EHeapMemoryError);\r\n\r\n  { EVariantError }\r\n\r\n  EVariantError = Class(Exception)\r\n    ErrCode : longint;\r\n    Constructor CreateCode(Code : Longint);\r\n  end;\r\n\r\n  EAccessViolation = Class(EExternal);\r\n  EBusError = Class(EAccessViolation);\r\n  EPrivilege = class(EExternal);\r\n  EStackOverflow = class(EExternal);\r\n  EControlC = class(EExternal);\r\n\r\n  { String conversion errors }\r\n\r\n  { Other errors }\r\n  EAbstractError   = Class(Exception);\r\n\r\n  EPropReadOnly = class(Exception);\r\n  EPropWriteOnly = class(Exception);\r\n\r\n  EIntfCastError = class(Exception);\r\n  EInvalidContainer = class(Exception);\r\n  EInvalidInsert = class(Exception);\r\n\r\n  EPackageError = class(Exception);\r\n\r\n  EOSError = class(Exception)\r\n  public\r\n    ErrorCode: Longint;\r\n  end;\r\n\r\n  ESafecallException = class(Exception);\r\n  ENoThreadSupport = Class(Exception);\r\n  ENoWideStringSupport = Class(Exception);\r\n  ENotImplemented = class(Exception);\r\n\r\n  EArgumentException = class(Exception);\r\n  EArgumentOutOfRangeException = class(EArgumentException);\r\n  EArgumentNilException = class(EArgumentException);\r\n\r\n  EPathTooLongException = class(Exception);\r\n  ENotSupportedException = class(Exception);\r\n  EDirectoryNotFoundException = class(Exception);\r\n  EFileNotFoundException = class(Exception);\r\n  EPathNotFoundException = class(Exception);\r\n\r\n  ENoConstructException = class(Exception);\r\n\r\n\r\n//function GetTickCount: Integer;\r\n\r\n\r\n{*****************************************************************************\r\n                            String function\r\n*****************************************************************************}\r\n\r\nConst\r\n   EmptyStr = '';\r\n   EmptyWideStr = ''; // No difference here.\r\n   HexDisplayPrefix: string = '$';\r\n   LeadBytes = [] unimplemented;\r\n\r\nFunction CharInSet(Ch: Char;Const CSet : array of char) : Boolean;\r\n\r\nfunction LeftStr(const S: string; Count: Integer): String; assembler;\r\nfunction RightStr(const S: string; Count: Integer): String; assembler;\r\n\r\nfunction Trim(const S: String): String; assembler;\r\nfunction TrimLeft(const S: String): String; assembler;\r\nfunction TrimRight(const S: String): String; assembler;\r\n\r\nfunction UpperCase(const s: String): String; assembler; overload;\r\nfunction LowerCase(const s: String): String; assembler; overload;\r\n\r\nfunction CompareStr(const s1, s2: String): Integer; assembler;\r\nfunction SameStr(const s1, s2: String): Boolean; assembler;\r\nfunction CompareText(const s1, s2: String): Integer; assembler;\r\nfunction SameText(const s1, s2: String): Boolean; assembler;\r\nfunction AnsiCompareText(const s1, s2: String): Integer; assembler;\r\nfunction AnsiSameText(const s1, s2: String): Boolean; assembler;\r\nfunction AnsiCompareStr(const s1, s2: String): Integer;\r\nprocedure AppendStr(var Dest: String; const S: string);\r\n\r\nfunction Format(const Fmt: String; const Args: array of JSValue): String;\r\n\r\n// JavaScript built-in functions\r\nfunction LocaleCompare(const s1, s2, locales: String): Boolean; assembler; overload;\r\nfunction NormalizeStr(const S: String; const Norm: String = 'NFC'): String; assembler; overload; // not in IE\r\n\r\nfunction IsValidIdent(const Ident: string; AllowDots: Boolean = False; StrictDots: Boolean = False): Boolean;\r\n\r\nType\r\n  TStringReplaceFlag = (rfReplaceAll, rfIgnoreCase);\r\n  TReplaceFlag = TStringReplaceFlag;\r\n  TStringReplaceFlags = set of TStringReplaceFlag;\r\n  TReplaceFlags = TStringReplaceFlags;\r\n\r\nfunction StringReplace(aOriginal, aSearch, aReplace : string; Flags : TStringReplaceFlags) : String;\r\nfunction QuoteString(aOriginal : String; AQuote : Char) : String;\r\nfunction IsDelimiter(const Delimiters, S: string; Index: Integer): Boolean;\r\nfunction AdjustLineBreaks(const S: string): string;\r\nfunction AdjustLineBreaks(const S: string; Style: TTextLineBreakStyle): string;\r\nfunction WrapText(const Line, BreakStr: string; const BreakChars: Array of char;  MaxCol: Integer): string;\r\nfunction WrapText(const Line: string; MaxCol: Integer): string;\r\n\r\n{ *****************************************************************************\r\n  Integer conversions\r\n  *****************************************************************************}\r\n\r\nfunction IntToStr(const Value: Integer): string;\r\nFunction TryStrToInt(const S : String; Out res : Integer) : Boolean;\r\nFunction TryStrToInt(const S : String; Out res : NativeInt) : Boolean;\r\nFunction StrToIntDef(const S : String; Const aDef : Integer) : Integer;\r\nFunction StrToIntDef(const S : String; Const aDef : NativeInt) : NativeInt;\r\nFunction StrToInt(const S : String) : Integer;\r\nFunction StrToNativeInt(const S : String) : NativeInt;\r\n// For compatibility\r\nFunction StrToInt64(const S : String) : NativeLargeInt;\r\nFunction StrToInt64Def(const S : String; ADefault : NativeLargeInt) : NativeLargeInt;\r\nFunction TryStrToInt64(const S : String; Out res : NativeLargeInt) : Boolean;\r\nFunction StrToQWord(const S : String) : NativeLargeUInt;\r\nFunction StrToQWordDef(const S : String; ADefault : NativeLargeUInt) : NativeLargeUInt;\r\nFunction TryStrToQWord(const S : String; Out res : NativeLargeUInt) : Boolean;\r\nFunction StrToUInt64(const S : String) : NativeLargeUInt;\r\nFunction StrToUInt64Def(const S : String; ADefault : NativeLargeUInt) : NativeLargeUInt;\r\nFunction TryStrToUInt64(const S : String; Out res : NativeLargeUInt) : Boolean;\r\nFunction StrToDWord(const S : String) : DWord;\r\nFunction StrToDWordDef(const S : String; ADefault : DWord) : DWord;\r\nFunction TryStrToDWord(const S : String; Out res : DWord) : Boolean;\r\n\r\nfunction IntToHex(Value: NativeInt; Digits: integer): string;\r\n\r\n{ *****************************************************************************\r\n  Float conversions\r\n  *****************************************************************************}\r\n\r\nconst\r\n  // Note: Currency is internally a double, multiplied by 10000 and truncated.\r\n  // The below values are the safe limits, within every step exists.\r\n  // Since currency is a double it can take much larger values, but the result\r\n  // may differ from Delphi/FPC\r\n  MaxCurrency: Currency =  450359962737.0495; // fpc: 922337203685477.5807;\r\n  MinCurrency: Currency = -450359962737.0496; // fpc: -922337203685477.5808;\r\n\r\nType\r\n  TFloatFormat = (ffFixed,ffGeneral,ffExponent,ffNumber,ffCurrency);\r\n\r\nFunction FloatToDecimal(Value : double; Precision, Decimals : integer) :  TFloatRec;\r\nFunction FloatToStr(Value: Double): String;\r\nFunction FloatToStrF(const Value : double; format: TFloatFormat; Precision, Digits: Integer): String;\r\nFunction TryStrToFloat(const S : String; Out res : Double) : Boolean;\r\nFunction StrToFloatDef(const S : String; Const aDef : Double) : Double;\r\nFunction StrToFloat(const S : String) : Double;\r\nFunction FormatFloat (Fmt : String; aValue : Double) : String;\r\n\r\n{ *****************************************************************************\r\n  Boolean conversions\r\n  *****************************************************************************}\r\n\r\nVar\r\n  TrueBoolStrs, FalseBoolStrs : Array of String;\r\n\r\nfunction StrToBool(const S: String): Boolean;\r\nfunction BoolToStr(B: Boolean; UseBoolStrs:Boolean=False): string;\r\nfunction BoolToStr(B: Boolean; const TrueS, FalseS: String): string;\r\nfunction StrToBoolDef(const S: String; Default: Boolean): Boolean;\r\nfunction TryStrToBool(const S: String; out Value: Boolean): Boolean;\r\n\r\n\r\n{*****************************************************************************\r\n                              OS/Environment\r\n*****************************************************************************}\r\n\r\nConst\r\n  ConfigExtension : String = '.cfg';\r\n  SysConfigDir    : String = '';\r\n\r\ntype\r\n  TOnGetEnvironmentVariable = function(Const EnvVar: String): String;\r\n  TOnGetEnvironmentString = function(Index: Integer): String;\r\n  TOnGetEnvironmentVariableCount = function: Integer;\r\nvar\r\n  OnGetEnvironmentVariable: TOnGetEnvironmentVariable;\r\n  OnGetEnvironmentString: TOnGetEnvironmentString;\r\n  OnGetEnvironmentVariableCount: TOnGetEnvironmentVariableCount;\r\n\r\nfunction GetEnvironmentVariable(Const EnvVar: String): String;\r\nfunction GetEnvironmentVariableCount: Integer;\r\nfunction GetEnvironmentString(Index: Integer): String;\r\n\r\nprocedure ShowException(ExceptObject: TObject; ExceptAddr: Pointer);\r\nProcedure Abort;\r\n\r\n{*****************************************************************************\r\n                               Events\r\n*****************************************************************************}\r\nType\r\n  TEventType = (etCustom,etInfo,etWarning,etError,etDebug);\r\n  TEventTypes = Set of TEventType;\r\n\r\n{*****************************************************************************\r\n                            Date and time\r\n*****************************************************************************}\r\nType\r\n  \r\n  TDateTime = double;\r\n  \r\n  TTime = TDateTime;\r\n  TDate = TDateTime;\r\n  \r\n  TSystemTime = record\r\n     Year, Month, Day, DayOfWeek: word;\r\n     Hour, Minute, Second, MilliSecond: word;\r\n  end ;\r\n  TTimeStamp = record\r\n     Time: longint;   { Number of milliseconds since midnight }\r\n     Date: longint;   { One plus number of days since 1/1/0001 }\r\n  end ;\r\n\r\n\r\nVar\r\n  TimeSeparator : char = ':';\r\n  DateSeparator : char = '-';\r\n  ShortDateFormat : string = 'yyyy-mm-dd';\r\n  LongDateFormat : string = 'ddd, yyyy-mm-dd';\r\n  ShortTimeFormat : string = 'hh:nn';\r\n  LongTimeFormat : string = 'hh:nn:ss';\r\n  DecimalSeparator : string = '.';\r\n  ThousandSeparator : string;\r\n  TimeAMString : string = 'AM';\r\n  TimePMString : string = 'PM';\r\n\r\nconst\r\n\r\n  HoursPerDay = 24;\r\n  MinsPerHour = 60;\r\n  SecsPerMin  = 60;\r\n  MSecsPerSec = 1000;\r\n  MinsPerDay  = HoursPerDay * MinsPerHour;\r\n  SecsPerDay  = MinsPerDay * SecsPerMin;\r\n  MSecsPerDay = SecsPerDay * MSecsPerSec;\r\n  MaxDateTime: TDateTime =  2958465.99999999;\r\n  MinDateTime: TDateTime =  -693593.99999999;\r\n\r\n  JulianEpoch = TDateTime(-2415018.5);\r\n  UnixEpoch = JulianEpoch + TDateTime(2440587.5);\r\n\r\n  DateDelta = 693594;        // Days between 1/1/0001 and 12/31/1899\r\n  UnixDateDelta = 25569;\r\n\r\n  { True=Leapyear }\r\n\r\nVar\r\n  MonthDays : array [Boolean] of TDayTable =\r\n    ((31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31),\r\n     (31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31));\r\n  ShortMonthNames : TMonthNames = (\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec');\r\n  LongMonthNames : TMonthNames = (\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December');\r\n  ShortDayNames : TDayNames = (\r\n    'Sun',\r\n    'Mon',\r\n    'Tue',\r\n    'Wed',\r\n    'Thu',\r\n    'Fri',\r\n    'Sat');\r\n\r\n  LongDayNames : TDayNames = (\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday');\r\n\r\ntype\r\n  // Stub, for easier porting of FPC/Delphi code.\r\n  // Reading/Writing the properties will actually set the global variables\r\n\r\n  { TFormatSettings }\r\n\r\n  TFormatSettings = class(TObject)\r\n  private\r\n    function GetCurrencyDecimals: Byte;\r\n    function GetCurrencyFormat: Byte;\r\n    function GetCurrencyString: String;\r\n    function GetDateSeparator: char;\r\n    function GetDecimalSeparator: string;\r\n    function GetLongDateFormat: string;\r\n    function GetLongDayNames: TDayNames;\r\n    function GetLongMonthNames: TMonthNames;\r\n    function GetLongTimeFormat: string;\r\n    function GetNegCurrFormat: Byte;\r\n    function GetShortDateFormat: string;\r\n    function GetShortDayNames: TDayNames;\r\n    function GetShortMonthNames: TMonthNames;\r\n    function GetShortTimeFormat: string;\r\n    function GetThousandSeparator: string;\r\n    function GetTimeAMString: string;\r\n    function GetTimePMString: string;\r\n    function GetTimeSeparator: char;\r\n    procedure SetCurrencyFormat(AValue: Byte);\r\n    procedure SetCurrencyString(AValue: String);\r\n    procedure SetDateSeparator(const Value: char);\r\n    procedure SetDecimalSeparator(const Value: string);\r\n    procedure SetLongDateFormat(const Value: string);\r\n    procedure SetLongDayNames(AValue: TDayNames);\r\n    procedure SetLongMonthNames(AValue: TMonthNames);\r\n    procedure SetLongTimeFormat(const Value: string);\r\n    procedure SetNegCurrFormat(AValue: Byte);\r\n    procedure SetShortDateFormat(const Value: string);\r\n    procedure SetShortDayNames(AValue: TDayNames);\r\n    procedure SetShortMonthNames(AValue: TMonthNames);\r\n    procedure SetShortTimeFormat(const Value: string);\r\n    procedure SetCurrencyDecimals(AValue: Byte);\r\n    procedure SetThousandSeparator(const Value: string);\r\n    procedure SetTimeAMString(const Value: string);\r\n    procedure SetTimePMString(const Value: string);\r\n    procedure SetTimeSeparator(const Value: char);\r\n  public\r\n    Property ShortMonthNames : TMonthNames Read GetShortMonthNames Write SetShortMonthNames;\r\n    Property LongMonthNames : TMonthNames Read GetLongMonthNames Write SetLongMonthNames;\r\n    Property ShortDayNames : TDayNames Read GetShortDayNames Write SetShortDayNames;\r\n    Property LongDayNames : TDayNames Read GetLongDayNames Write SetLongDayNames;\r\n    property TimeSeparator : char read GetTimeSeparator write SetTimeSeparator;\r\n    property DateSeparator : char read GetDateSeparator write SetDateSeparator;\r\n    property ShortDateFormat : string read GetShortDateFormat write SetShortDateFormat;\r\n    property LongDateFormat : string read GetLongDateFormat write SetLongDateFormat;\r\n    property ShortTimeFormat : string read GetShortTimeFormat write SetShortTimeFormat;\r\n    property LongTimeFormat : string read GetLongTimeFormat write SetLongTimeFormat;\r\n    property DecimalSeparator : string read GetDecimalSeparator write SetDecimalSeparator;\r\n    property ThousandSeparator : string read GetThousandSeparator write SetThousandSeparator;\r\n    property TimeAMString : string read GetTimeAMString write SetTimeAMString;\r\n    property TimePMString : string read GetTimePMString write SetTimePMString;\r\n    Property CurrencyFormat : Byte read GetCurrencyFormat Write SetCurrencyFormat;\r\n    Property NegCurrFormat : Byte read GetNegCurrFormat Write SetNegCurrFormat;\r\n    Property CurrencyDecimals : Byte Read GetCurrencyDecimals Write SetCurrencyDecimals;\r\n    Property CurrencyString : String Read GetCurrencyString Write SetCurrencyString;\r\n  end;\r\n\r\nVar\r\n  FormatSettings: TFormatSettings;\r\n  TwoDigitYearCenturyWindow : word = 50;\r\n                             { Threshold to be subtracted from year before age-detection.}\r\n\r\n\r\nfunction DateTimeToJSDate(aDateTime : TDateTime) : TJSDate;\r\nfunction JSDateToDateTime(aDate : TJSDate) : TDateTime;\r\n\r\nfunction DateTimeToTimeStamp(DateTime: TDateTime): TTimeStamp;\r\nfunction TimeStampToDateTime(const TimeStamp: TTimeStamp): TDateTime;\r\nfunction MSecsToTimeStamp(MSecs: NativeInt): TTimeStamp;\r\nfunction TimeStampToMSecs(const TimeStamp: TTimeStamp): NativeInt;\r\nfunction TryEncodeDate(Year, Month, Day: Word; out Date: TDateTime): Boolean;\r\nfunction TryEncodeTime(Hour, Min, Sec, MSec: Word; out Time: TDateTime): Boolean;\r\nfunction EncodeDate(Year, Month, Day :word): TDateTime;\r\nfunction EncodeTime(Hour, Minute, Second, MilliSecond:word): TDateTime;\r\nfunction ComposeDateTime(Date,Time : TDateTime) : TDateTime;\r\nprocedure DecodeDate(Date: TDateTime; out Year, Month, Day: word);\r\nfunction DecodeDateFully(const DateTime: TDateTime; out Year, Month, Day, DOW: Word): Boolean;\r\nprocedure DecodeTime(Time: TDateTime; out Hour, Minute, Second, MilliSecond: word);\r\nprocedure DateTimeToSystemTime(DateTime: TDateTime; out SystemTime: TSystemTime);\r\nfunction SystemTimeToDateTime(const SystemTime: TSystemTime): TDateTime;\r\nfunction DayOfWeek(DateTime: TDateTime): integer;\r\nfunction Date: TDateTime;\r\nfunction Time: TDateTime;\r\nfunction Now: TDateTime;\r\nfunction IncMonth(const DateTime: TDateTime; NumberOfMonths: integer = 1 ): TDateTime;\r\nprocedure IncAMonth(var Year, Month, Day: Word; NumberOfMonths: Integer = 1);\r\nfunction IsLeapYear(Year: Word): boolean;\r\nfunction DateToStr(Date: TDateTime): string;\r\n// function DateToStr(Date: TDateTime; const FormatSettings: TFormatSettings): string;\r\nfunction TimeToStr(Time: TDateTime): string;\r\n// function TimeToStr(Time: TDateTime; const FormatSettings: TFormatSettings): string;\r\nfunction DateTimeToStr(DateTime: TDateTime; ForceTimeIfZero : Boolean = False): string;\r\n// function DateTimeToStr(DateTime: TDateTime; const FormatSettings: TFormatSettings; ForceTimeIfZero : Boolean = False): string;\r\nfunction StrToDate(const S: String): TDateTime;\r\nfunction StrToDate(const S: String; separator : char): TDateTime;\r\nfunction StrToDate(const S: String; const useformat : string; separator : char): TDateTime;\r\n//function StrToDate(const S: string; FormatSettings : TFormatSettings): TDateTime;\r\nfunction StrToTime(const S: String): TDateTime;\r\nfunction StrToTime(const S: String; separator : char): TDateTime;\r\n// function StrToTime(const S: string; FormatSettings : TFormatSettings): TDateTime;\r\nfunction StrToDateTime(const S: String): TDateTime;\r\n//function StrToDateTime(const s: ShortString; const FormatSettings : TFormatSettings): TDateTime;\r\nfunction FormatDateTime(const FormatStr: string; const DateTime: TDateTime): string;\r\n// function FormatDateTime(const FormatStr: string; DateTime: TDateTime; const FormatSettings: TFormatSettings; Options : TFormatDateTimeOptions = []): string;\r\nfunction TryStrToDate(const S: String; out Value: TDateTime): Boolean;\r\nfunction TryStrToDate(const S: String; out Value: TDateTime; separator : char): Boolean;\r\nfunction TryStrToDate(const S: String; out Value: TDateTime; const useformat : string; separator : char): Boolean;\r\n// function TryStrToDate(const S: string; out Value: TDateTime; const FormatSettings: TFormatSettings): Boolean;\r\nfunction TryStrToTime(const S: String; out Value: TDateTime): Boolean;\r\nfunction TryStrToTime(const S: String; out Value: TDateTime; separator : char): Boolean;\r\nfunction TryStrToDateTime(const S: String; out Value: TDateTime): Boolean;\r\n// function TryStrToTime(const S: string; out Value: TDateTime; const FormatSettings: TFormatSettings): Boolean;\r\n// function TryStrToDateTime(const S: string; out Value: TDateTime; const FormatSettings: TFormatSettings): Boolean;\r\nfunction StrToDateDef(const S: String; const Defvalue : TDateTime): TDateTime;\r\nfunction StrToDateDef(const S: String; const Defvalue : TDateTime; separator : char): TDateTime;\r\nfunction StrToTimeDef(const S: String; const Defvalue : TDateTime): TDateTime;\r\nfunction StrToTimeDef(const S: String; const Defvalue : TDateTime; separator : char): TDateTime;\r\nfunction StrToDateTimeDef(const S: String; const Defvalue : TDateTime): TDateTime;\r\nfunction CurrentYear:Word;\r\nprocedure ReplaceTime(var dati: TDateTime; NewTime : TDateTime);\r\nprocedure ReplaceDate(var DateTime: TDateTime; const NewDate: TDateTime);\r\nFunction FloatToDateTime (Const Value : Extended) : TDateTime;\r\n\r\n{ *****************************************************************************\r\n  Currency support\r\n  *****************************************************************************}\r\n\r\nVar\r\n  CurrencyFormat : Byte = 0;\r\n  NegCurrFormat : Byte = 0;\r\n  CurrencyDecimals : Byte = 2;\r\n  CurrencyString : String = '$';\r\n\r\nFunction FloattoCurr (Const Value : Extended) : Currency;\r\nfunction TryFloatToCurr(const Value: Extended; var AResult: Currency): Boolean;\r\nFunction CurrToStr(Value: Currency): string;\r\n//Function CurrToStr(Value: Currency; Const FormatSettings: TFormatSettings): string;\r\nfunction StrToCurr(const S: string): Currency;\r\n//function StrToCurr(const S: string; Const FormatSettings: TFormatSettings): Currency;\r\nfunction TryStrToCurr(const S: string;Out Value : Currency): Boolean;\r\n//function TryStrToCurr(const S: string;Out Value : Currency; Const FormatSettings: TFormatSettings): Boolean;\r\nfunction StrToCurrDef(const S: string; Default : Currency): Currency;\r\n//function StrToCurrDef(const S: string; Default : Currency; Const FormatSettings: TFormatSettings): Currency;\r\n\r\n{*****************************************************************************\r\n                               File Paths\r\n*****************************************************************************}\r\ntype\r\n  PathStr = String;\r\n//function ExtractFilePath(const FileName: PathStr): PathStr;\r\n\r\n{*****************************************************************************\r\n                               Interfaces\r\n*****************************************************************************}\r\n\r\nconst\r\n  GUID_NULL: TGuid = '{00000000-0000-0000-0000-000000000000}';\r\n\r\nfunction Supports(const Instance: IInterface; const AClass: TClass; out Obj): Boolean; overload;\r\nfunction Supports(const Instance: IInterface; const IID: TGuid; out Intf): Boolean; overload;\r\nfunction Supports(const Instance: TObject; const IID: TGuid; out Intf): Boolean; overload;\r\nfunction Supports(const Instance: TObject; const IID: TGuidString; out Intf): Boolean; overload;\r\n\r\nfunction Supports(const Instance: IInterface; const AClass: TClass): Boolean; overload;\r\nfunction Supports(const Instance: IInterface; const IID: TGuid): Boolean; overload;\r\nfunction Supports(const Instance: TObject; const IID: TGuid): Boolean; overload;\r\nfunction Supports(const Instance: TObject; const IID: TGuidString): Boolean; overload;\r\n\r\nfunction Supports(const AClass: TClass; const IID: TGuid): Boolean; overload;\r\nfunction Supports(const AClass: TClass; const IID: TGuidString): Boolean; overload;\r\n\r\nfunction TryStringToGUID(const s: string; out Guid: TGuid): Boolean;\r\nfunction StringToGUID(const S: string): TGuid;\r\nfunction GUIDToString(const guid: TGuid): string;\r\nfunction IsEqualGUID(const guid1, guid2: TGuid): Boolean;\r\nfunction GuidCase(const guid: TGuid; const List: array of TGuid): Integer;\r\n\r\nimplementation\r\n\r\nprocedure ShowException(ExceptObject: TObject; ExceptAddr: Pointer);\r\n\r\nVar\r\n  S : String;\r\n\r\nbegin\r\n  S:='Application raised an exception '+ExceptObject.ClassName;\r\n  if ExceptObject is Exception then\r\n    S:=S+' : '+Exception(ExceptObject).Message;\r\n{$IFDEF BROWSER}\r\n  asm\r\n    window.alert(S);\r\n  end;\r\n{$ENDIF}\r\n{$IFDEF NODEJS}\r\n  Writeln(S);\r\n{$ENDIF}\r\n  if ExceptAddr=nil then;\r\nend;\r\n\r\nConst\r\n  SAbortError = 'Operation aborted';\r\n\r\nprocedure Abort;\r\nbegin\r\n  Raise EAbort.Create(SAbortError);\r\nend;\r\n\r\n\r\nFunction CharInSet(Ch: Char;Const CSet : array of char) : Boolean;\r\n\r\nVar\r\n  I : integer;\r\n\r\nbegin\r\n  Result:=False;\r\n  I:=Length(CSet)-1;\r\n  While (Not Result) and (I>=0) do\r\n    begin\r\n    Result:=(Ch=CSet[i]);\r\n    Dec(I);\r\n    end;\r\nend;\r\n\r\nfunction LeftStr(const S: string; Count: Integer): String; assembler;\r\nasm\r\n  return (Count>0) ? S.substr(0,Count) : \"\";\r\nend;\r\n\r\nfunction RightStr(const S: string; Count: Integer): String; assembler;\r\nasm\r\n  var l = S.length;\r\n  return (Count<1) ? \"\" : ( Count>=l ? S : S.substr(l-Count));\r\nend;\r\n\r\nfunction Trim(const S: String): String; assembler;\r\nasm\r\n  return S.trim();\r\nend;\r\n\r\nfunction TrimLeft(const S: String): String; assembler;\r\nasm\r\n  return S.replace(/^[\\s\\uFEFF\\xA0\\x00-\\x1f]+/,'');\r\nend;\r\n\r\nfunction TrimRight(const S: String): String; assembler;\r\nasm\r\n  return S.replace(/[\\s\\uFEFF\\xA0\\x00-\\x1f]+$/,'');\r\nend;\r\n\r\nfunction IntToStr(const Value: Integer): string;\r\nbegin\r\n  Result:=str(Value);\r\nend;\r\n\r\nFunction FloatToDecimal(Value : double; Precision, Decimals : integer) :  TFloatRec;\r\n\r\nConst\r\n  Rounds = '234567890';\r\n\r\nvar\r\n  Buffer: String;  //Though str func returns only 25 chars, this might change in the future\r\n  InfNan: string;\r\n  Error, N, L, Start, C: Integer;\r\n  GotNonZeroBeforeDot, BeforeDot : boolean;\r\n\r\nbegin\r\n  if Value=0 then ;\r\n  SetLength(Result.Digits,19);\r\n  asm\r\n    Buffer=Value.toPrecision(21); // Double precision\r\n  end;\r\n  N := 1;\r\n  L := Length(Buffer);\r\n  while Buffer[N]=' ' do\r\n    Inc(N);\r\n  Result.Negative := (Buffer[N] = '-');\r\n  if Result.Negative then\r\n    Inc(N)\r\n  else if (Buffer[N] = '+') then\r\n    inc(N);\r\n  { special cases for Inf and Nan }\r\n  if (L>=N+2) then\r\n    begin\r\n      InfNan:=copy(Buffer,N,3);\r\n      if (InfNan='Inf') then\r\n        begin\r\n          Result.Digits[0]:=#0;\r\n          Result.Exponent:=32767;\r\n          exit\r\n        end;\r\n      if (InfNan='Nan') then\r\n        begin\r\n          Result.Digits[0]:=#0;\r\n          Result.Exponent:=-32768;\r\n          exit\r\n        end;\r\n    end;\r\n  Start := N;  //Start of digits\r\n  Result.Exponent := 0; BeforeDot := true;\r\n  GotNonZeroBeforeDot := false;\r\n  while (L>=N) and (Buffer[N]<>'E') do\r\n    begin\r\n      if Buffer[N]='.' then\r\n        BeforeDot := false\r\n      else\r\n        begin\r\n          if BeforeDot then\r\n            begin  // Currently this is always 1 char\r\n              Inc(Result.Exponent);\r\n              Result.Digits[N-Start] := Buffer[N];\r\n              if Buffer[N] <> '0' then\r\n                GotNonZeroBeforeDot := true;\r\n            end\r\n          else\r\n            Result.Digits[N-Start-1] := Buffer[N]\r\n        end;\r\n      Inc(N);\r\n    end;\r\n    Inc(N); // Pass through 'E'\r\n    if N<=L then\r\n      begin\r\n        Val(Copy(Buffer, N, L-N+1), C, Error); // Get exponent after 'E'\r\n        Inc(Result.Exponent, C);\r\n      end;\r\n    // Calculate number of digits we have from str\r\n    if BeforeDot then\r\n      N := N - Start - 1\r\n    else\r\n      N := N - Start - 2;\r\n    L := Length(Result.Digits);\r\n    if N<L then\r\n\r\n      Result.Digits[N]:='0';  //Zero remaining space\r\n    if Decimals + Result.Exponent < Precision Then //After this it is the same as in FloatToDecimal\r\n      N := Decimals + Result.Exponent\r\n    Else\r\n      N := Precision;\r\n    if N >= L Then\r\n      N := L-1;\r\n  if N = 0 Then\r\n    begin\r\n      if Result.Digits[0] >= '5' Then\r\n        begin\r\n          Result.Digits[0] := '1';\r\n          Result.Digits[1] := #0;\r\n          Inc(Result.Exponent);\r\n        end\r\n      Else\r\n        Result.Digits[0] := #0;\r\n    end  //N=0\r\n  Else if N > 0 Then\r\n    begin\r\n      if Result.Digits[N] >= '5' Then\r\n        begin\r\n          Repeat\r\n            Result.Digits[N] := #0;\r\n            Dec(N);\r\n            // Writeln(N,': ',Result.Digits[N],', Rounding to : ',Rounds[StrToInt(Result.Digits[N])]);\r\n            Result.Digits[N]:=Rounds[StrToInt(Result.Digits[N])];\r\n          Until (N = 0) Or (Result.Digits[N] < ':');\r\n          If Result.Digits[0] = ':' Then\r\n            begin\r\n              Result.Digits[0] := '1';\r\n              Inc(Result.Exponent);\r\n            end;\r\n        end\r\n      Else\r\n        begin\r\n          Result.Digits[N] := '0';\r\n          While (N > -1) And (Result.Digits[N] = '0') Do\r\n            begin\r\n              Result.Digits[N] := #0;\r\n              Dec(N);\r\n            end;\r\n        end;\r\n      end //N>0\r\n  Else\r\n    Result.Digits[0] := #0;\r\n  if (Result.Digits[0] = #0) and\r\n     not GotNonZeroBeforeDot then\r\n    begin\r\n      Result.Exponent := 0;\r\n      Result.Negative := False;\r\n    end;\r\nend;\r\n\r\n\r\nfunction FloatToStr(Value: Double): String;\r\nbegin\r\n  Result:=FloatToStrF(Value,ffGeneral,15,0);\r\nend;\r\n\r\nFunction TryStrToFloat(const S : String; Out res : Double) : Boolean;\r\n\r\nVar\r\n  J : JSValue;\r\n  N : String;\r\n\r\nbegin\r\n  N:=S;\r\n  // Delocalize\r\n  if (ThousandSeparator <>'') then\r\n    N:=StringReplace(N,ThousandSeparator,'',[rfReplaceAll]);\r\n  if (DecimalSeparator<>'.') then\r\n    N:=StringReplace(N,DecimalSeparator,'.',[]);\r\n  J:=parseFloat(N);\r\n  Result:=Not jsIsNaN(J);\r\n  if Result then\r\n    Res:=Double(J);\r\nend;\r\n\r\nFunction StrToFloatDef(const S : String; Const aDef : Double) : Double;\r\n\r\nbegin\r\n  if not TryStrToFloat(S,Result) then\r\n    Result:=aDef;\r\nend;\r\n\r\nFunction StrToFloat(const S : String) : Double;\r\nbegin\r\n  if not TryStrToFloat(S,Result) then\r\n    Raise EConvertError.CreateFmt(SErrInvalidFloat,[S]);\r\nend;\r\n\r\nfunction FormatFloat(Fmt: String; aValue: Double): String;\r\n\r\nType\r\n  TPosArray = Array of Integer;\r\n\r\nconst\r\n  MaxPrecision = 18;  // Extended precision\r\n\r\nvar\r\n  // Input in usable format\r\n  E : Extended;              // Value as extended.\r\n  FV: TFloatRec;             // Value as floatrec.\r\n  Section : String;          // Format can contain 3 sections, semicolon separated: Pos;Neg;Zero. This is the one to use.\r\n  SectionLength : Integer;   // Length of section.\r\n  // Calculated based on section. Static during output\r\n  ThousandSep: Boolean;      // Thousands separator detected in format ?\r\n  IsScientific: Boolean;     // Use Scientific notation ? (E detected in format)\r\n  DecimalPos: Integer;       // Position of decimal point in pattern.\r\n  FirstDigit: Integer;       // First actual digit in input (# or 0), relative to decimal point\r\n  LastDigit: Integer;        // Last required (0) digit, relative to decimal point\r\n  RequestedDigits: Integer;  // Number of requested digits, # and 0 alike\r\n  ExpSize : Integer;         // Number of digits in exponent\r\n  Available: Integer;        // Available digits in FV.\r\n  // These change during output loop\r\n  Current: Integer;          // Current digit in available digits\r\n  PadZeroes: Integer;        // Difference in requested digits before comma and exponent, needs to be padded with zeroes.\r\n  DistToDecimal: Integer;    // Place of current digit, relative to decimal point taking in account PadZeroes!\r\n\r\n  Procedure InitVars;\r\n\r\n  begin\r\n    E:=aValue;\r\n    Section:='';\r\n    SectionLength:=0;\r\n    ThousandSep:=false;\r\n    IsScientific:=false;\r\n    DecimalPos:=0;\r\n    FirstDigit:=MaxInt;\r\n    LastDigit:=0;\r\n    RequestedDigits:=0;\r\n    ExpSize:=0;\r\n    Available:=-1;\r\n  end;\r\n\r\n  procedure ToResult(const AChar: Char);\r\n  begin\r\n    Result:=Result+AChar;\r\n  end;\r\n\r\n  procedure AddToResult(const AStr: String);\r\n\r\n  begin\r\n    Result:=Result+AStr;\r\n  end;\r\n\r\n  procedure WriteDigit(ADigit: Char);\r\n\r\n  // Write a digit to result, prepend with decimalseparator or append with 1000 separator\r\n\r\n  begin\r\n    if ADigit=#0 then exit;\r\n    // Writeln('WriteDigit: ',ADigit,', DistToDecimal: ',DistToDecimal);\r\n    Dec(DistToDecimal);\r\n    // -1 -> we've arrived behind the decimal\r\n    if (DistToDecimal=-1) then\r\n      begin\r\n      AddToResult(DecimalSeparator);\r\n      ToResult(ADigit);\r\n      end\r\n    else\r\n      begin\r\n      // We're still before the decimal.\r\n      ToResult(ADigit);\r\n      if ThousandSep and ((DistToDecimal mod 3)=0) and (DistToDecimal>1) then\r\n        AddToResult(ThousandSeparator);\r\n      end;\r\n  end;\r\n\r\n  Function GetDigit : Char;\r\n\r\n  // Return next digit from available digits.\r\n  // May return #0 if none available.\r\n  // Will return '0' if applicable.\r\n\r\n  begin\r\n    // Writeln(' DistToDecimal <= LastDigit : ',DistToDecimal,' <  ',LastDigit,' have digit: ',Current<=Available, '(',Current,')');\r\n    Result:=#0;\r\n    if (Current<=Available) then\r\n      begin\r\n      Result:=FV.Digits[Current];\r\n      Inc(Current);\r\n      end\r\n    else if (DistToDecimal <= LastDigit) then\r\n      Dec(DistToDecimal)\r\n    else\r\n      Result:='0';\r\n    //  Writeln('GetDigit ->: ',Result);\r\n  end;\r\n\r\n  procedure CopyDigit;\r\n\r\n  // Copy a digit (#, 0) to the output with the correct value\r\n\r\n  begin\r\n    // Writeln('CopyDigit ');\r\n    if (PadZeroes=0) then\r\n      WriteDigit(GetDigit) // No shift needed, just copy what is available.\r\n    else if (PadZeroes<0) then\r\n      begin\r\n      // We must prepend zeroes\r\n      Inc(PadZeroes);\r\n      if (DistToDecimal<=FirstDigit) then\r\n        WriteDigit('0')\r\n      else\r\n        Dec(DistToDecimal);\r\n      end\r\n    else\r\n      begin\r\n      // We must append zeroes\r\n      while PadZeroes > 0 do\r\n        begin\r\n        WriteDigit(GetDigit);\r\n        Dec(PadZeroes);\r\n        end;\r\n      WriteDigit(GetDigit);\r\n      end;\r\n  end;\r\n\r\n  Function GetSections(Var SP : TPosArray) : Integer;\r\n\r\n  var\r\n    FL : Integer;\r\n    i : Integer;\r\n    C,Q : Char;\r\n    inQuote : Boolean;\r\n\r\n  begin\r\n    Result:=1;\r\n    SP[1]:=-1;\r\n    SP[2]:=-1;\r\n    SP[3]:=-1;\r\n    inQuote:=False;\r\n    Q:=#0;\r\n    I:=1;\r\n    FL:=Length(Fmt);\r\n    while (I<=FL) do\r\n      begin\r\n      C:=Fmt[I];\r\n      case C of\r\n      ';':\r\n        begin\r\n        if not InQuote then\r\n          begin\r\n          if Result>3 then\r\n            Raise Exception.Create('Invalid float format');\r\n          SP[Result]:=I+1;\r\n          Inc(Result);\r\n          end;\r\n        end;\r\n      '\"','''':\r\n        begin\r\n        if InQuote then\r\n          InQuote:=C<>Q\r\n        else\r\n          begin\r\n          InQuote:=True;\r\n          Q:=C;\r\n          end;\r\n        end;\r\n      end;\r\n      Inc(I);\r\n      end;\r\n    if SP[Result]=-1 then\r\n      SP[Result]:=FL+1;\r\n  end;\r\n\r\n  Procedure AnalyzeFormat;\r\n\r\n  var\r\n    I,Len: Integer;\r\n    Q,C: Char;\r\n    InQuote : Boolean;\r\n\r\n  begin\r\n    Len:=Length(Section);\r\n    I:=1;\r\n    InQuote:=False;\r\n    Q:=#0;\r\n    while (I<=Len) do\r\n      begin\r\n      C:=Section[i];\r\n      if C in ['\"',''''] then\r\n        begin\r\n        if InQuote then\r\n          InQuote:=C<>Q\r\n        else\r\n          begin\r\n          InQuote:=True;\r\n          Q:=C;\r\n          end;\r\n        end\r\n      else if not InQuote then\r\n        case C of\r\n        '.':\r\n          if (DecimalPos=0) then\r\n            DecimalPos:=RequestedDigits+1;\r\n        ',':\r\n            ThousandSep:=ThousandSeparator<>#0;\r\n        'e', 'E':\r\n            begin\r\n            Inc(I);\r\n            if (I<Len) then\r\n              begin\r\n              C:=Section[i];\r\n              IsScientific:=C in ['-','+'];\r\n              if IsScientific then\r\n                while (I<Len) and (Section[i+1]='0') do\r\n                  begin\r\n                  Inc(ExpSize);\r\n                  Inc(I);\r\n                  end;\r\n              if ExpSize>4 then\r\n                ExpSize:=4;\r\n              end;\r\n            end;\r\n        '#':\r\n            Inc(RequestedDigits);\r\n        '0':\r\n            begin\r\n            if RequestedDigits<FirstDigit then\r\n              FirstDigit:=RequestedDigits+1;\r\n            Inc(RequestedDigits);\r\n            LastDigit:=RequestedDigits+1;\r\n            end;\r\n        end;\r\n      Inc(I);\r\n      end;\r\n    if DecimalPos=0 then\r\n      DecimalPos:=RequestedDigits+1;\r\n    // Writeln('LastDigit: ',DecimalPos,'-',LastDigit);\r\n    LastDigit:=DecimalPos-LastDigit;\r\n    if LastDigit>0 then\r\n      LastDigit:=0;\r\n    // Writeln('FirstDigit: ',DecimalPos,'-',FirstDigit);\r\n    FirstDigit:=DecimalPos-FirstDigit;\r\n    if FirstDigit<0 then\r\n      FirstDigit:=0;\r\n  end;\r\n\r\n  Function ValueOutSideScope : Boolean;\r\n  begin\r\n    With FV do\r\n     Result:=((Exponent >= 18) and (not IsScientific)) or (Exponent = $7FF) or (Exponent = $800)\r\n  end;\r\n\r\n  Procedure CalcRunVars;\r\n\r\n  Var\r\n    D,P: Integer;\r\n\r\n  begin\r\n    if IsScientific then\r\n      begin\r\n      P:=RequestedDigits;\r\n      D:=9999;\r\n      end\r\n    else\r\n      begin\r\n      P:=MaxPrecision;\r\n      D:=RequestedDigits-DecimalPos+1;\r\n      end;\r\n    FV:=FloatToDecimal(aValue,P,D);\r\n    DistToDecimal:=DecimalPos-1;\r\n    if IsScientific then\r\n      PadZeroes:=0 // No padding.\r\n    else\r\n      begin\r\n      PadZeroes:=FV.Exponent-(DecimalPos-1);\r\n      if (PadZeroes>=0) then\r\n        DistToDecimal:=FV.Exponent\r\n      end;\r\n    // Writeln('PadZeroes : ',PadZeroes, ', DistToDecimal : ',DistToDecimal);\r\n    Available:=-1;\r\n    while (Available<High(FV.Digits)) and (FV.Digits[Available+1]<>#0) do\r\n      Inc(Available);\r\n    // Writeln('Available: ',Available);\r\n  end;\r\n\r\n  Function FormatExponent(ASign: Char; aExponent: Integer) : String;\r\n\r\n  begin\r\n    Result:=IntToStr(aExponent);\r\n    Result:=StringOfChar('0',ExpSize-Length(Result))+Result;\r\n    if (aExponent<0) then\r\n      Result:='-'+Result\r\n    else if (aExponent>0) and (aSign='+') then\r\n      Result:=aSign+Result;\r\n  end;\r\n\r\nvar\r\n  I,S : Integer;\r\n  C,Q : Char;\r\n  PA : TPosArray;\r\n  InLiteral : Boolean;\r\n\r\nbegin\r\n  SetLength(PA,4);\r\n  Result:='';\r\n  Initvars;\r\n  // What section to use ?\r\n  if (E>0) then\r\n    S:=1\r\n  else if (E<0) then\r\n    S:=2\r\n  else\r\n    S:=3;\r\n  PA[0]:=0;\r\n  I:=GetSections(PA);\r\n  if (I<S) or (PA[S]-PA[S-1]=0) then\r\n    S:=1;\r\n  // Extract correct section\r\n  SectionLength:=PA[S]-PA[S-1]-1;\r\n  Section:=Copy(Fmt,PA[S-1]+1,SectionLength);\r\n  SetLength(Section,SectionLength);\r\n  // Writeln('Section ',I,' : \"',Section,'\" ',SectionLength);\r\n  AnalyzeFormat;\r\n  // Writeln('RequestedDigits: ',RequestedDigits,', DecimalPos : ',DecimalPos,', LastDigit: ',LastDigit,', FirstDigit: ',FirstDigit);\r\n  CalcRunVars;\r\n  // If we cannot process value using current settings, fallback\r\n  if (SectionLength=0) or ValueOutSideScope then\r\n    begin\r\n    asm\r\n     Section=E.toPrecision(15);\r\n    end;\r\n    Result:=Section;\r\n    end;\r\n  // Get Started\r\n  I:=1;\r\n  Current:=0;\r\n  Q:=' ';\r\n  InLiteral:=False;\r\n  if (FV.Negative) and (S=1) then\r\n    ToResult('-');\r\n  while (I<=SectionLength) do\r\n    begin\r\n    C:=Section[i];\r\n    // Writeln('Analyzing pos ',I,': \"',C,'\"');\r\n    If (C in ['\"', '''']) then\r\n      begin\r\n      if InLiteral then\r\n        InLiteral:=C<>Q\r\n      else\r\n        begin\r\n        inLiteral:=True;\r\n        Q:=C;\r\n        end;\r\n      end\r\n    else if InLiteral then\r\n      ToResult(C)\r\n    else\r\n      case C of\r\n      '0', '#':\r\n        CopyDigit;\r\n      '.', ',':\r\n        ; // Do nothing, handled by CopyDigit\r\n      'e', 'E':\r\n        begin\r\n        ToResult(C); // Always needed\r\n        Inc(I);\r\n        if I<=Length(Section) then\r\n          begin\r\n          C:=Section[I];\r\n          if (C in ['+','-']) then\r\n            begin\r\n            AddToResult(FormatExponent(C,FV.Exponent-DecimalPos+1));\r\n            // Skip rest\r\n            while (I<SectionLength) and (Section[i+1]='0') do\r\n              Inc(I);\r\n            end;\r\n          end;\r\n        end;\r\n      else\r\n        ToResult(C);\r\n      end;\r\n    Inc(i);\r\n    end;\r\nend;\r\n\r\nfunction StrToBool(const S: String): Boolean;\r\nbegin\r\n  if not(TryStrToBool(S,Result)) then\r\n    raise EConvertError.CreateFmt(SInvalidBoolean,[S]);\r\nend;\r\n\r\nprocedure CheckBoolStrs;\r\nbegin\r\n  if Length(TrueBoolStrs)=0 then\r\n  begin\r\n    SetLength(TrueBoolStrs,1);\r\n    TrueBoolStrs[0]:='True';\r\n  end;\r\n  if Length(FalseBoolStrs)=0 then\r\n  begin\r\n    SetLength(FalseBoolStrs,1);\r\n    FalseBoolStrs[0]:='False';\r\n  end;\r\nend;\r\n\r\nfunction BoolToStr(B: Boolean; UseBoolStrs: Boolean): string;\r\nbegin\r\n  if UseBoolStrs Then\r\n  begin\r\n    CheckBoolStrs;\r\n    if B then\r\n      Result:=TrueBoolStrs[0]\r\n    else\r\n      Result:=FalseBoolStrs[0];\r\n  end else\r\n    if B then\r\n      Result:='-1'\r\n    else\r\n      Result:='0';\r\nend;\r\n\r\nfunction BoolToStr(B: Boolean; const TrueS, FalseS: String): string;\r\nbegin\r\n  if B then Result:=TrueS else Result:=FalseS;\r\nend;\r\n\r\nfunction StrToBoolDef(const S: String; Default: Boolean): Boolean;\r\nbegin\r\n  if not TryStrToBool(S,Result) then\r\n    Result:=Default;\r\nend;\r\n\r\nfunction TryStrToBool(const S: String; out Value: Boolean): Boolean;\r\nVar\r\n  Temp : String;\r\n  I    : Longint;\r\n  D : Double;\r\n  Code: integer;\r\nbegin\r\n  Temp:=uppercase(S);\r\n  Val(Temp,D,code);\r\n  Result:=true;\r\n  If Code=0 then\r\n    Value:=(D<>0.0)\r\n  else\r\n    begin\r\n      CheckBoolStrs;\r\n      for I:=low(TrueBoolStrs) to High(TrueBoolStrs) do\r\n        if Temp=uppercase(TrueBoolStrs[I]) then\r\n          begin\r\n            Value:=true;\r\n            exit;\r\n          end;\r\n      for I:=low(FalseBoolStrs) to High(FalseBoolStrs) do\r\n        if Temp=uppercase(FalseBoolStrs[I]) then\r\n          begin\r\n            Value:=false;\r\n            exit;\r\n          end;\r\n      Result:=false;\r\n    end;\r\nend;\r\n\r\nfunction UpperCase(const s: String): String; assembler;\r\nasm\r\n  return s.toUpperCase();\r\nend;\r\n\r\nfunction LowerCase(const s: String): String; assembler;\r\nasm\r\n  return s.toLowerCase();\r\nend;\r\n\r\nfunction CompareStr(const s1, s2: String): Integer; assembler;\r\nasm\r\n  var l1 = s1.length;\r\n  var l2 = s2.length;\r\n  if (l1<=l2){\r\n    var s = s2.substr(0,l1);\r\n    if (s1<s){ return -1;\r\n    } else if (s1>s){ return 1;\r\n    } else { return l1<l2 ? -1 : 0; };\r\n  } else {\r\n    var s = s1.substr(0,l2);\r\n    if (s<s2){ return -1;\r\n    } else { return 1; };\r\n  };\r\nend;\r\n\r\nfunction SameStr(const s1, s2: String): Boolean; assembler;\r\nasm\r\n  return s1 == s2;\r\nend;\r\n\r\nfunction CompareText(const s1, s2: String): Integer; assembler;\r\nasm\r\n  var l1 = s1.toLowerCase();\r\n  var l2 = s2.toLowerCase();\r\n  if (l1>l2){ return 1;\r\n  } else if (l1<l2){ return -1;\r\n  } else { return 0; }\r\nend;\r\n\r\nfunction SameText(const s1, s2: String): Boolean; assembler;\r\nasm\r\n  return s1.toLowerCase() == s2.toLowerCase();\r\nend;\r\n\r\nfunction AnsiCompareText(const s1, s2: String): Integer; assembler;\r\nasm\r\n  return s1.localeCompare(s2);\r\nend;\r\n\r\nfunction AnsiSameText(const s1, s2: String): Boolean; assembler;\r\nasm\r\n  return s1.localeCompare(s2) == 0;\r\nend;\r\n\r\nfunction AnsiCompareStr(const s1, s2: String): Integer;\r\nbegin\r\n  {$IFDEF ECMAScript6}\r\n  Result:=CompareText(TJSString(s1).normalize(),TJSString(s1).normalize());\r\n  {$ELSE}\r\n  Result:=CompareText(s1,s2);\r\n  {$ENDIF}\r\nend;\r\n\r\nprocedure AppendStr(var Dest: String; const S: string);\r\n\r\nbegin\r\n  Dest:=Dest+S;\r\nend;\r\n\r\n\r\nConst\r\n  feInvalidFormat   = 1;\r\n  feMissingArgument = 2;\r\n  feInvalidArgIndex = 3;\r\n\r\nProcedure DoFormatError (ErrCode : Longint;const fmt: String);\r\n\r\n\r\nbegin\r\n  //!! must be changed to contain format string...\r\n  Case ErrCode of\r\n   feInvalidFormat : raise EConvertError.Createfmt(SInvalidFormat,[Fmt]);\r\n   feMissingArgument : raise EConvertError.Createfmt(SArgumentMissing,[Fmt]);\r\n   feInvalidArgIndex : raise EConvertError.Createfmt(SInvalidArgIndex,[Fmt]);\r\n  end;\r\nend;\r\n\r\nConst\r\n  maxdigits = 15;\r\n\r\nFunction ReplaceDecimalSep(S: String; Const DS : string) : string;\r\n\r\nVar\r\n  P : Integer;\r\n\r\nbegin\r\n  P:=Pos('.',S);\r\n  if P>0 then\r\n    Result:=Copy(S,1,P-1)+DS+Copy(S,P+1,Length(S)-P)\r\n  else\r\n    Result:=S;\r\nend;\r\n\r\nfunction FormatGeneralFloat(Value : double; Precision : Integer; DS : String) : string;\r\n\r\nVar\r\n  P, PE, Q, Exponent: Integer;\r\n\r\nBegin\r\n  If (Precision = -1) Or (Precision > maxdigits) Then\r\n     Precision := maxdigits;\r\n  { First convert to scientific format, with correct precision }\r\n  Str(Value:precision+7, Result);\r\n  { Delete leading spaces }\r\n  Result:=TrimLeft(Result);\r\n  P:=Pos('.',Result);\r\n  if P=0 then\r\n    exit;\r\n   { Consider removing exponent }\r\n  PE:=Pos('E',Result);\r\n  if PE=0 then\r\n    begin\r\n    Result:=ReplaceDecimalSep(Result,DS);\r\n    exit;\r\n    end;\r\n  { Read exponent }\r\n  Q:=PE+2;\r\n  Exponent := 0;\r\n  while (Q <= Length(Result)) do\r\n    begin\r\n    Exponent := Exponent*10 + Ord(Result[Q])-Ord('0');\r\n    Inc(Q);\r\n    end;\r\n  if Result[PE+1] = '-' then\r\n    Exponent := -Exponent;\r\n  if (P+Exponent < PE) and (Exponent > -6) then\r\n    begin\r\n    { OK to remove exponent }\r\n    SetLength(Result,PE-1); { Trim exponent }\r\n    if Exponent >= 0 then\r\n      begin\r\n        { Shift point to right }\r\n      for Q := 0 to Exponent-1 do\r\n        begin\r\n        Result[P] := Result[P+1];\r\n        Inc(P);\r\n        end;\r\n      Result[P] := '.';\r\n      P := 1;\r\n      if Result[P] = '-' then\r\n        Inc(P);\r\n      while (Result[P] = '0') and (P < Length(Result)) and (Copy(Result,P+1,Length(DS))<>DS) do\r\n          { Trim leading zeros; conversion above should not give any, but occasionally does\r\n            because of rounding }\r\n          System.Delete(Result,P,1);\r\n      end\r\n    else\r\n      begin\r\n      { Add zeros at start }\r\n      Insert(Copy('00000',1,-Exponent),Result,P-1);\r\n      Result[P-Exponent] := Result[P-Exponent-1]; { Copy leading digit }\r\n      Result[P] := '.';\r\n      if Exponent <> -1 then\r\n        Result[P-Exponent-1] := '0';\r\n      end;\r\n    { Remove trailing zeros }\r\n    Q := Length(Result);\r\n    while (Q > 0) and (Result[Q] = '0') do\r\n      Dec(Q);\r\n    if Result[Q] = '.' then\r\n      Dec(Q); { Remove trailing decimal point }\r\n    if (Q = 0) or ((Q=1) and (Result[1] = '-')) then\r\n      Result := '0'\r\n    else\r\n      SetLength(Result,Q);\r\n    end\r\n  else\r\n    begin\r\n    { Need exponent, but remove superfluous characters }\r\n    { Delete trailing zeros }\r\n    while Result[PE-1] = '0' do\r\n      begin\r\n      System.Delete(Result,PE-1,1);\r\n      Dec(PE);\r\n      end;\r\n    { If number ends in decimal point, remove it }\r\n    if Result[PE-1] = DS then\r\n      begin\r\n      System.Delete(Result,PE-1,1);\r\n      Dec(PE);\r\n      end;\r\n    { delete superfluous + in exponent }\r\n    if Result[PE+1]='+' then\r\n      System.Delete(Result,PE+1,1)\r\n    else\r\n      Inc(PE);\r\n    while Result[PE+1] = '0' do\r\n      { Delete leading zeros in exponent }\r\n      System.Delete(Result,PE+1,1)\r\n    end;\r\n  Result:=ReplaceDecimalSep(Result,DS)\r\nend;\r\n\r\nfunction FormatExponentFloat(Value : double; Precision,Digits : Integer;DS : String) : string;\r\n\r\nVar\r\n  P: Integer;\r\nBegin\r\n  DS:=DecimalSeparator;\r\n  If (Precision = -1) Or (Precision > maxdigits) Then\r\n    Precision := maxdigits;\r\n  Str(Value:Precision+7, Result);\r\n  { Delete leading spaces }\r\n  while Result[1] = ' ' do\r\n    System.Delete(Result, 1, 1);\r\n  P:=Pos('E',Result);\r\n  if P=0 then\r\n    begin\r\n    Result:=ReplaceDecimalSep(Result,DS);\r\n    exit;\r\n    end;\r\n  Inc(P, 2);\r\n  if Digits > 4 then\r\n    Digits:=4;\r\n  Digits:=Length(Result) - P - Digits + 1;\r\n  if Digits < 0 then\r\n    insert(copy('0000',1,-Digits),Result,P)\r\n  else\r\n    while (Digits > 0) and (Result[P] = '0') do\r\n      begin\r\n      System.Delete(Result, P, 1);\r\n      if P > Length(Result) then\r\n        begin\r\n        System.Delete(Result, P - 2, 2);\r\n        break;\r\n        end;\r\n      Dec(Digits);\r\n      end;\r\n  Result:=ReplaceDecimalSep(Result,DS);\r\nEnd;\r\n\r\nfunction FormatFixedFloat(Value : double; Digits : Integer; DS : String) : string;\r\n\r\nBegin\r\n  If Digits = -1 Then\r\n    Digits := 2\r\n  Else If Digits > 18 Then\r\n    Digits := 18;\r\n  Str(Value:0:Digits, Result);\r\n  if (Result<>'') and (Result[1]=' ') then\r\n    Delete(Result,1,1);\r\n  Result:=ReplaceDecimalSep(Result,DS);\r\nend;\r\n\r\n\r\nfunction FormatNumberFloat(Value : double; Digits : Integer; DS,TS : String) : string;\r\n\r\nVar\r\n  P : integer;\r\n\r\nBegin\r\n  If Digits = -1 Then\r\n    Digits := 2\r\n  else If Digits > maxdigits Then\r\n    Digits := maxdigits;\r\n  Str(Value:0:Digits, Result);\r\n  if (Result<>'') and (Result[1]=' ') then\r\n    Delete(Result,1,1);\r\n  P:=Pos('.',Result);\r\n  Result:=ReplaceDecimalSep(Result,DS);\r\n  Dec(P,3);\r\n  if (TS<>'') and (TS<>#0) then\r\n    While (P>1) Do\r\n      Begin\r\n      If (Result[P-1] <> '-')  Then\r\n        Insert(TS, Result, P);\r\n      Dec(P, 3);\r\n      End;\r\nEnd;\r\n\r\nfunction RemoveLeadingNegativeSign(var AValue: String; DS : String): Boolean;\r\n\r\n// removes negative sign in case when result is zero eg. -0.00\r\n\r\nvar\r\n  i: PtrInt;\r\n  TS: String;\r\n  StartPos: PtrInt;\r\n\r\nbegin\r\n  Result:=False;\r\n  StartPos := 2;\r\n  TS := ThousandSeparator;\r\n  for i :=StartPos to length(AValue) do\r\n    begin\r\n    Result := (AValue[i] in ['0', DS, 'E', '+']) or (aValue=TS);\r\n    if not Result then\r\n      break;\r\n    end;\r\n  if (Result) then\r\n    Delete(AValue, 1, 1);\r\nend;\r\n\r\nFunction FormatNumberCurrency(const Value : Currency; Digits : Integer; DS,TS : String) : string;\r\n\r\nVar\r\n  Negative: Boolean;\r\n  P : Integer;\r\n\r\nBegin\r\n   If Digits = -1 Then\r\n     Digits := CurrencyDecimals\r\n   Else If Digits > 18 Then\r\n     Digits := 18;\r\n   Str(Value:0:Digits, Result);\r\n   Negative:=Result[1] = '-';\r\n   if Negative then\r\n     System.Delete(Result, 1, 1);\r\n   P := Pos('.', Result);\r\n   If P <> 0 Then\r\n     Result:=ReplaceDecimalSep(Result,DS)\r\n   else\r\n     P := Length(Result)+1;\r\n   Dec(P, 3);\r\n   While (P > 1) Do\r\n   Begin\r\n     If ThousandSeparator<>#0 Then\r\n       Insert(FormatSettings.ThousandSeparator, Result, P);\r\n     Dec(P, 3);\r\n   End;\r\n   if (length(Result) > 1) and Negative then\r\n     Negative := not RemoveLeadingNegativeSign(Result,DS);\r\n   If Not Negative Then\r\n     Case CurrencyFormat Of\r\n       0: Result := CurrencyString + Result;\r\n       1: Result := Result + CurrencyString;\r\n       2: Result := CurrencyString + ' ' + Result;\r\n       3: Result := Result + ' ' + CurrencyString;\r\n     end\r\n   else\r\n     Case NegCurrFormat Of\r\n       0: Result := '(' + CurrencyString + Result + ')';\r\n       1: Result := '-' + CurrencyString + Result;\r\n       2: Result := CurrencyString + '-' + Result;\r\n       3: Result := CurrencyString + Result + '-';\r\n       4: Result := '(' + Result + CurrencyString + ')';\r\n       5: Result := '-' + Result + CurrencyString;\r\n       6: Result := Result + '-' + CurrencyString;\r\n       7: Result := Result + CurrencyString + '-';\r\n       8: Result := '-' + Result + ' ' + CurrencyString;\r\n       9: Result := '-' + CurrencyString + ' ' + Result;\r\n       10: Result := Result + ' ' + CurrencyString + '-';\r\n       11: Result := CurrencyString + ' ' + Result + '-';\r\n       12: Result := CurrencyString + ' ' + '-' + Result;\r\n       13: Result := Result + '-' + ' ' + CurrencyString;\r\n       14: Result := '(' + CurrencyString + ' ' + Result + ')';\r\n       15: Result := '(' + Result + ' ' + CurrencyString + ')';\r\n     end;\r\n   if TS='' then ;\r\nend;\r\n\r\nFunction FloatToStrF(const Value : double; format: TFloatFormat; Precision, Digits: Integer): String;\r\n\r\nVar\r\n  DS: string;\r\n\r\nBegin\r\n  DS:=DecimalSeparator;\r\n  Case format Of\r\n    ffGeneral:\r\n      Result:=FormatGeneralFloat(Value,Precision,DS);\r\n    ffExponent:\r\n      Result:=FormatExponentFloat(Value,Precision,Digits,DS);\r\n    ffFixed:\r\n      Result:=FormatFixedFloat(Value,Digits,DS);\r\n    ffNumber:\r\n      Result:=FormatNumberFloat(Value,Digits,DS,ThousandSeparator);\r\n    ffCurrency:\r\n     Result:=FormatNumberCurrency(Value,Digits,DS,ThousandSeparator);\r\n  end;\r\n  if (Format<>ffCurrency) and (length(Result)>1) and (Result[1]='-') then\r\n    RemoveLeadingNegativeSign(Result,DS);\r\nend;\r\n\r\nfunction Format (const Fmt: String; const Args: array of jsvalue): String;\r\n\r\nVar ChPos,OldPos,ArgPos,DoArg,Len : SizeInt;\r\n    Hs,ToAdd : String;\r\n    Index : SizeInt;\r\n    Width,Prec : Longint;\r\n    Left : Boolean;\r\n    Fchar : char;\r\n    vq : nativeint;\r\n\r\n  {\r\n    ReadFormat reads the format string. It returns the type character in\r\n    uppercase, and sets index, Width, Prec to their correct values,\r\n    or -1 if not set. It sets Left to true if left alignment was requested.\r\n    In case of an error, DoFormatError is called.\r\n  }\r\n\r\n  Function ReadFormat : Char;\r\n\r\n  Var Value : NativeInt;\r\n\r\n    Procedure ReadInteger;\r\n\r\n    var\r\n      Code: integer;\r\n      ArgN: SizeInt;\r\n    begin\r\n      If Value<>-1 then exit; // Was already read.\r\n      OldPos:=ChPos;\r\n      While (ChPos<=Len) and\r\n            (Fmt[ChPos]<='9') and (Fmt[ChPos]>='0') do inc(ChPos);\r\n      If ChPos>len then\r\n        DoFormatError(feInvalidFormat,Fmt);\r\n      If Fmt[ChPos]='*' then\r\n        begin\r\n\r\n        if Index=-1 then\r\n          ArgN:=Argpos\r\n        else\r\n        begin\r\n          ArgN:=Index;\r\n          Inc(Index);\r\n        end;\r\n\r\n        If (ChPos>OldPos) or (ArgN>High(Args)) then\r\n          DoFormatError(feInvalidFormat,Fmt);\r\n\r\n        ArgPos:=ArgN+1;\r\n\r\n        if IsNumber(Args[ArgN]) and IsInteger(Args[ArgN]) then\r\n          Value:=Integer(Args[ArgN])\r\n        else\r\n          DoFormatError(feInvalidFormat,Fmt);\r\n        Inc(ChPos);\r\n        end\r\n      else\r\n        begin\r\n        If (OldPos<ChPos) Then\r\n          begin\r\n          Val (Copy(Fmt,OldPos,ChPos-OldPos),value,code);\r\n          // This should never happen !!\r\n          If Code>0 then DoFormatError (feInvalidFormat,Fmt);\r\n          end\r\n        else\r\n          Value:=-1;\r\n        end;\r\n    end;\r\n\r\n    Procedure ReadIndex;\r\n\r\n    begin\r\n      If Fmt[ChPos]<>':' then\r\n        ReadInteger\r\n      else\r\n        value:=0; // Delphi undocumented behaviour, assume 0, #11099\r\n      If Fmt[ChPos]=':' then\r\n        begin\r\n        If Value=-1 then DoFormatError(feMissingArgument,Fmt);\r\n        Index:=Value;\r\n        Value:=-1;\r\n        Inc(ChPos);\r\n        end;\r\n    end;\r\n\r\n    Procedure ReadLeft;\r\n\r\n    begin\r\n      If Fmt[ChPos]='-' then\r\n        begin\r\n        left:=True;\r\n        Inc(ChPos);\r\n        end\r\n      else\r\n        Left:=False;\r\n    end;\r\n\r\n    Procedure ReadWidth;\r\n\r\n    begin\r\n      ReadInteger;\r\n      If Value<>-1 then\r\n        begin\r\n        Width:=Value;\r\n        Value:=-1;\r\n        end;\r\n    end;\r\n\r\n    Procedure ReadPrec;\r\n\r\n    begin\r\n      If Fmt[ChPos]='.' then\r\n        begin\r\n        inc(ChPos);\r\n          ReadInteger;\r\n        If Value=-1 then\r\n         Value:=0;\r\n        prec:=Value;\r\n        end;\r\n    end;\r\n\r\n\r\n  begin\r\n    Index:=-1;\r\n    Width:=-1;\r\n    Prec:=-1;\r\n    Value:=-1;\r\n    inc(ChPos);\r\n    If Fmt[ChPos]='%' then\r\n      begin\r\n      Result:='%';\r\n      exit;                           // VP fix\r\n      end;\r\n    ReadIndex;\r\n    ReadLeft;\r\n    ReadWidth;\r\n    ReadPrec;\r\n    Result:=Upcase(Fmt[ChPos]);\r\n  end;\r\n\r\n\r\n  function Checkarg (AT : TJSValueType; err:boolean):boolean;\r\n  {\r\n    Check if argument INDEX is of correct type (AT)\r\n    If Index=-1, ArgPos is used, and argpos is augmented with 1\r\n    DoArg is set to the argument that must be used.\r\n  }\r\n  begin\r\n    result:=false;\r\n    if Index=-1 then\r\n      DoArg:=Argpos\r\n    else\r\n      DoArg:=Index;\r\n    ArgPos:=DoArg+1;\r\n    If (Doarg>High(Args)) or (GetValueTYpe(Args[Doarg])<>AT) then\r\n     begin\r\n       if err then\r\n        DoFormatError(feInvalidArgindex,Fmt);\r\n       dec(ArgPos);\r\n       exit;\r\n     end;\r\n    result:=true;\r\n  end;\r\n\r\nbegin\r\n  Result:='';\r\n  Len:=Length(Fmt);\r\n  ChPos:=1;\r\n  OldPos:=1;\r\n  ArgPos:=0;\r\n  While ChPos<=len do\r\n    begin\r\n    While (ChPos<=Len) and (Fmt[ChPos]<>'%') do\r\n      inc(ChPos);\r\n    If ChPos>OldPos Then\r\n      Result:=Result+Copy(Fmt,OldPos,ChPos-Oldpos);\r\n    If ChPos<Len then\r\n      begin\r\n      FChar:=ReadFormat;\r\n{$ifdef fmtdebug}\r\n      DumpFormat(FCHar);\r\n{$endif}\r\n      Case FChar of\r\n        'D' : begin\r\n              Checkarg(jvtinteger,true);\r\n              toAdd:=IntToStr(NativeInt(Args[DoArg]));\r\n              Width:=Abs(width);\r\n              Index:=Prec-Length(ToAdd);\r\n              If ToAdd[1]<>'-' then\r\n                ToAdd:=StringOfChar('0',Index)+ToAdd\r\n              else\r\n                // + 1 to accomodate for - sign in length !!\r\n                Insert(StringOfChar('0',Index+1),toadd,2);\r\n              end;\r\n        'U' : begin\r\n              Checkarg(jvtinteger,True);\r\n              if NativeInt(Args[Doarg])<0 then\r\n                DoFormatError(feInvalidArgindex,Fmt);\r\n              Toadd:=IntToStr(NativeInt(Args[Doarg]));\r\n              Width:=Abs(width);\r\n              Index:=Prec-Length(ToAdd);\r\n              ToAdd:=StringOfChar('0',Index)+ToAdd\r\n              end;\r\n        'E' : begin\r\n              if CheckArg(jvtFloat,false) or CheckArg(jvtInteger,True) then\r\n                ToAdd:=FloatToStrF(Double(Args[doarg]),ffFixed,9999,Prec);\r\n              end;\r\n        'F' : begin\r\n              if CheckArg(jvtFloat,false) or CheckArg(jvtInteger,True) then\r\n                ToAdd:=FloatToStrF(Double(Args[doarg]),ffFixed,9999,Prec);\r\n              end;\r\n        'G' : begin\r\n              if CheckArg(jvtFloat,false) or CheckArg(jvtInteger,True) then\r\n                ToAdd:=FloatToStrF(Double(Args[doarg]),ffGeneral,Prec,3);\r\n              end;\r\n        'N' : begin\r\n              if CheckArg(jvtFloat,false) or CheckArg(jvtInteger,True) then\r\n                ToAdd:=FloatToStrF(Double(Args[doarg]),ffNumber,9999,Prec);\r\n              end;\r\n        'M' : begin\r\n              if CheckArg(jvtFloat,false) or CheckArg(jvtInteger,True) then\r\n                ToAdd:=FloatToStrF(Double(Args[doarg]),ffCurrency,9999,Prec);\r\n              end;\r\n        'S' : begin\r\n              CheckArg(jvtString,true);\r\n              hs:=String(Args[doarg]);\r\n              Index:=Length(hs);\r\n              If (Prec<>-1) and (Index>Prec) then\r\n                Index:=Prec;\r\n              ToAdd:=Copy(hs,1,Index);\r\n              end;\r\n        'P' : Begin\r\n              CheckArg(jvtInteger,true);\r\n              ToAdd:=IntToHex(NativeInt(Args[DoArg]),31);\r\n              end;\r\n        'X' : begin\r\n              Checkarg(jvtinteger,true);\r\n              vq:=nativeInt(Args[Doarg]);\r\n              index:=31; // May need to adjust to NativeInt\r\n              If Prec>index then\r\n                ToAdd:=IntToHex(vq,index)\r\n              else\r\n                begin\r\n                // determine minimum needed number of hex digits.\r\n                Index:=1;\r\n                While (NativeInt(1) shl (Index*4)<=vq) and (index<16) do\r\n                  inc(Index);\r\n                If Index>Prec then\r\n                  Prec:=Index;\r\n                ToAdd:=IntToHex(vq,Prec);\r\n                end;\r\n              end;\r\n        '%': ToAdd:='%';\r\n      end;\r\n      If Width<>-1 then\r\n        If Length(ToAdd)<Width then\r\n          If not Left then\r\n            ToAdd:=StringOfChar(' ',Width-Length(ToAdd))+ToAdd\r\n          else\r\n            ToAdd:=ToAdd+StringOfChar(' ',Width-Length(ToAdd));\r\n      Result:=Result+ToAdd;\r\n      end;\r\n    inc(ChPos);\r\n    Oldpos:=ChPos;\r\n    end;\r\nend;\r\n\r\nfunction LocaleCompare(const s1, s2, locales: String): Boolean; assembler;\r\nasm\r\n  return s1.localeCompare(s2,locales) == 0;\r\nend;\r\n\r\nfunction NormalizeStr(const S: String; const Norm: String): String; assembler;\r\nasm\r\n  return S.normalize(Norm);\r\nend;\r\n\r\nfunction IsValidIdent(const Ident: string; AllowDots: Boolean = False; StrictDots: Boolean = False): Boolean;\r\nconst\r\n  Alpha = ['A'..'Z', 'a'..'z', '_'];\r\n  AlphaNum = Alpha + ['0'..'9'];\r\n  Dot = '.';\r\nvar\r\n  First: Boolean;\r\n  I, Len: Integer;\r\nbegin\r\n  Len := Length(Ident);\r\n  if Len < 1 then\r\n    Exit(False);\r\n  First := True;\r\n  Result:=false;\r\n  I:=1;\r\n  While I<=len do\r\n    begin\r\n    if First then\r\n    begin\r\n      if not (Ident[I] in Alpha) then exit;\r\n      First := False;\r\n    end\r\n    else if AllowDots and (Ident[I] = Dot) then\r\n    begin\r\n      if StrictDots then\r\n      begin\r\n        if I >= Len then exit;\r\n        First := True;\r\n      end;\r\n    end\r\n    else\r\n      if not (Ident[I] in AlphaNum) then exit;\r\n    I:=I+1;\r\n    end;\r\n  Result:=true;\r\nend;\r\n\r\nprocedure FreeAndNil(var Obj);\r\nvar\r\n  o: TObject;\r\nbegin\r\n  o:=TObject(Obj);\r\n  if o=nil then exit;\r\n  TObject(Obj):=nil;\r\n  o.Destroy;\r\nend;\r\n\r\n{ EVariantError }\r\n\r\nconstructor EVariantError.CreateCode(Code: Longint);\r\nbegin\r\n  ErrCode:=Code;\r\nend;\r\n\r\n{ Exception }\r\n\r\nconstructor Exception.Create(const Msg: String);\r\nbegin\r\n  fMessage:=Msg;\r\nend;\r\n\r\nconstructor Exception.CreateFmt(const Msg: string; const Args: array of JSValue);\r\nbegin\r\n  //writeln('Exception.CreateFmt START ',ClassName,' \"',Msg,'\" Args=',Args);\r\n  fMessage:=Format(Msg,Args);\r\n  //writeln('Exception.CreateFmt END ',ClassName,' \"',Msg,'\" fMessage=',fMessage);\r\nend;\r\n\r\nconstructor Exception.CreateHelp(const Msg: String; AHelpContext: Integer);\r\nbegin\r\n  fMessage:=Msg;\r\n  fHelpContext:=AHelpContext;\r\nend;\r\n\r\nconstructor Exception.CreateFmtHelp(const Msg: string;\r\n  const Args: array of JSValue; AHelpContext: Integer);\r\nbegin\r\n  fMessage:=Format(Msg,Args);\r\n  fHelpContext:=AHelpContext;\r\nend;\r\n\r\nfunction Exception.ToString: String;\r\nbegin\r\n  Result:=ClassName+': '+Message;\r\nend;\r\n\r\nConst\r\n  RESpecials = '([\\[\\]\\(\\)\\\\\\.\\*])';\r\n\r\nFunction StringReplace(aOriginal, aSearch, aReplace : string; Flags : TStringReplaceFlags) : String;\r\n\r\nVar\r\n  REFlags : String;\r\n  REString : String;\r\n\r\nbegin\r\n  REFlags:='';\r\n  if rfReplaceAll in flags then\r\n    ReFlags:='g';\r\n  if rfIgnoreCase in flags then\r\n    ReFlags:=ReFlags+'i';\r\n  REString:=TJSString(aSearch).replace(TJSRegexp.new(RESpecials,'g'),'\\$1');\r\n  Result:=TJSString(aOriginal).replace(TJSRegexp.new(REString,REFlags),aReplace);\r\nend;\r\n\r\nFunction QuoteString(aOriginal : String; AQuote : Char) : String;\r\n\r\nVar\r\n  REString : String;\r\n\r\nbegin\r\n  REString:=TJSString(aQuote).replace(TJSRegexp.new(aOriginal,'g'),'\\\\$1');\r\n  Result:=AQuote+TJSString(aOriginal).replace(TJSRegexp.new(REString,'g'),'$1\\$1')+AQuote;\r\nend;\r\n\r\nfunction IsDelimiter(const Delimiters, S: string; Index: Integer): Boolean;\r\nbegin\r\n  Result:=False;\r\n  if (Index>0) and (Index<=Length(S)) then\r\n    Result:=Pos(S[Index],Delimiters)<>0; // Note we don't do MBCS yet\r\nend;\r\n\r\nfunction AdjustLineBreaks(const S: string): string;\r\n\r\nbegin\r\n  Result:=AdjustLineBreaks(S,DefaultTextLineBreakStyle);\r\nend;\r\n\r\nfunction AdjustLineBreaks(const S: string; Style: TTextLineBreakStyle): string;\r\n\r\nvar\r\n  I,L: Longint;\r\n  Res : String;\r\n\r\n  Procedure Add(C  : Char);\r\n  begin\r\n    Res:=Res+C;\r\n  end;\r\n\r\nbegin\r\n  I:=0;\r\n  L:=Length(S);\r\n  Result:='';\r\n  While (I<=L) do\r\n    case S[I] of\r\n      #10: begin\r\n          if Style in [tlbsCRLF,tlbsCR] then\r\n            Add(#13);\r\n          if Style=tlbsCRLF then\r\n            Add(#10);\r\n          Inc(I);\r\n          end;\r\n     #13: begin\r\n          if Style=tlbsCRLF then\r\n            Add(#13);\r\n          Add(#10);\r\n          Inc(I);\r\n          if S[I]=#10 then\r\n            Inc(I);\r\n          end;\r\n    else\r\n      Add(S[i]);\r\n      Inc(I);\r\n    end;\r\n  Result:=Res;\r\nend;\r\n\r\nfunction WrapText(const Line, BreakStr: string; const BreakChars: Array of char;  MaxCol: Integer): string;\r\n\r\nconst\r\n  Quotes = ['''', '\"'];\r\n\r\nVar\r\n  L : String;\r\n  C,LQ,BC : Char;\r\n  P,BLen,Len : Integer;\r\n  HB,IBC : Boolean;\r\n\r\nbegin\r\n  Result:='';\r\n  L:=Line;\r\n  Blen:=Length(BreakStr);\r\n  If (BLen>0) then\r\n    BC:=BreakStr[1]\r\n  else\r\n    BC:=#0;\r\n  Len:=Length(L);\r\n  While (Len>0) do\r\n    begin\r\n    P:=1;\r\n    LQ:=#0;\r\n    HB:=False;\r\n    IBC:=False;\r\n    While ((P<=Len) and ((P<=MaxCol) or not IBC)) and ((LQ<>#0) or Not HB) do\r\n      begin\r\n      C:=L[P];\r\n      If (C=LQ) then\r\n        LQ:=#0\r\n      else If (C in Quotes) then\r\n        LQ:=C;\r\n      If (LQ<>#0) then\r\n        Inc(P)\r\n      else\r\n        begin\r\n        HB:=((C=BC) and (BreakStr=Copy(L,P,BLen)));\r\n        If HB then\r\n          Inc(P,Blen)\r\n        else\r\n          begin\r\n          If (P>=MaxCol) then\r\n            IBC:=CharInSet(C,BreakChars);\r\n          Inc(P);\r\n          end;\r\n        end;\r\n//      Writeln('\"',C,'\" : IBC : ',IBC,' HB  : ',HB,' LQ  : ',LQ,' P>MaxCol : ',P>MaxCol);\r\n      end;\r\n    Result:=Result+Copy(L,1,P-1);\r\n    Delete(L,1,P-1);\r\n    Len:=Length(L);\r\n    If (Len>0) and Not HB then\r\n      Result:=Result+BreakStr;\r\n    end;\r\nend;\r\n\r\nfunction WrapText(const Line: string; MaxCol: Integer): string;\r\n\r\nbegin\r\n  Result:=WrapText(Line,sLineBreak, [' ', '-', #9], MaxCol);\r\nend;\r\n\r\n\r\nfunction GetEnvironmentVariable(const EnvVar: String): String;\r\nbegin\r\n  if Assigned(OnGetEnvironmentVariable) then\r\n    Result:=OnGetEnvironmentVariable(EnvVar)\r\n  else\r\n    Result:='';\r\nend;\r\n\r\nfunction GetEnvironmentVariableCount: Integer;\r\nbegin\r\n  if Assigned(OnGetEnvironmentVariableCount) then\r\n    Result:=OnGetEnvironmentVariableCount()\r\n  else\r\n    Result:=0;\r\nend;\r\n\r\nfunction GetEnvironmentString(Index: Integer): String;\r\nbegin\r\n  if Assigned(OnGetEnvironmentString) then\r\n    Result:=OnGetEnvironmentString(Index)\r\n  else\r\n    Result:='';\r\nend;\r\n\r\n{ Date/Time routines}\r\n\r\nFunction DoEncodeDate(Year, Month, Day: Word): longint;\r\n\r\nVar\r\n  D : TDateTime;\r\n\r\nbegin\r\n  If TryEncodeDate(Year,Month,Day,D) then\r\n    Result:=Trunc(D)\r\n  else\r\n    Result:=0;\r\nend;\r\n\r\nfunction DoEncodeTime(Hour, Minute, Second, MilliSecond: word): TDateTime;\r\n\r\nbegin\r\n  If not TryEncodeTime(Hour,Minute,Second,MilliSecond,Result) then\r\n    Result:=0;\r\nend;\r\n\r\nFunction DateTimeToJSDate(aDateTime : TDateTime) : TJSDate;\r\n\r\nVar\r\n  Y,M,D,h,n,s,z : Word;\r\n\r\nbegin\r\n  DecodeDate(Trunc(aDateTime),Y,M,D);\r\n  DecodeTime(Frac(aDateTime),H,N,S,Z);\r\n  Result:=TJSDate.New(Y,M,D,h,n,s,z);\r\nend;\r\n\r\nFunction JSDatetoDateTime(ADate: TJSDate) : TDateTime;\r\n\r\nbegin\r\n  Result:=EncodeDate(ADate.FullYear,ADate.Month+1,ADate.Date) +\r\n          EncodeTime(ADate.Hours,ADate.Minutes,ADate.Seconds,ADate.Milliseconds);\r\nend;\r\n\r\n\r\n{   ComposeDateTime converts a Date and a Time into one TDateTime   }\r\nfunction ComposeDateTime(Date,Time : TDateTime) : TDateTime;\r\n\r\nbegin\r\n  if Date < 0 then\r\n    Result := trunc(Date) - Abs(frac(Time))\r\n  else\r\n    Result := trunc(Date) + Abs(frac(Time));\r\nend;\r\n\r\nFunction TryEncodeDate(Year,Month,Day : Word; Out Date : TDateTime) : Boolean;\r\n\r\nvar\r\n  c, ya: LongWord;\r\nbegin\r\n  Result:=(Year>0) and (Year<10000) and\r\n          (Month >= 1) and (Month<=12) and\r\n          (Day>0) and (Day<=MonthDays[IsleapYear(Year),Month]);\r\n If Result then\r\n   begin\r\n     if month > 2 then\r\n      Dec(Month,3)\r\n     else\r\n      begin\r\n        Inc(Month,9);\r\n        Dec(Year);\r\n      end;\r\n     c:= Year DIV 100;\r\n     ya:= Year - 100*c;\r\n     Date := (146097*c) SHR 2 + (1461*ya) SHR 2 + (153*LongWord(Month)+2) DIV 5 + LongWord(Day);\r\n     // Note that this line can't be part of the line above, since TDateTime is\r\n     // signed and c and ya are not\r\n     Date := Date - 693900;\r\n   end\r\nend;\r\n\r\nfunction TryEncodeTime(Hour, Min, Sec, MSec:word; Out Time : TDateTime) : boolean;\r\n\r\nbegin\r\n  Result:=(Hour<24) and (Min<60) and (Sec<60) and (MSec<1000);\r\n  If Result then\r\n    Time:=TDateTime(LongWord(Hour)*3600000+LongWord(Min)*60000+LongWord(Sec)*1000+MSec)/MSecsPerDay;\r\nend;\r\n\r\n{   EncodeDate packs three variables Year, Month and Day into a\r\n    TDateTime value the result is the number of days since 12/30/1899   }\r\n\r\nfunction EncodeDate(Year, Month, Day: word): TDateTime;\r\n\r\nbegin\r\n  If Not TryEncodeDate(Year,Month,Day,Result) then\r\n    Raise EConvertError.CreateFmt('%s-%s-%s is not a valid date specification',\r\n                              [IntToStr(Year),IntToStr(Month),IntToStr(Day)]);\r\nend;\r\n\r\n{   EncodeTime packs four variables Hour, Minute, Second and MilliSecond into\r\n    a TDateTime value     }\r\n\r\nfunction EncodeTime(Hour, Minute, Second, MilliSecond:word):TDateTime;\r\n\r\nbegin\r\n  If not TryEncodeTime(Hour,Minute,Second,MilliSecond,Result) then\r\n    Raise EConvertError.CreateFmt('%s:%s:%s.%s is not a valid time specification',\r\n                              [IntToStr(Hour),IntToStr(Minute),IntToStr(Second),IntToStr(MilliSecond)]);\r\nend;\r\n\r\n\r\n{   DecodeDate unpacks the value Date into three values:\r\n    Year, Month and Day   }\r\n\r\nprocedure DecodeDate(Date: TDateTime; out Year, Month, Day: word);\r\nvar\r\n  ly,ld,lm,j : LongWord;\r\nbegin\r\n  if Date <= -datedelta then  // If Date is before 1-1-1 then return 0-0-0\r\n    begin\r\n    Year := 0;\r\n    Month := 0;\r\n    Day := 0;\r\n    end\r\n  else\r\n    begin\r\n    if Date>0 then\r\n      Date:=(Date+(1/(msecsperday*2)))\r\n    else\r\n      Date:=Date-(1/(msecsperday*2));\r\n    if Date>MaxDateTime then\r\n      Date:=MaxDateTime;\r\n//       Raise EConvertError.CreateFmt('%f is not a valid TDatetime encoding, maximum value is %f.',[Date,MaxDateTime]);\r\n    j := ((Trunc(Date) + 693900) SHL 2)-1;\r\n    ly:= j DIV 146097;\r\n    j:= j - 146097 * LongWord(ly);\r\n    ld := j SHR 2;\r\n    j:=(ld SHL 2 + 3) DIV 1461;\r\n    ld:= ((ld SHL 2) + 7 - 1461*j) SHR 2;\r\n    lm:=(5 * ld-3) DIV 153;\r\n    ld:= (5 * ld +2 - 153*lm) DIV 5;\r\n    ly:= 100 * LongWord(ly) + j;\r\n    if lm < 10 then\r\n     inc(lm,3)\r\n    else\r\n      begin\r\n        dec(lm,9);\r\n        inc(ly);\r\n      end;\r\n    year:=ly;\r\n    month:=lm;\r\n    day:=ld;\r\n    end;\r\nend;\r\n\r\n\r\nfunction DecodeDateFully(const DateTime: TDateTime; out Year, Month, Day, DOW: Word): Boolean;\r\nbegin\r\n  DecodeDate(DateTime,Year,Month,Day);\r\n  DOW:=DayOfWeek(DateTime);\r\n  Result:=IsLeapYear(Year);\r\nend;\r\n  {   DateTimeToTimeStamp converts DateTime to a TTimeStamp   }\r\n\r\nfunction DateTimeToTimeStamp(DateTime: TDateTime): TTimeStamp;\r\n\r\nVar\r\n  D : Double;\r\nbegin\r\n  D:=DateTime * Double(MSecsPerDay);\r\n  if D<0 then\r\n    D:=D-0.5\r\n  else\r\n    D:=D+0.5;\r\n  result.Time := Trunc(Abs(Trunc(D)) Mod MSecsPerDay);\r\n  result.Date := DateDelta + (Trunc(D) div MSecsPerDay);\r\nend;\r\n\r\n{   TimeStampToDateTime converts TimeStamp to a TDateTime value   }\r\n\r\nfunction TimeStampToDateTime(const TimeStamp: TTimeStamp): TDateTime;\r\nbegin\r\n  Result := ComposeDateTime(TimeStamp.Date - DateDelta,TimeStamp.Time/MSecsPerDay)\r\nend;\r\n\r\n{   MSecsToTimeStamp   }\r\n\r\nfunction MSecsToTimeStamp(MSecs: NativeInt): TTimeStamp;\r\nbegin\r\n  result.Date := Trunc(msecs/msecsperday);\r\n  msecs:= msecs-NativeInt(result.date)*msecsperday;\r\n  result.Time := Round(MSecs);\r\nend;\r\n\r\nfunction TimeStampToMSecs(const TimeStamp: TTimeStamp): NativeInt;\r\nbegin\r\n  result := TimeStamp.Time + (timestamp.date*msecsperday);\r\nend ;\r\n\r\n\r\n\r\n{   DecodeTime unpacks Time into four values:\r\n    Hour, Minute, Second and MilliSecond    }\r\n\r\nprocedure DecodeTime(Time: TDateTime; out Hour, Minute, Second, MilliSecond: word);\r\nVar\r\n  l : LongWord;\r\nbegin\r\n  l := DateTimeToTimeStamp(Time).Time;\r\n  Hour   := l div 3600000;\r\n  l := l mod 3600000;\r\n  Minute := l div 60000;\r\n  l := l mod 60000;\r\n  Second := l div 1000;\r\n  l := l mod 1000;\r\n  MilliSecond := l;\r\nend;\r\n\r\n{   DateTimeToSystemTime converts DateTime value to SystemTime   }\r\n\r\nprocedure DateTimeToSystemTime(DateTime: TDateTime; out SystemTime: TSystemTime);\r\nbegin\r\n  DecodeDateFully(DateTime, SystemTime.Year, SystemTime.Month, SystemTime.Day,SystemTime.DayOfWeek);\r\n  DecodeTime(DateTime, SystemTime.Hour, SystemTime.Minute, SystemTime.Second, SystemTime.MilliSecond);\r\n  Dec(SystemTime.DayOfWeek);\r\nend ;\r\n\r\n{   SystemTimeToDateTime converts SystemTime to a TDateTime value   }\r\n\r\nfunction SystemTimeToDateTime(const SystemTime: TSystemTime): TDateTime;\r\nbegin\r\n  result := ComposeDateTime(DoEncodeDate(SystemTime.Year, SystemTime.Month, SystemTime.Day),\r\n                            DoEncodeTime(SystemTime.Hour, SystemTime.Minute, SystemTime.Second, SystemTime.MilliSecond));\r\nend ;\r\n\r\nfunction DayOfWeek(DateTime: TDateTime): integer;\r\nbegin\r\n  Result := 1 + ((Trunc(DateTime) - 1) mod 7);\r\n  If (Result<=0) then\r\n    Inc(Result,7);\r\nend;\r\n\r\n\r\n\r\nfunction Now: TDateTime;\r\nbegin\r\n  Result:=JSDateToDateTime(TJSDate.New());\r\nend;\r\n\r\nfunction Date: TDateTime;\r\n\r\nbegin\r\n  Result:=Trunc(Now);\r\nend;\r\n\r\nfunction Time: TDateTime;\r\nbegin\r\n  Result:=Now-Date;\r\nend ;\r\n\r\n{   IncMonth increments DateTime with NumberOfMonths months,\r\n    NumberOfMonths can be less than zero   }\r\n\r\nfunction IncMonth(const DateTime: TDateTime; NumberOfMonths: integer = 1 ): TDateTime;\r\nvar\r\n  Year, Month, Day : word;\r\nbegin\r\n  DecodeDate(DateTime, Year, Month, Day);\r\n  IncAMonth(Year, Month, Day, NumberOfMonths);\r\n  result := ComposeDateTime(DoEncodeDate(Year, Month, Day), DateTime);\r\nend ;\r\n\r\n{   IncAMonth is the same as IncMonth, but operates on decoded date  }\r\n\r\nprocedure IncAMonth(var Year, Month, Day: Word; NumberOfMonths: Integer = 1);\r\nvar\r\n  TempMonth, S: Integer;\r\nbegin\r\n  If NumberOfMonths>=0 then\r\n    s:=1\r\n  else\r\n    s:=-1;\r\n  inc(Year,(NumberOfMonths div 12));\r\n  TempMonth:=Month+(NumberOfMonths mod 12)-1;\r\n  if (TempMonth>11) or\r\n     (TempMonth<0) then\r\n   begin\r\n     Dec(TempMonth, S*12);\r\n     Inc(Year, S);\r\n   end;\r\n  Month:=TempMonth+1;          {   Months from 1 to 12   }\r\n  If (Day>MonthDays[IsLeapYear(Year)][Month]) then\r\n    Day:=MonthDays[IsLeapYear(Year)][Month];\r\nend;\r\n\r\n{  IsLeapYear returns true if Year is a leap year   }\r\n\r\nfunction IsLeapYear(Year: Word): boolean;\r\nbegin\r\n  Result := (Year mod 4 = 0) and ((Year mod 100 <> 0) or (Year mod 400 = 0));\r\nend;\r\n\r\n{  DateToStr returns a string representation of Date using ShortDateFormat   }\r\n\r\nfunction DateToStr(Date: TDateTime): string;\r\nbegin\r\n  Result:=FormatDateTime('ddddd', Date);\r\nend ;\r\n\r\n{  TimeToStr returns a string representation of Time using LongTimeFormat   }\r\n\r\nfunction TimeToStr(Time: TDateTime): string;\r\nbegin\r\n  Result:=FormatDateTime('tt',Time);\r\nend ;\r\n\r\n{   DateTimeToStr returns a string representation of DateTime using LongDateTimeFormat   }\r\n\r\nVar\r\n  DateTimeToStrFormat : Array[Boolean] of string = ('c','f');\r\n\r\nfunction DateTimeToStr(DateTime: TDateTime; ForceTimeIfZero : Boolean = False): string;\r\nbegin\r\n  Result:=FormatDateTime(DateTimeToStrFormat[ForceTimeIfZero], DateTime)\r\nend ;\r\n\r\n\r\n{   StrToDate converts the string S to a TDateTime value\r\n    if S does not represent a valid date value\r\n    an EConvertError will be raised   }\r\n\r\nfunction IntStrToDate(Out ErrorMsg : String; const S: String; const useformat : string; separator : char): TDateTime;\r\n\r\nConst\r\n  WhiteSpace = ' '#8#9#10#12#13;\r\n  Digits = '0123456789';\r\n\r\n  procedure FixErrorMsg(const errmarg : String);\r\n\r\n  begin\r\n    ErrorMsg:=Format(SInvalidDateFormat,[errmarg]);\r\n  end;\r\n\r\nvar\r\n   df:string;\r\n   d,m,y,ly,ld,lm:word;\r\n   n,i,len:longint;\r\n   c: integer;\r\n   dp,mp,yp,which : Byte;\r\n   s1:string;\r\n   values: array of integer;\r\n   YearMoreThenTwoDigits : boolean;\r\n\r\nbegin\r\n  SetLength(values,4);\r\n  Result:=0;\r\n  Len:=Length(S);\r\n  ErrorMsg:='';\r\n  While (Len>0) and (Pos(S[Len],WhiteSpace)>0) do\r\n    Dec(len);\r\n  if (Len=0) then\r\n    begin\r\n    FixErrorMsg(S);\r\n    exit;\r\n    end;\r\n  YearMoreThenTwoDigits := False;\r\n  if separator = #0 then\r\n    if (DateSeparator<>#0) then\r\n      separator := DateSeparator\r\n    else\r\n      separator:='-';\r\n  // Writeln('Separator: ',Separator);\r\n  df := UpperCase(useFormat);\r\n  { Determine order of D,M,Y }\r\n  yp:=0;\r\n  mp:=0;\r\n  dp:=0;\r\n  Which:=0;\r\n  i:=0;\r\n  while (i<Length(df)) and (Which<3) do\r\n   begin\r\n     inc(i);\r\n     Case df[i] of\r\n       'Y' :\r\n         if yp=0 then\r\n          begin\r\n            Inc(Which);\r\n            yp:=which;\r\n          end;\r\n       'M' :\r\n         if mp=0 then\r\n          begin\r\n            Inc(Which);\r\n            mp:=which;\r\n          end;\r\n       'D' :\r\n         if dp=0 then\r\n          begin\r\n            Inc(Which);\r\n            dp:=which;\r\n          end;\r\n     end;\r\n   end;\r\n  // Writeln('YP: ',Yp,', MP: ',Mp,', DP: ',DP);\r\n  for i := 1 to 3 do\r\n    values[i] := 0;\r\n  s1 := '';\r\n  n := 0;\r\n  for i := 1 to len do\r\n     begin\r\n     if Pos(s[i],Digits)>0 then\r\n       s1 := s1 + s[i];\r\n     { space can be part of the shortdateformat, and is defaultly in slovak\r\n       windows, therefor it shouldn't be taken as separator (unless so specified)\r\n       and ignored }\r\n     if (Separator <> ' ') and (s[i] = ' ') then\r\n       Continue;\r\n     if (s[i] = separator) or ((i = len) and (Pos(s[i],Digits)>0)) then\r\n      begin\r\n        inc(n);\r\n        if n>3 then\r\n          begin\r\n//            Writeln('More than 3 separators');\r\n            FixErrorMsg(S);\r\n            exit;\r\n          end;\r\n         // Check if the year has more then two digits (if n=yp, then we are evaluating the year.)\r\n        if (n=yp) and (length(s1)>2) then YearMoreThenTwoDigits := True;\r\n        val(s1, values[n], c);\r\n        if c<>0 then\r\n          begin\r\n//            Writeln('S1 not a number ',S1);\r\n            FixErrorMsg(s);\r\n            Exit;\r\n          end;\r\n        s1 := '';\r\n      end\r\n     else if (Pos(s[i],Digits)=0) then\r\n       begin\r\n//       Writeln('Not a number at pos ',I,' ',S[i]);\r\n       FixErrorMsg(s);\r\n       Exit;\r\n       end;\r\n   end ;\r\n//   Writeln('Which : ',Which,' N : ',N);\r\n   if (Which<3) and (N>Which) then\r\n    begin\r\n    FixErrorMsg(s);\r\n    Exit;\r\n    end;\r\n  // Fill in values.\r\n  DecodeDate(Date,Ly,LM,LD);\r\n  If N=3 then\r\n   begin\r\n     y:=values[yp];\r\n     m:=values[mp];\r\n     d:=values[dp];\r\n   end\r\n  Else\r\n  begin\r\n    Y:=ly;\r\n    If n<2 then\r\n     begin\r\n       d:=values[1];\r\n       m := LM;\r\n     end\r\n    else\r\n     If dp<mp then\r\n      begin\r\n        d:=values[1];\r\n        m:=values[2];\r\n      end\r\n    else\r\n      begin\r\n        d:=values[2];\r\n        m:=values[1];\r\n      end;\r\n  end;\r\n  if (y >= 0) and (y < 100) and not YearMoreThenTwoDigits then\r\n    begin\r\n    ly := ly - TwoDigitYearCenturyWindow;\r\n    Inc(Y, ly div 100 * 100);\r\n    if (TwoDigitYearCenturyWindow > 0) and (Y < ly) then\r\n      Inc(Y, 100);\r\n    end;\r\n  if not TryEncodeDate(y, m, d, result) then\r\n    errormsg:=SErrInvalidDate;\r\nend;\r\n\r\nfunction StrToDate(const S: String; const useformat : string; separator : char): TDateTime;\r\nVar\r\n  MSg : String;\r\nbegin\r\n  Result:=IntStrToDate(Msg,S,useFormat,Separator);\r\n  If (Msg<>'') then\r\n    Raise EConvertError.Create(Msg);\r\nend;\r\n\r\nfunction StrToDate(const S: String; separator : char): TDateTime;\r\nbegin\r\n    result := StrToDate(S,ShortDateFormat,separator)\r\nend;\r\n\r\nfunction StrToDate(const S: String): TDateTime;\r\nbegin\r\n  result := StrToDate(S,ShortDateFormat,#0);\r\nend;\r\n\r\n{   StrToTime converts the string S to a TDateTime value\r\n    if S does not represent a valid time value an\r\n    EConvertError will be raised   }\r\n\r\n\r\nfunction IntStrToTime(Out ErrorMsg : String; const S: String; Len : integer; separator : char): TDateTime;\r\n\r\nconst\r\n  AMPM_None = 0;\r\n  AMPM_AM = 1;\r\n  AMPM_PM = 2;\r\n  tiHour = 0;\r\n  tiMin = 1;\r\n  tiSec = 2;\r\n  tiMSec = 3;\r\n\r\ntype\r\n  TTimeValues = array of Word;\r\n\r\nvar\r\n   AmPm: integer;\r\n   TimeValues: TTimeValues;\r\n\r\n\r\n   function SplitElements(out TimeValues: TTimeValues; out AmPm: Integer): Boolean;\r\n   //Strict version. It does not allow #32 as Separator, it will treat it as whitespace always\r\n   const\r\n     Digits = '0123456789';\r\n   var\r\n      Cur, Offset, ElemLen, Err, TimeIndex, FirstSignificantDigit: Integer;\r\n      Value: Integer;\r\n      DigitPending, MSecPending: Boolean;\r\n      AmPmStr: String;\r\n      CurChar: Char;\r\n      I : Integer;\r\n      allowedchars : string;\r\n\r\n   begin\r\n     Result := False;\r\n     AmPm := AMPM_None; //No Am or PM in string found yet\r\n     MSecPending := False;\r\n     TimeIndex := 0; //indicating which TTimeValue must be filled next\r\n     For I:=tiHour to tiMSec do\r\n      TimeValues[i]:=0;\r\n     Cur := 1;\r\n     //skip leading blanks\r\n     While (Cur < Len) and (S[Cur] =#32) do Inc(Cur);\r\n     Offset := Cur;\r\n     //First non-blank cannot be Separator or DecimalSeparator\r\n     if (Cur > Len - 1) or (S[Cur] = Separator) or (S[Cur] = Decimalseparator) then\r\n       begin\r\n       // Writeln('Error in sep S[Cur]',S[Cur],' ',separator,' ',GetDecimalSeparator);\r\n       Exit;\r\n       end;\r\n     DigitPending := (Pos(S[Cur],Digits)>0);\r\n     While (Cur <= Len) do\r\n     begin\r\n       //writeln;\r\n       // writeln('Main While loop:  Cur = ',Cur,' S[Cur] = \"',S[Cur],'\" Len = ',Len,' separator : ',Separator);\r\n       CurChar := S[Cur];\r\n       if Pos(CurChar,Digits)>0 then\r\n       begin//Digits\r\n         //HH, MM, SS, or Msec?\r\n         // writeln('Digit: ', CurChar);\r\n         //Digits are only allowed after starting Am/PM or at beginning of string or after Separator\r\n         //and TimeIndex must be <= tiMSec\r\n         //Uncomment \"or (#32 = Separator)\" and it will allllow #32 as separator\r\n         if (not (DigitPending {or (#32 = Separator)})) or (TimeIndex > tiMSec) then\r\n            begin\r\n            // Writeln('DigitPending',ElemLen);\r\n            Exit;\r\n            end;\r\n         OffSet := Cur;\r\n         if (CurChar <> '0') then FirstSignificantDigit := OffSet else FirstSignificantDigit := -1;\r\n         while (Cur < Len) and (Pos(S[Cur + 1],Digits)>0) do\r\n         begin\r\n           //Mark first Digit that is not '0'\r\n           if (FirstSignificantDigit = -1) and (S[Cur] <> '0') then FirstSignificantDigit := Cur;\r\n           Inc(Cur);\r\n         end;\r\n         if (FirstSignificantDigit = -1) then FirstSignificantDigit := Cur;\r\n         ElemLen := 1+ Cur - FirstSignificantDigit;\r\n         // writeln('  S[FirstSignificantDigit] = ',S[FirstSignificantDigit], ' S[Cur] = ',S[Cur],' ElemLen = ',ElemLen,' -> ', S[Offset], ElemLen);\r\n         // writeln('  Cur = ',Cur);\r\n         //this way we know that Val() will never overflow Value !\r\n         if (ElemLen <= 2) or ((ElemLen <= 3) and (TimeIndex = tiMSec) ) then\r\n         begin\r\n           Val(Copy(S,FirstSignificantDigit, ElemLen), Value, Err);\r\n           // writeln('  Value = ',Value,' HH = ',TimeValues[0],' MM = ',TimeValues[1],' SS = ',TimeValues[2],' MSec = ',Timevalues[3]);\r\n           //This is safe now, because we know Value < High(Word)\r\n           TimeValues[TimeIndex] := Value;\r\n           Inc(TimeIndex);\r\n           DigitPending := False;\r\n         end\r\n         else\r\n           begin\r\n           // Writeln('Wrong elemlen: ',ElemLen, ' timeIndex: ',timeindex);\r\n           Exit; //Value to big, so it must be a wrong timestring\r\n           end;\r\n       end//Digits\r\n       else if (CurChar = #32) then\r\n       begin\r\n         //writeln('#32');\r\n         //just skip, but we must adress this, or it will be parsed by either AM/PM or Separator\r\n       end\r\n       else if (CurChar = Separator) then\r\n       begin\r\n         // writeln('Separator ',Separator);\r\n         if DigitPending or (TimeIndex > tiSec) then\r\n           begin\r\n           // Writeln ('DigitPending ',DigitPending,' or (TimeIndex',Timeindex,' > tiSec,', tiSec,')');\r\n           Exit;\r\n           end;\r\n         DigitPending := True;\r\n         MSecPending := False;\r\n       end\r\n       else if (CurChar = DecimalSeparator) then\r\n       begin\r\n         //writeln('DecimalSeparator');\r\n         if DigitPending or MSecPending or (TimeIndex <> tiMSec) then\r\n            begin\r\n            // Writeln('DigitPending ',DigitPending,' or MSecPending ',MSecPending,' (',TimeIndex,',Timeindex, >', tiMSec,'  tiSec)');\r\n            Exit;\r\n            end;\r\n         DigitPending := True;\r\n         MSecPending := True;\r\n       end\r\n       else\r\n       begin//AM/PM?\r\n         //None of the above, so this char _must_ be the start of AM/PM string\r\n         //If we already have found AM/PM or we expect a digit then then timestring must be wrong at this point\r\n         //writeln('AM/PM?');\r\n         if (AmPm <> AMPM_None) or DigitPending then\r\n           begin\r\n           // Writeln('AmPm <> AMPM_None) or DigitPending');\r\n           Exit;\r\n           end;\r\n         OffSet := Cur;\r\n         allowedchars:=DecimalSeparator+' ';\r\n         if Separator<>#0 then\r\n           allowedchars:=allowedchars+Separator;\r\n         while (Cur < Len -1) and (Pos(S[Cur + 1],AllowedChars)=0)\r\n           and (Pos(S[Cur + 1],Digits)=0) do Inc(Cur);\r\n         ElemLen := 1 + Cur - OffSet;\r\n         // writeln('  S[Offset] = ',S[1+Offset], ' S[Cur] = ',S[Cur],' ElemLen = ',ElemLen,' -> ', S[1+Offset], ElemLen);\r\n         // writeln('  Cur = ',Cur, 'S =',S);\r\n         AmPmStr := Copy(S,1+OffSet, ElemLen);\r\n\r\n         // writeln('AmPmStr = ',ampmstr,' (',length(ampmstr),')');\r\n         //We must compare to TimeAMString before hardcoded 'AM' for delphi compatibility\r\n         //Also it is perfectly legal, though insane to have TimeAMString = 'PM' and vice versa\r\n         if (CompareText(AmPmStr, TimeAMString) = 0) then AmPm := AMPM_AM\r\n         else if (CompareText(AmPmStr, TimePMString) = 0) then AmPm := AMPM_PM\r\n         else if (CompareText(AmPmStr, 'AM') = 0) then AmPm := AMPM_AM\r\n         else if (CompareText(AmPmStr, 'PM') = 0) then AmPm := AMPM_PM\r\n         else\r\n           begin\r\n           // Writeln('No timestring ',AmPmStr);\r\n           Exit; //If text does not match any of these, timestring must be wrong;\r\n           end;\r\n         //if AM/PM is at beginning of string, then a digit is mandatory after it\r\n         if (TimeIndex = tiHour) then\r\n         begin\r\n           DigitPending := True;\r\n         end\r\n         //otherwise, no more TimeValues allowed after this\r\n         else\r\n         begin\r\n           TimeIndex := tiMSec + 1;\r\n           DigitPending := False;\r\n         end;\r\n       end;//AM/PM\r\n       Inc(Cur)\r\n     end;//while\r\n\r\n     //If we arrive here, parsing the elements has been successfull\r\n     //if not at least Hours specified then input is not valid\r\n     //when am/pm is specified Hour must be <= 12 and not 0\r\n     if (TimeIndex = tiHour) or ((AmPm <> AMPM_None) and ((TimeValues[tiHour] > 12) or (TimeValues[tiHour] = 0))) or DigitPending then\r\n       Exit;\r\n     Result := True;\r\n   end;\r\n\r\nbegin\r\n  setlength(timevalues,4);\r\n  if separator = #0 then\r\n     if (TimeSeparator<>#0) then\r\n       separator := TimeSeparator\r\n      else\r\n       separator:=':';\r\n  AmPm := AMPM_None;\r\n  if not SplitElements(TimeValues, AmPm) then\r\n  begin\r\n    ErrorMsg:=Format(SErrInvalidTimeFormat,[S]);\r\n    Exit;\r\n  end;\r\n  if (AmPm=AMPM_PM) and (TimeValues[tiHour]<>12) then Inc(TimeValues[tiHour], 12)\r\n  else if (AmPm=AMPM_AM) and (TimeValues[tiHour]=12) then TimeValues[tiHour]:=0;\r\n  // Writeln(      TimeValues[tiHour], TimeValues[tiMin], TimeValues[tiSec], TimeValues[tiMSec]);\r\n  if not TryEncodeTime(TimeValues[tiHour], TimeValues[tiMin], TimeValues[tiSec], TimeValues[tiMSec], result) Then\r\n\r\n    ErrorMsg:=Format(SErrInvalidTimeFormat,[S]);\r\nend ;\r\n\r\nfunction StrToTime(const s: String; separator : char): TDateTime;\r\n\r\nVar\r\n  Msg : String;\r\n\r\nbegin\r\n  Result:=IntStrToTime(Msg,S,Length(S),Separator);\r\n  If (Msg<>'') then\r\n    Raise EConvertError.Create(Msg);\r\nend;\r\n\r\nfunction StrToTime(const s: String): TDateTime;\r\nbegin\r\n   result:= StrToTime(s, TimeSeparator);\r\nend;\r\n\r\n{   StrToDateTime converts the string S to a TDateTime value\r\n    if S does not represent a valid date and/or time value\r\n    an EConvertError will be raised   }\r\n\r\nfunction SplitDateTimeStr(DateTimeStr: String; out DateStr, TimeStr: String): Integer;\r\n\r\n{ Helper function for StrToDateTime\r\n  Pre-condition\r\n    Date is before Time\r\n    If either Date or Time is omitted then see what fits best, a time or a date (issue #0020522)\r\n    Date and Time are separated by whitespace (space Tab, Linefeed or carriage return)\r\n    FS.DateSeparator can be the same as FS.TimeSeparator (issue #0020522)\r\n    If they are both #32 and TrimWhite(DateTimeStr) contains a #32 a date is assumed.\r\n  Post-condition\r\n    DateStr holds date as string or is empty\r\n    TimeStr holds time as string or is empty\r\n    Result = number of strings returned, 0 = error\r\n}\r\nconst\r\n  WhiteSpace = #9#10#13#32;\r\n\r\nvar\r\n  p: Integer;\r\n  DummyDT: TDateTime;\r\nbegin\r\n  Result := 0;\r\n  DateStr := '';\r\n  TimeStr := '';\r\n  DateTimeStr := Trim(DateTimeStr);\r\n  if Length(DateTimeStr) = 0 then exit;\r\n  if (DateSeparator = #32) and (TimeSeparator = #32) and (Pos(#32, DateTimeStr) > 0) then\r\n    begin\r\n    DateStr:=DateTimeStr;\r\n    {\r\n      Assume a date: dd [mm [yy]].\r\n      Really fancy would be counting the number of whitespace occurrences and decide\r\n      and split accordingly\r\n    }\r\n    Exit(1);\r\n    end;\r\n  p:=1;\r\n  //find separator\r\n  if (DateSeparator<>#32) then\r\n    begin\r\n    while (p<Length(DateTimeStr)) and (not (Pos(DateTimeStr[p+1],WhiteSpace)>0)) do\r\n      Inc(p);\r\n    end\r\n  else\r\n    begin\r\n    p:=Pos(TimeSeparator, DateTimeStr);\r\n    if (p<>0) then\r\n      repeat\r\n        Dec(p);\r\n      until (p=0) or (Pos(DateTimeStr[p],WhiteSpace)>0);\r\n    end;\r\n  //Always fill DateStr, it eases the algorithm later\r\n  if (p=0) then\r\n    p:=Length(DateTimeStr);\r\n  DateStr:=Copy(DateTimeStr,1,p);\r\n  TimeStr:=Trim(Copy(DateTimeStr,p+1,100));\r\n  if (Length(TimeStr)<>0) then\r\n    Result:=2\r\n  else\r\n    begin\r\n    Result:=1; //found 1 string\r\n    // 2 cases when DateTimeStr only contains a time:\r\n    // Date/time separator differ, and string contains a timeseparator\r\n    // Date/time separators are equal, but transformation to date fails.\r\n    if ((DateSeparator<>TimeSeparator) and (Pos(TimeSeparator,DateStr) > 0))\r\n       or ((DateSeparator=TimeSeparator) and (not TryStrToDate(DateStr, DummyDT)))  then\r\n      begin\r\n      TimeStr := DateStr;\r\n      DateStr := '';\r\n      end;\r\n    end;\r\nend;\r\n\r\nfunction StrToDateTime(const s: String): TDateTime;\r\n\r\nvar\r\n  TimeStr, DateStr: String;\r\n  PartsFound: Integer;\r\nbegin\r\n  PartsFound := SplitDateTimeStr(S, DateStr, TimeStr);\r\n  case PartsFound of\r\n    0: Result:=StrToDate('');\r\n    1: if (Length(DateStr) > 0) then\r\n         Result := StrToDate(DateStr,ShortDateFormat,DateSeparator)\r\n       else\r\n         Result := StrToTime(TimeStr);\r\n    2: Result := ComposeDateTime(StrTodate(DateStr,ShortDateFormat,DateSeparator),\r\n                                  StrToTime(TimeStr));\r\n  end;\r\nend;\r\n\r\nFunction FormatDateTime(const FormatStr: string; const DateTime: TDateTime) : String;\r\n\r\n  procedure StoreStr(APos,Len: Integer);\r\n  begin\r\n//    Writeln('StoreStr: ',Result,'+',Copy(FormatStr,APos,Len));\r\n    Result:=Result+Copy(FormatStr,APos,Len);\r\n  end;\r\n\r\n  procedure StoreString(const AStr: string);\r\n\r\n  begin\r\n//    Writeln('StoreString: ',Result,'+',AStr);\r\n    Result:=Result+AStr;\r\n  end;\r\n\r\n  procedure StoreInt(Value, Digits: Integer);\r\n  var\r\n    S: string;\r\n\r\n  begin\r\n    S:=IntToStr(Value);\r\n    While (Length(S)<Digits) do\r\n      S:='0'+S;\r\n    StoreString(S);\r\n  end;\r\n\r\nvar\r\n  Year, Month, Day, DayOfWeek, Hour, Minute, Second, MilliSecond: word;\r\n\r\n  procedure StoreFormat(const FormatStr: string; Nesting: Integer; TimeFlag: Boolean);\r\n  var\r\n    Token, lastformattoken, prevlasttoken: char;\r\n    Count: integer;\r\n    Clock12: boolean;\r\n    tmp: integer;\r\n    isInterval: Boolean;\r\n    P,FormatCurrent,FormatEnd : Integer;\r\n  begin\r\n    if Nesting > 1 then  // 0 is original string, 1 is included FormatString\r\n      Exit;\r\n    FormatCurrent := 1;\r\n    FormatEnd := Length(FormatStr);\r\n    Clock12 := false;\r\n    isInterval := false;\r\n    // look for unquoted 12-hour clock token\r\n    P:=1;\r\n    while P<=FormatEnd do\r\n      begin\r\n      Token := FormatStr[P];\r\n      case Token of\r\n        '''', '\"':\r\n        begin\r\n          Inc(P);\r\n          while (P < FormatEnd) and (FormatStr[P]<>Token) do\r\n            Inc(P);\r\n        end;\r\n        'A', 'a':\r\n        begin\r\n          if (CompareText(Copy(FormatStr,P,3),'A/P')=0) or\r\n             (CompareText(Copy(FormatStr,P,4),'AMPM')=0) or\r\n             (CompareText(Copy(FormatStr,P,5),'AM/PM')=0) then\r\n          begin\r\n            Clock12 := true;\r\n            break;\r\n          end;\r\n        end;\r\n      end;  // case\r\n      Inc(P);\r\n    end ;\r\n    token := #255;\r\n    lastformattoken := ' ';\r\n    prevlasttoken := 'H';\r\n    while FormatCurrent <= FormatEnd do\r\n    begin\r\n      Token := UpperCase(FormatStr[FormatCurrent])[1];\r\n     //  Writeln('Treating token at pos ',FormatCurrent,', : ',Token,' (',FormatStr,')');\r\n      Count := 1;\r\n      P := FormatCurrent + 1;\r\n      case Token of\r\n        '''', '\"':\r\n        begin\r\n          while (P < FormatEnd) and (FormatStr[P]<>Token) do\r\n            Inc(P);\r\n          Inc(P);\r\n          Count := P - FormatCurrent;\r\n          StoreStr(FormatCurrent + 1, Count - 2);\r\n        end ;\r\n        'A':\r\n        begin\r\n          if CompareText(Copy(FormatStr,FormatCurrent,4), 'AMPM') = 0 then\r\n          begin\r\n            Count := 4;\r\n            if Hour < 12 then\r\n              StoreString(TimeAMString)\r\n            else\r\n              StoreString(TimePMString);\r\n          end\r\n          else if CompareText(Copy(FormatStr,FormatCurrent,5), 'AM/PM') = 0 then\r\n          begin\r\n            Count := 5;\r\n            if Hour < 12 then StoreStr(FormatCurrent, 2)\r\n                         else StoreStr(FormatCurrent+3, 2);\r\n          end\r\n          else if CompareText(Copy(FormatStr,FormatCurrent,3), 'A/P') = 0 then\r\n          begin\r\n            Count := 3;\r\n            if Hour < 12 then StoreStr(FormatCurrent, 1)\r\n            else StoreStr(FormatCurrent+2, 1);\r\n          end\r\n          else\r\n            raise EConvertError.Create('Illegal character in format string');\r\n        end ;\r\n        '/':\r\n          begin\r\n           //  Writeln('Detected date separator');\r\n          StoreString(DateSeparator);\r\n          end;\r\n        ':': StoreString(TimeSeparator);\r\n        ' ', 'C', 'D', 'H', 'M', 'N', 'S', 'T', 'Y', 'Z', 'F' :\r\n        begin\r\n          // Writeln(FormatCurrent,' Special Token: ',Token,', Count: ',Count,', P: ',P);\r\n          while (P <= FormatEnd) and (UpperCase(FormatStr[P]) = Token) do\r\n            Inc(P);\r\n          Count := P - FormatCurrent;\r\n          // Writeln(FormatCurrent,' Special Token: ',Token,', Count: ',Count,', P: ',P);\r\n          case Token of\r\n            ' ': StoreStr(FormatCurrent, Count);\r\n            'Y': begin\r\n              if Count > 2 then\r\n                StoreInt(Year, 4)\r\n              else\r\n                StoreInt(Year mod 100, 2);\r\n            end;\r\n            'M': begin\r\n\t      if isInterval and ((prevlasttoken = 'H') or TimeFlag) then\r\n\t        StoreInt(Minute + (Hour + trunc(abs(DateTime))*24)*60, 0)\r\n\t      else\r\n              if (lastformattoken = 'H') or TimeFlag then\r\n              begin\r\n                if Count = 1 then\r\n                  StoreInt(Minute, 0)\r\n                else\r\n                  StoreInt(Minute, 2);\r\n              end\r\n              else\r\n              begin\r\n                case Count of\r\n                  1: StoreInt(Month, 0);\r\n                  2: StoreInt(Month, 2);\r\n                  3: StoreString(ShortMonthNames[Month]);\r\n                else\r\n                  StoreString(LongMonthNames[Month]);\r\n                end;\r\n              end;\r\n            end;\r\n            'D': begin\r\n              case Count of\r\n                1: StoreInt(Day, 0);\r\n                2: StoreInt(Day, 2);\r\n                3: StoreString(ShortDayNames[DayOfWeek]);\r\n                4: StoreString(LongDayNames[DayOfWeek]);\r\n                5: StoreFormat(ShortDateFormat, Nesting+1, False);\r\n              else\r\n                StoreFormat(LongDateFormat, Nesting+1, False);\r\n              end ;\r\n            end ;\r\n            'H':\r\n\t      if isInterval then\r\n\t        StoreInt(Hour + trunc(abs(DateTime))*24, 0)\r\n\t      else\r\n\t      if Clock12 then\r\n              begin\r\n                tmp := hour mod 12;\r\n                if tmp=0 then tmp:=12;\r\n                if Count = 1 then\r\n                  StoreInt(tmp, 0)\r\n                else\r\n                  StoreInt(tmp, 2);\r\n              end\r\n              else begin\r\n                if Count = 1 then\r\n\t\t  StoreInt(Hour, 0)\r\n                else\r\n                  StoreInt(Hour, 2);\r\n              end;\r\n            'N': if isInterval then\r\n\t           StoreInt(Minute + (Hour + trunc(abs(DateTime))*24)*60, 0)\r\n\t\t else\r\n\t\t if Count = 1 then\r\n                   StoreInt(Minute, 0)\r\n                 else\r\n                   StoreInt(Minute, 2);\r\n            'S': if isInterval then\r\n\t           StoreInt(Second + (Minute + (Hour + trunc(abs(DateTime))*24)*60)*60, 0)\r\n\t         else\r\n\t         if Count = 1 then\r\n                   StoreInt(Second, 0)\r\n                 else\r\n                   StoreInt(Second, 2);\r\n            'Z': if Count = 1 then\r\n                   StoreInt(MilliSecond, 0)\r\n                 else\r\n\t\t   StoreInt(MilliSecond, 3);\r\n            'T': if Count = 1 then\r\n\t\t   StoreFormat(ShortTimeFormat, Nesting+1, True)\r\n                 else\r\n\t           StoreFormat(LongTimeFormat, Nesting+1, True);\r\n            'C': begin\r\n                   StoreFormat(ShortDateFormat, Nesting+1, False);\r\n                   if (Hour<>0) or (Minute<>0) or (Second<>0) then\r\n                     begin\r\n                      StoreString(' ');\r\n                      StoreFormat(LongTimeFormat, Nesting+1, True);\r\n                     end;\r\n                 end;\r\n            'F': begin\r\n                   StoreFormat(ShortDateFormat, Nesting+1, False);\r\n                   StoreString(' ');\r\n                   StoreFormat(LongTimeFormat, Nesting+1, True);\r\n                 end;\r\n          end;\r\n\t  prevlasttoken := lastformattoken;\r\n          lastformattoken := token;\r\n        end;\r\n        else\r\n          StoreString(Token);\r\n      end ;\r\n      Inc(FormatCurrent, Count);\r\n    end;\r\n  end;\r\n\r\nbegin\r\n  DecodeDateFully(DateTime, Year, Month, Day, DayOfWeek);\r\n  DecodeTime(DateTime, Hour, Minute, Second, MilliSecond);\r\n  // Writeln(DateTime,'->',Year,',', Month, ',',Day, ',',DayOfWeek,',',Hour, ',',Minute, ',',Second, ',',MilliSecond);\r\n  if FormatStr <> '' then\r\n    StoreFormat(FormatStr, 0, False)\r\n  else\r\n    StoreFormat('C', 0, False);\r\nend ;\r\n\r\n\r\n\r\nfunction CurrentYear: Word;\r\n\r\nbegin\r\n  Result:=TJSDate.New().FullYear;\r\nend;\r\n\r\nfunction TryStrToDate(const S: String; out Value: TDateTime): Boolean;\r\nbegin\r\n  Result:=TryStrToDate(S,Value,ShortDateFormat,#0);\r\nend;\r\n\r\nfunction TryStrToDate(const S: String; out Value: TDateTime; separator : char): Boolean;\r\n\r\nbegin\r\n  Result:=TryStrToDate(S,Value,ShortDateFormat,Separator);\r\nend;\r\n\r\nfunction TryStrToDate(const S: String; out Value: TDateTime;\r\n                    const useformat : string; separator : char = #0): Boolean;\r\n\r\nVar\r\n  Msg : String;\r\n\r\nbegin\r\n  Result:=Length(S)<>0;\r\n  If Result then\r\n    begin\r\n    Value:=IntStrToDate(Msg,S,useformat,Separator);\r\n    Result:=(Msg='');\r\n    end;\r\nend;\r\n\r\n\r\n\r\n\r\nfunction TryStrToTime(const S: String; out Value: TDateTime; separator : char): Boolean;\r\nVar\r\n  Msg : String;\r\nbegin\r\n  Result:=Length(S)<>0;\r\n  If Result then\r\n    begin\r\n      Value:=IntStrToTime(Msg,S,Length(S),Separator);\r\n      Result:=(Msg='');\r\n    end;\r\nend;\r\n\r\nfunction TryStrToTime(const S: String; out Value: TDateTime): Boolean;\r\nbegin\r\n  result:=TryStrToTime(S,Value,#0);\r\nend;\r\n\r\nfunction TryStrToDateTime(const S: String; out Value: TDateTime): Boolean;\r\n\r\nvar\r\n  I: integer;\r\n  dtdate, dttime :TDateTime;\r\nbegin\r\n  result:=false;\r\n  I:=Pos(TimeSeparator,S);\r\n  If (I>0) then\r\n    begin\r\n      While (I>0) and (S[I]<>' ') do\r\n        Dec(I);\r\n      If I>0 then\r\n        begin\r\n          if not TryStrToDate(Copy(S,1,I-1),dtdate) then\r\n            exit;\r\n          if not TryStrToTime(Copy(S,i+1, Length(S)-i),dttime) then\r\n            exit;\r\n          Value:=ComposeDateTime(dtdate,dttime);\r\n          result:=true;\r\n        end\r\n      else\r\n         result:=TryStrToTime(s,Value);\r\n    end\r\n  else\r\n    result:=TryStrToDate(s,Value);\r\nend;\r\n\r\n\r\n\r\nfunction StrToDateDef(const S: String; const Defvalue : TDateTime): TDateTime;\r\nbegin\r\n   result := StrToDateDef(S,DefValue,#0);\r\nend;\r\n\r\nfunction StrToTimeDef(const S: String; const Defvalue : TDateTime): TDateTime;\r\nbegin\r\n   result := StrToTimeDef(S,DefValue,#0);\r\nend;\r\n\r\nfunction StrToDateTimeDef(const S: String; const Defvalue : TDateTime): TDateTime;\r\nbegin\r\n  if not TryStrToDateTime(s,Result) Then\r\n    result:=defvalue;\r\nend;\r\n\r\nfunction StrToDateDef(const S: String; const Defvalue : TDateTime; separator : char): TDateTime;\r\nbegin\r\n  if not TryStrToDate(s,Result, separator) Then\r\n    result:=defvalue;\r\nend;\r\n\r\nfunction StrToTimeDef(const S: String; const Defvalue : TDateTime; separator : char): TDateTime;\r\nbegin\r\n  if not TryStrToTime(s,Result, separator) Then\r\n    result:=defvalue;\r\nend;\r\n\r\nprocedure ReplaceTime(var dati:TDateTime; NewTime : TDateTime);\r\nbegin\r\n  dati:= ComposeDateTime(dati, newtime);\r\nend;\r\n\r\nprocedure ReplaceDate(var DateTime: TDateTime; const NewDate: TDateTime);\r\nvar\r\n  tmp : TDateTime;\r\nbegin\r\n  tmp:=NewDate;\r\n  ReplaceTime(tmp,DateTime);\r\n  DateTime:=tmp;\r\nend;\r\n\r\nFunction FloatToDateTime (Const Value : Extended) : TDateTime;\r\nbegin\r\n  If (Value<MinDateTime) or (Value>MaxDateTime) then\r\n    Raise EConvertError.CreateFmt (SInvalidDateTime,[FloatToStr(Value)]);\r\n  Result:=Value;\r\nend;\r\n\r\nfunction FloattoCurr(const Value: Extended): Currency;\r\nbegin\r\n  if not TryFloatToCurr(Value, Result) then\r\n    Raise EConvertError.CreateFmt(SInvalidCurrency, [FloatToStr(Value)]);\r\nend;\r\n\r\nfunction TryFloatToCurr(const Value: Extended; var AResult: Currency): Boolean;\r\nbegin\r\n  Result:=(Value>=MinCurrency) and (Value<=MaxCurrency);\r\n  if Result then\r\n    AResult := Value;\r\nend;\r\n\r\nfunction CurrToStr(Value: Currency): string;\r\nbegin\r\n  Result:=FloatToStrF(Value,ffGeneral,-1,0);\r\nend;\r\n\r\n(*\r\nfunction CurrToStr(Value: Currency; const FormatSettings: TFormatSettings): string;\r\nbegin\r\n\r\nend;\r\n*)\r\n\r\nfunction StrToCurr(const S: string): Currency;\r\n\r\nbegin\r\n  if not TryStrToCurr(S,Result) then\r\n    Raise EConvertError.createfmt(SInvalidCurrency,[S]);\r\nend;\r\n\r\n(*\r\nfunction StrToCurr(const S: string; const FormatSettings: TFormatSettings): Currency;\r\nbegin\r\n\r\nend;\r\n*)\r\n\r\nfunction TryStrToCurr(const S: string; out Value: Currency): Boolean;\r\n\r\nVar\r\n  D : Double;\r\n\r\nbegin\r\n  Result:=TryStrToFloat(S,D);\r\n  if Result then\r\n    Value:=D;\r\nend;\r\n\r\n(*\r\nfunction TryStrToCurr(const S: string; out Value: Currency; const FormatSettings: TFormatSettings): Boolean;\r\nbegin\r\n\r\nend;\r\n*)\r\n\r\nfunction StrToCurrDef(const S: string; Default: Currency): Currency;\r\n\r\nVar\r\n  R : Currency;\r\n\r\nbegin\r\n  if TryStrToCurr(S,R) then\r\n    Result:=R\r\n  else\r\n    Result:=Default;\r\nend;\r\n\r\n(*\r\nfunction StrToCurrDef(const S: string; Default: Currency; const FormatSettings: TFormatSettings): Currency;\r\nbegin\r\n\r\nend;\r\n*)\r\n\r\n{ ---------------------------------------------------------------------\r\n  Interface related\r\n  ---------------------------------------------------------------------}\r\nfunction Supports(const Instance: IInterface; const AClass: TClass; out Obj\r\n  ): Boolean;\r\nbegin\r\n  Result := (Instance<>nil) and (Instance.QueryInterface(IObjectInstance,Obj)=S_OK)\r\n     and (TObject(Obj).InheritsFrom(AClass));\r\nend;\r\n\r\nfunction Supports(const Instance: IInterface; const IID: TGUID; out Intf\r\n  ): Boolean;\r\nbegin\r\n  Result:=(Instance<>nil) and (Instance.QueryInterface(IID,Intf)=S_OK);\r\nend;\r\n\r\nfunction Supports(const Instance: TObject; const IID: TGUID; out Intf\r\n  ): Boolean;\r\nbegin\r\n  Result:=(Instance<>nil) and Instance.GetInterface(IID,Intf);\r\nend;\r\n\r\nfunction Supports(const Instance: TObject; const IID: TGuidString; out Intf\r\n  ): Boolean;\r\nbegin\r\n  Result:=(Instance<>nil) and Instance.GetInterfaceByStr(IID,Intf);\r\nend;\r\n\r\nfunction Supports(const Instance: IInterface; const AClass: TClass): Boolean;\r\nvar\r\n  Temp: TObject;\r\nbegin\r\n  Result:=Supports(Instance,AClass,Temp);\r\nend;\r\n\r\nfunction Supports(const Instance: IInterface; const IID: TGUID): Boolean;\r\nvar\r\n  Temp: IInterface;\r\nbegin\r\n  Result:=Supports(Instance,IID,Temp);\r\nend;\r\n\r\nfunction Supports(const Instance: TObject; const IID: TGUID): Boolean;\r\nvar\r\n  Temp: TJSObject;\r\nbegin\r\n  Result:=Supports(Instance,IID,Temp);\r\n  asm\r\n    if (Temp && Temp.$kind==='com') Temp._Release();\r\n  end;\r\nend;\r\n\r\nfunction Supports(const Instance: TObject; const IID: TGuidString): Boolean;\r\nvar\r\n  Temp: TJSObject;\r\nbegin\r\n  Result:=Supports(Instance,IID,Temp);\r\n  asm\r\n    if (Temp && Temp.$kind==='com') Temp._Release();\r\n  end;\r\nend;\r\n\r\nfunction Supports(const AClass: TClass; const IID: TGUID): Boolean;\r\nvar\r\n  maps: JSValue;\r\nbegin\r\n  if AClass=nil then exit(false);\r\n  maps := TJSObject(AClass)['$intfmaps'];\r\n  if not maps then exit(false);\r\n  if TJSObject(maps)[GUIDToString(IID)] then exit(true);\r\n  Result:=false;\r\nend;\r\n\r\nfunction Supports(const AClass: TClass; const IID: TGuidString): Boolean;\r\nvar\r\n  maps: JSValue;\r\nbegin\r\n  if AClass=nil then exit(false);\r\n  maps := TJSObject(AClass)['$intfmaps'];\r\n  if not maps then exit(false);\r\n  if TJSObject(maps)[uppercase(IID)] then exit(true);\r\n  Result:=false;\r\nend;\r\n\r\nfunction TryStringToGUID(const s: string; out Guid: TGUID): Boolean;\r\nvar\r\n  re: TJSRegexp;\r\nbegin\r\n  if Length(s)<>38 then Exit(False);\r\n  re:=TJSRegexp.new('^\\{[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\}$');\r\n  Result:=re.test(s);\r\n  if not Result then\r\n    begin\r\n    Guid.D1:=0;\r\n    exit;\r\n    end;\r\n  asm\r\n    rtl.strToGUIDR(s,Guid.get());\r\n  end;\r\n  Result:=true;\r\nend;\r\n\r\nfunction StringToGUID(const S: string): TGUID;\r\nbegin\r\n  if not TryStringToGUID(S, Result) then\r\n    raise EConvertError.CreateFmt(SInvalidGUID, [S]);\r\nend;\r\n\r\nfunction GUIDToString(const guid: TGUID): string;\r\nbegin\r\n  Result:=System.GUIDToString(guid);\r\nend;\r\n\r\nfunction IsEqualGUID(const guid1, guid2: TGUID): Boolean;\r\nvar\r\n  i: integer;\r\nbegin\r\n  if (guid1.D1<>guid2.D1) or (guid1.D2<>guid2.D2) or (guid1.D3<>guid2.D3) then\r\n    exit(false);\r\n  for i:=0 to 7 do if guid1.D4[i]<>guid2.D4[i] then exit(false);\r\n  Result:=true;\r\nend;\r\n\r\nfunction GuidCase(const guid: TGUID; const List: array of TGuid): Integer;\r\nbegin\r\n  for Result := High(List) downto 0 do\r\n    if IsEqualGUID(guid, List[Result]) then\r\n      Exit;\r\n  Result := -1;\r\nend;\r\n\r\n{ ---------------------------------------------------------------------\r\n  Integer/Ordinal related\r\n  ---------------------------------------------------------------------}\r\n\r\nFunction TryStrToInt(const S : String; Out res : Integer) : Boolean;\r\n\r\nVar\r\n  NI : NativeInt;\r\n\r\nbegin\r\n  Result:=TryStrToInt(S,NI);\r\n  if Result then\r\n    res:=NI;\r\nend;\r\n\r\nFunction TryStrToInt(const S : String; Out res : NativeInt) : Boolean;\r\n\r\nVar\r\n  Radix : Integer = 10;\r\n  F,N : String;\r\n  J : JSValue;\r\n\r\nbegin\r\n  N:=S;\r\n  F:=Copy(N,1,1);\r\n  if (F='$') then\r\n    Radix:=16\r\n  else if (F='&') then\r\n    Radix:=8\r\n  else if (F='%') then\r\n    Radix:=2;\r\n  If Radix<>10 then\r\n    Delete(N,1,1);\r\n  J:=parseInt(N,Radix);\r\n  Result:=Not jsIsNan(j);\r\n  if Result then\r\n    res:=NativeInt(J);\r\nend;\r\n\r\nFunction StrToIntDef(const S : String; Const aDef : Integer) : Integer;\r\n\r\nVar\r\n  R : NativeInt;\r\n\r\nbegin\r\n  if TryStrToInt(S,R) then\r\n    Result:=R\r\n  else\r\n    Result:=aDef;\r\nend;\r\n\r\nFunction StrToIntDef(const S : String; Const aDef : NativeInt) : NativeInt;\r\n\r\nVar\r\n  R : NativeInt;\r\n\r\nbegin\r\n  if TryStrToInt(S,R) then\r\n    Result:=R\r\n  else\r\n    Result:=aDef;\r\nend;\r\n\r\nFunction StrToInt(const S : String) : Integer;\r\n\r\nVar\r\n  R : NativeInt;\r\n\r\nbegin\r\n  if not TryStrToInt(S,R) then\r\n    Raise EConvertError.CreateFmt(SErrInvalidInteger,[S]);\r\n  Result:=R;\r\nend;\r\n\r\nFunction StrToNativeInt(const S : String) : NativeInt;\r\n\r\nbegin\r\n  if not TryStrToInt(S,Result) then\r\n    Raise EConvertError.CreateFmt(SErrInvalidInteger,[S]);\r\nend;\r\n\r\nFunction StrToInt64(const S : String) : NativeLargeInt;\r\n\r\nVar\r\n  N : NativeInt;\r\n\r\nbegin\r\n  if not TryStrToInt(S,N) then\r\n    Raise EConvertError.CreateFmt(SErrInvalidInteger,[S]);\r\n  Result:=N;\r\nend;\r\n\r\nFunction TryStrToInt64(const S : String; Out res : NativeLargeInt) : Boolean;\r\n\r\nVar\r\n  R : nativeint;\r\n\r\nbegin\r\n  Result:=TryStrToInt(S,R);\r\n  If Result then\r\n    Res:=R;\r\nend;\r\n\r\nFunction StrToInt64Def(const S : String; ADefault : NativeLargeInt) : NativeLargeInt;\r\n\r\n\r\nbegin\r\n  if TryStrToInt64(S,Result) then\r\n    Result:=ADefault;\r\nend;\r\n\r\nFunction StrToQWord(const S : String) : NativeLargeUInt;\r\n\r\nVar\r\n  N : NativeInt;\r\n\r\nbegin\r\n  if (not TryStrToInt(S,N)) or (N<0) then\r\n    Raise EConvertError.CreateFmt(SErrInvalidInteger,[S]);\r\n  Result:=N;\r\nend;\r\n\r\nFunction TryStrToQWord(const S : String; Out res : NativeLargeUInt) : Boolean;\r\n\r\nVar\r\n  R : nativeint;\r\n\r\nbegin\r\n  Result:=TryStrToInt(S,R) and (R>=0);\r\n  If Result then\r\n    Res:=R;\r\nend;\r\n\r\nFunction StrToQWordDef(const S : String; ADefault : NativeLargeUInt) : NativeLargeUInt;\r\n\r\nbegin\r\n  if Not TryStrToQword(S,Result) then\r\n    Result:=ADefault;\r\nend;\r\n\r\n\r\nFunction StrToUInt64(const S : String) : NativeLargeUInt;\r\n\r\nVar\r\n  N : NativeInt;\r\n\r\nbegin\r\n  if (not TryStrToInt(S,N)) or (N<0) then\r\n    Raise EConvertError.CreateFmt(SErrInvalidInteger,[S]);\r\n  Result:=N;\r\nend;\r\n\r\nFunction TryStrToUInt64(const S : String; Out res : NativeLargeUInt) : Boolean;\r\n\r\nVar\r\n  R : nativeint;\r\n\r\nbegin\r\n  Result:=TryStrToInt(S,R) and (R>=0);\r\n  If Result then\r\n    Res:=R;\r\nend;\r\n\r\nFunction StrToUInt64Def(const S : String; ADefault : NativeLargeUInt) : NativeLargeUInt;\r\n\r\n\r\nbegin\r\n  if Not TryStrToUInt64(S,Result) then\r\n    Result:=ADefault;\r\nend;\r\n\r\nFunction TryStrToDWord(const S : String; Out res : DWord) : Boolean;\r\n\r\nVar\r\n  R : nativeint;\r\n\r\nbegin\r\n  Result:=TryStrToInt(S,R) and (R>=0) and (R<=DWord($FFFFFFFF));\r\n  If Result then\r\n    Res:=R;\r\nend;\r\n\r\nFunction StrToDWord(const S : String) : DWord;\r\n\r\nbegin\r\n  if not TryStrToDWord(S,Result) then\r\n    Raise EConvertError.CreateFmt(SErrInvalidInteger,[S]);\r\nend;\r\n\r\n\r\nFunction StrToDWordDef(const S : String; ADefault : DWord) : DWord;\r\n\r\nbegin\r\n  if Not TryStrToDWord(S,Result) then\r\n    Result:=ADefault;\r\nend;\r\n\r\n\r\nfunction IntToHex(Value: NativeInt; Digits: integer): string;\r\nconst\r\n  HexDigits = '0123456789ABCDEF';\r\nbegin\r\n  If Digits=0 then\r\n    Digits:=1;\r\n  Result:='';\r\n  While Value>0 do\r\n    begin\r\n    result:=HexDigits[(value and 15)+1]+Result;\r\n    value := value shr 4;\r\n    end ;\r\n  while (Length(Result)<Digits) do\r\n    Result:='0'+Result;\r\nend;\r\n\r\n{ TFormatSettings }\r\n\r\nfunction TFormatSettings.GetCurrencyDecimals: Byte;\r\nbegin\r\n  Result:=Sysutils.CurrencyDecimals;\r\nend;\r\n\r\nfunction TFormatSettings.GetCurrencyFormat: Byte;\r\nbegin\r\n  Result:=Sysutils.CurrencyFormat;\r\nend;\r\n\r\nfunction TFormatSettings.GetCurrencyString: String;\r\nbegin\r\n  Result:=Sysutils.CurrencyString;\r\nend;\r\n\r\nfunction TFormatSettings.GetDateSeparator: char;\r\nbegin\r\n  Result := SysUtils.DateSeparator;\r\nend;\r\n\r\nfunction TFormatSettings.GetDecimalSeparator: string;\r\nbegin\r\n  Result := SysUtils.DecimalSeparator;\r\nend;\r\n\r\nfunction TFormatSettings.GetLongDateFormat: string;\r\nbegin\r\n  Result := SysUtils.LongDateFormat;\r\nend;\r\n\r\nfunction TFormatSettings.GetLongDayNames: TDayNames;\r\nbegin\r\n  Result:=Sysutils.LongDayNames;\r\nend;\r\n\r\nfunction TFormatSettings.GetLongMonthNames: TMonthNames;\r\nbegin\r\n Result:=Sysutils.LongMonthNames;\r\nend;\r\n\r\nfunction TFormatSettings.GetLongTimeFormat: string;\r\nbegin\r\n  Result := SysUtils.LongTimeFormat;\r\nend;\r\n\r\nfunction TFormatSettings.GetNegCurrFormat: Byte;\r\nbegin\r\n  Result:=Sysutils.NegCurrFormat;\r\nend;\r\n\r\nfunction TFormatSettings.GetShortDateFormat: string;\r\nbegin\r\n  Result := SysUtils.ShortDateFormat;\r\nend;\r\n\r\nfunction TFormatSettings.GetShortDayNames: TDayNames;\r\nbegin\r\n Result:=Sysutils.ShortDayNames;\r\nend;\r\n\r\nfunction TFormatSettings.GetShortMonthNames: TMonthNames;\r\nbegin\r\n Result:=Sysutils.ShortMonthNames;\r\nend;\r\n\r\nfunction TFormatSettings.GetShortTimeFormat: string;\r\nbegin\r\n  Result := SysUtils.ShortTimeFormat;\r\nend;\r\n\r\nfunction TFormatSettings.GetThousandSeparator: string;\r\nbegin\r\n  Result := SysUtils.ThousandSeparator;\r\nend;\r\n\r\nfunction TFormatSettings.GetTimeAMString: string;\r\nbegin\r\n  Result := SysUtils.TimeAMString;\r\nend;\r\n\r\nfunction TFormatSettings.GetTimePMString: string;\r\nbegin\r\n  Result := SysUtils.TimePMString;\r\nend;\r\n\r\nfunction TFormatSettings.GetTimeSeparator: char;\r\nbegin\r\n  Result := SysUtils.TimeSeparator;\r\nend;\r\n\r\nprocedure TFormatSettings.SetCurrencyFormat(AValue: Byte);\r\nbegin\r\n  Sysutils.CurrencyFormat:=AValue;\r\nend;\r\n\r\nprocedure TFormatSettings.SetCurrencyString(AValue: String);\r\nbegin\r\n  Sysutils.CurrencyString:=AValue;\r\nend;\r\n\r\nprocedure TFormatSettings.SetDateSeparator(const Value: char);\r\nbegin\r\n  SysUtils.DateSeparator := Value;\r\nend;\r\n\r\nprocedure TFormatSettings.SetDecimalSeparator(const Value: string);\r\nbegin\r\n  SysUtils.DecimalSeparator := Value;\r\nend;\r\n\r\nprocedure TFormatSettings.SetLongDateFormat(const Value: string);\r\nbegin\r\n  SysUtils.LongDateFormat := Value;\r\nend;\r\n\r\nprocedure TFormatSettings.SetLongDayNames(AValue: TDayNames);\r\nbegin\r\n  SysUtils.LongDayNames:=AValue;\r\nend;\r\n\r\nprocedure TFormatSettings.SetLongMonthNames(AValue: TMonthNames);\r\nbegin\r\n  SysUtils.LongMonthNames:=AValue;\r\nend;\r\n\r\nprocedure TFormatSettings.SetLongTimeFormat(const Value: string);\r\nbegin\r\n  SysUtils.LongTimeFormat := Value;\r\nend;\r\n\r\nprocedure TFormatSettings.SetNegCurrFormat(AValue: Byte);\r\nbegin\r\n  Sysutils.NegCurrFormat:=AValue;\r\nend;\r\n\r\nprocedure TFormatSettings.SetShortDateFormat(const Value: string);\r\nbegin\r\n  SysUtils.ShortDateFormat := Value;\r\nend;\r\n\r\nprocedure TFormatSettings.SetShortDayNames(AValue: TDayNames);\r\nbegin\r\n  SysUtils.ShortDayNames:=AValue;\r\nend;\r\n\r\nprocedure TFormatSettings.SetShortMonthNames(AValue: TMonthNames);\r\nbegin\r\n  SysUtils.ShortMonthNames:=AValue;\r\nend;\r\n\r\nprocedure TFormatSettings.SetShortTimeFormat(const Value: string);\r\nbegin\r\n  SysUtils.ShortTimeFormat := Value;\r\nend;\r\n\r\nprocedure TFormatSettings.SetCurrencyDecimals(AValue: Byte);\r\nbegin\r\n  Sysutils.CurrencyDecimals:=aValue;\r\nend;\r\n\r\nprocedure TFormatSettings.SetThousandSeparator(const Value: string);\r\nbegin\r\n  SysUtils.ThousandSeparator := Value;\r\nend;\r\n\r\nprocedure TFormatSettings.SetTimeAMString(const Value: string);\r\nbegin\r\n  SysUtils.TimeAMString := Value;\r\nend;\r\n\r\nprocedure TFormatSettings.SetTimePMString(const Value: string);\r\nbegin\r\n  SysUtils.TimePMString := Value;\r\nend;\r\n\r\nprocedure TFormatSettings.SetTimeSeparator(const Value: char);\r\nbegin\r\n  SysUtils.TimeSeparator := Value;\r\nend;\r\n\r\n\r\ninitialization\r\n  FormatSettings := TFormatSettings.Create;\r\n\r\nend.\r\n\r\n","{\r\n    This file is part of the Pas2JS run time library.\r\n    Copyright (c) 2017 by Mattias Gaertner\r\n\r\n    See the file COPYING.FPC, included in this distribution,\r\n    for details about the copyright.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n **********************************************************************}\r\nunit Classes;\r\n\r\n{$mode objfpc}\r\n\r\ninterface\r\n\r\nuses\r\n  RTLConsts, Types, SysUtils;\r\n\r\ntype\r\n  TNotifyEvent = procedure(Sender: TObject) of object;\r\n\r\n  // Notification operations :\r\n  // Observer has changed, is freed, item added to/deleted from list, custom event.\r\n  TFPObservedOperation = (ooChange,ooFree,ooAddItem,ooDeleteItem,ooCustom);\r\n\r\n  EListError = class(Exception);\r\n  EStringListError = class(EListError);\r\n  EComponentError = class(Exception);\r\n\r\n  TListAssignOp = (laCopy, laAnd, laOr, laXor, laSrcUnique, laDestUnique);\r\n  TListSortCompare = function(Item1, Item2: JSValue): Integer;\r\n  TListCallback = Types.TListCallback;\r\n  TListStaticCallback = Types.TListStaticCallback;\r\n  TAlignment = (taLeftJustify, taRightJustify, taCenter);\r\n\r\n  { TFPListEnumerator }\r\n  TFPList = Class;\r\n\r\n  TFPListEnumerator = class\r\n  private\r\n    FList: TFPList;\r\n    FPosition: Integer;\r\n  public\r\n    constructor Create(AList: TFPList);\r\n    function GetCurrent: JSValue;\r\n    function MoveNext: Boolean;\r\n    property Current: JSValue read GetCurrent;\r\n  end;\r\n\r\n  { TFPList }\r\n\r\n  TFPList = class(TObject)\r\n  private\r\n    FList: TJSValueDynArray;\r\n    FCount: Integer;\r\n    FCapacity: Integer;\r\n    procedure CopyMove(aList: TFPList);\r\n    procedure MergeMove(aList: TFPList);\r\n    procedure DoCopy(ListA, ListB: TFPList);\r\n    procedure DoSrcUnique(ListA, ListB: TFPList);\r\n    procedure DoAnd(ListA, ListB: TFPList);\r\n    procedure DoDestUnique(ListA, ListB: TFPList);\r\n    procedure DoOr(ListA, ListB: TFPList);\r\n    procedure DoXOr(ListA, ListB: TFPList);\r\n  protected\r\n    function Get(Index: Integer): JSValue; {$ifdef CLASSESINLINE} inline; {$endif CLASSESINLINE}\r\n    procedure Put(Index: Integer; Item: JSValue); {$ifdef CLASSESINLINE} inline; {$endif CLASSESINLINE}\r\n    procedure SetCapacity(NewCapacity: Integer);\r\n    procedure SetCount(NewCount: Integer);\r\n    Procedure RaiseIndexError(Index: Integer);\r\n  public\r\n    //Type\r\n    //  TDirection = (FromBeginning, FromEnd);\r\n    destructor Destroy; override;\r\n    procedure AddList(AList: TFPList);\r\n    function Add(Item: JSValue): Integer; {$ifdef CLASSESINLINE} inline; {$endif CLASSESINLINE}\r\n    procedure Clear;\r\n    procedure Delete(Index: Integer); {$ifdef CLASSESINLINE} inline; {$endif CLASSESINLINE}\r\n    class procedure Error(const Msg: string; const Data: String);\r\n    procedure Exchange(Index1, Index2: Integer);\r\n    function Expand: TFPList; {$ifdef CLASSESINLINE} inline; {$endif CLASSESINLINE}\r\n    function Extract(Item: JSValue): JSValue;\r\n    function First: JSValue;\r\n    function GetEnumerator: TFPListEnumerator;\r\n    function IndexOf(Item: JSValue): Integer;\r\n    function IndexOfItem(Item: JSValue; Direction: TDirection): Integer;\r\n    procedure Insert(Index: Integer; Item: JSValue); {$ifdef CLASSESINLINE} inline; {$endif CLASSESINLINE}\r\n    function Last: JSValue;\r\n    procedure Move(CurIndex, NewIndex: Integer);\r\n    procedure Assign (ListA: TFPList; AOperator: TListAssignOp=laCopy; ListB: TFPList=nil);\r\n    function Remove(Item: JSValue): Integer;\r\n    procedure Pack;\r\n    procedure Sort(const Compare: TListSortCompare);\r\n    procedure ForEachCall(const proc2call: TListCallback; const arg: JSValue);\r\n    procedure ForEachCall(const proc2call: TListStaticCallback; const arg: JSValue);\r\n    property Capacity: Integer read FCapacity write SetCapacity;\r\n    property Count: Integer read FCount write SetCount;\r\n    property Items[Index: Integer]: JSValue read Get write Put; default;\r\n    property List: TJSValueDynArray read FList;\r\n  end;\r\n\r\n  TListNotification = (lnAdded, lnExtracted, lnDeleted);\r\n  TList = class;\r\n\r\n  { TListEnumerator }\r\n\r\n  TListEnumerator = class\r\n  private\r\n    FList: TList;\r\n    FPosition: Integer;\r\n  public\r\n    constructor Create(AList: TList);\r\n    function GetCurrent: JSValue;\r\n    function MoveNext: Boolean;\r\n    property Current: JSValue read GetCurrent;\r\n  end;\r\n\r\n  { TList }\r\n\r\n  TList = class(TObject)\r\n  private\r\n    FList: TFPList;\r\n    procedure CopyMove (aList : TList);\r\n    procedure MergeMove (aList : TList);\r\n    procedure DoCopy(ListA, ListB : TList);\r\n    procedure DoSrcUnique(ListA, ListB : TList);\r\n    procedure DoAnd(ListA, ListB : TList);\r\n    procedure DoDestUnique(ListA, ListB : TList);\r\n    procedure DoOr(ListA, ListB : TList);\r\n    procedure DoXOr(ListA, ListB : TList);\r\n  protected\r\n    function Get(Index: Integer): JSValue;\r\n    procedure Put(Index: Integer; Item: JSValue);\r\n    procedure Notify(aValue: JSValue; Action: TListNotification); virtual;\r\n    procedure SetCapacity(NewCapacity: Integer);\r\n    function GetCapacity: integer;\r\n    procedure SetCount(NewCount: Integer);\r\n    function GetCount: integer;\r\n    function GetList: TJSValueDynArray;\r\n    property FPList : TFPList Read FList;\r\n  public\r\n    constructor Create; reintroduce;\r\n    destructor Destroy; override;\r\n    Procedure AddList(AList : TList);\r\n    function Add(Item: JSValue): Integer;\r\n    procedure Clear; virtual;\r\n    procedure Delete(Index: Integer);\r\n    class procedure Error(const Msg: string; Data: String); virtual;\r\n    procedure Exchange(Index1, Index2: Integer);\r\n    function Expand: TList;\r\n    function Extract(Item: JSValue): JSValue;\r\n    function First: JSValue;\r\n    function GetEnumerator: TListEnumerator;\r\n    function IndexOf(Item: JSValue): Integer;\r\n    procedure Insert(Index: Integer; Item: JSValue);\r\n    function Last: JSValue;\r\n    procedure Move(CurIndex, NewIndex: Integer);\r\n    procedure Assign (ListA: TList; AOperator: TListAssignOp=laCopy; ListB: TList=nil);\r\n    function Remove(Item: JSValue): Integer;\r\n    procedure Pack;\r\n    procedure Sort(const Compare: TListSortCompare);\r\n    property Capacity: Integer read GetCapacity write SetCapacity;\r\n    property Count: Integer read GetCount write SetCount;\r\n    property Items[Index: Integer]: JSValue read Get write Put; default;\r\n    property List: TJSValueDynArray read GetList;\r\n  end;\r\n\r\n  { TPersistent }\r\n\r\n  TPersistent = class(TObject)\r\n  private\r\n    //FObservers : TFPList;\r\n    procedure AssignError(Source: TPersistent);\r\n  protected\r\n    procedure AssignTo(Dest: TPersistent); virtual;\r\n    function GetOwner: TPersistent; virtual;\r\n  public\r\n    procedure Assign(Source: TPersistent); virtual;\r\n    //procedure FPOAttachObserver(AObserver : TObject);\r\n    //procedure FPODetachObserver(AObserver : TObject);\r\n    //procedure FPONotifyObservers(ASender : TObject; AOperation: TFPObservedOperation; Data: TObject);\r\n    function GetNamePath: string; virtual;\r\n  end;\r\n  TPersistentClass = Class of TPersistent;\r\n\r\n  TStrings = Class;\r\n  { TStringsEnumerator class }\r\n\r\n  TStringsEnumerator = class\r\n  private\r\n    FStrings: TStrings;\r\n    FPosition: Integer;\r\n  public\r\n    constructor Create(AStrings: TStrings); reintroduce;\r\n    function GetCurrent: String;\r\n    function MoveNext: Boolean;\r\n    property Current: String read GetCurrent;\r\n  end;\r\n\r\n\r\n  { TStrings class }\r\n  TStrings = class(TPersistent)\r\n  private\r\n    FSpecialCharsInited : boolean;\r\n    FAlwaysQuote: Boolean;\r\n    FQuoteChar : Char;\r\n    FDelimiter : Char;\r\n    FNameValueSeparator : Char;\r\n    FUpdateCount: Integer;\r\n    FLBS : TTextLineBreakStyle;\r\n    FSkipLastLineBreak : Boolean;\r\n    FStrictDelimiter : Boolean;\r\n    FLineBreak : String;\r\n    function GetCommaText: string;\r\n    function GetName(Index: Integer): string;\r\n    function GetValue(const Name: string): string;\r\n    Function GetLBS : TTextLineBreakStyle;\r\n    Procedure SetLBS (AValue : TTextLineBreakStyle);\r\n    procedure SetCommaText(const Value: string);\r\n    procedure SetValue(const Name, Value: string);\r\n    procedure SetDelimiter(c:Char);\r\n    procedure SetQuoteChar(c:Char);\r\n    procedure SetNameValueSeparator(c:Char);\r\n    procedure DoSetTextStr(const Value: string; DoClear : Boolean);\r\n    Function GetDelimiter : Char;\r\n    Function GetNameValueSeparator : Char;\r\n    Function GetQuoteChar: Char;\r\n    Function GetLineBreak : String;\r\n    procedure SetLineBreak(const S : String);\r\n    Function GetSkipLastLineBreak : Boolean;\r\n    procedure SetSkipLastLineBreak(const AValue : Boolean);\r\n  protected\r\n    procedure Error(const Msg: string; Data: Integer);\r\n    function Get(Index: Integer): string; virtual; abstract;\r\n    function GetCapacity: Integer; virtual;\r\n    function GetCount: Integer; virtual; abstract;\r\n    function GetObject(Index: Integer): TObject; virtual;\r\n    function GetTextStr: string; virtual;\r\n    procedure Put(Index: Integer; const S: string); virtual;\r\n    procedure PutObject(Index: Integer; AObject: TObject); virtual;\r\n    procedure SetCapacity(NewCapacity: Integer); virtual;\r\n    procedure SetTextStr(const Value: string); virtual;\r\n    procedure SetUpdateState(Updating: Boolean); virtual;\r\n    property UpdateCount: Integer read FUpdateCount;\r\n    Function DoCompareText(const s1,s2 : string) : PtrInt; virtual;\r\n    Function GetDelimitedText: string;\r\n    Procedure SetDelimitedText(Const AValue: string);\r\n    Function GetValueFromIndex(Index: Integer): string;\r\n    Procedure SetValueFromIndex(Index: Integer; const Value: string);\r\n    Procedure CheckSpecialChars;\r\n//    Class Function GetNextLine (Const Value : String; Var S : String; Var P : Integer) : Boolean;\r\n    Function GetNextLinebreak (Const Value : String; Out S : String; Var P : Integer) : Boolean;\r\n  public\r\n    constructor Create; reintroduce;\r\n    destructor Destroy; override;\r\n    function Add(const S: string): Integer; virtual; overload;\r\n//    function AddFmt(const Fmt : string; const Args : Array of const): Integer; overload;\r\n    function AddObject(const S: string; AObject: TObject): Integer; virtual; overload;\r\n//    function AddObject(const Fmt: string; Args : Array of const; AObject: TObject): Integer; overload;\r\n    procedure Append(const S: string);\r\n    procedure AddStrings(TheStrings: TStrings); overload; virtual;\r\n    procedure AddStrings(TheStrings: TStrings; ClearFirst : Boolean); overload;\r\n    procedure AddStrings(const TheStrings: array of string); overload; virtual;\r\n    procedure AddStrings(const TheStrings: array of string; ClearFirst : Boolean); overload;\r\n    function AddPair(const AName, AValue: string): TStrings; overload;\r\n    function AddPair(const AName, AValue: string; AObject: TObject): TStrings; overload;\r\n    Procedure AddText(Const S : String); virtual;\r\n    procedure Assign(Source: TPersistent); override;\r\n    procedure BeginUpdate;\r\n    procedure Clear; virtual; abstract;\r\n    procedure Delete(Index: Integer); virtual; abstract;\r\n    procedure EndUpdate;\r\n    function Equals(Obj: TObject): Boolean; override; overload;\r\n    function Equals(TheStrings: TStrings): Boolean; overload;\r\n    procedure Exchange(Index1, Index2: Integer); virtual;\r\n    function GetEnumerator: TStringsEnumerator;\r\n    function IndexOf(const S: string): Integer; virtual;\r\n    function IndexOfName(const Name: string): Integer; virtual;\r\n    function IndexOfObject(AObject: TObject): Integer; virtual;\r\n    procedure Insert(Index: Integer; const S: string); virtual; abstract;\r\n    procedure InsertObject(Index: Integer; const S: string; AObject: TObject);\r\n    procedure Move(CurIndex, NewIndex: Integer); virtual;\r\n    procedure GetNameValue(Index : Integer; Out AName,AValue : String);\r\n    function  ExtractName(Const S:String):String;\r\n    Property TextLineBreakStyle : TTextLineBreakStyle Read GetLBS Write SetLBS;\r\n    property Delimiter: Char read GetDelimiter write SetDelimiter;\r\n    property DelimitedText: string read GetDelimitedText write SetDelimitedText;\r\n    property LineBreak : string Read GetLineBreak write SetLineBreak;\r\n    Property StrictDelimiter : Boolean Read FStrictDelimiter Write FStrictDelimiter;\r\n    property AlwaysQuote: Boolean read FAlwaysQuote write FAlwaysQuote;\r\n    property QuoteChar: Char read GetQuoteChar write SetQuoteChar;\r\n    Property NameValueSeparator : Char Read GetNameValueSeparator Write SetNameValueSeparator;\r\n    property ValueFromIndex[Index: Integer]: string read GetValueFromIndex write SetValueFromIndex;\r\n    property Capacity: Integer read GetCapacity write SetCapacity;\r\n    property CommaText: string read GetCommaText write SetCommaText;\r\n    property Count: Integer read GetCount;\r\n    property Names[Index: Integer]: string read GetName;\r\n    property Objects[Index: Integer]: TObject read GetObject write PutObject;\r\n    property Values[const Name: string]: string read GetValue write SetValue;\r\n    property Strings[Index: Integer]: string read Get write Put; default;\r\n    property Text: string read GetTextStr write SetTextStr;\r\n    Property SkipLastLineBreak : Boolean Read GetSkipLastLineBreak Write SetSkipLastLineBreak;\r\n  end;\r\n\r\n  { TStringList}\r\n  TStringItem = record\r\n     FString: string;\r\n     FObject: TObject;\r\n   end;\r\n\r\n  TStringItemArray = Array of TStringItem;\r\n\r\n  TStringList = class;\r\n  TStringListSortCompare = function(List: TStringList; Index1, Index2: Integer): Integer;\r\n\r\n  TStringsSortStyle = (sslNone,sslUser,sslAuto);\r\n  TStringsSortStyles = Set of TStringsSortStyle;\r\n\r\n  TStringList = class(TStrings)\r\n  private\r\n    FList: TStringItemArray;\r\n    FCount: Integer;\r\n    FOnChange: TNotifyEvent;\r\n    FOnChanging: TNotifyEvent;\r\n    FDuplicates: TDuplicates;\r\n    FCaseSensitive : Boolean;\r\n    FForceSort : Boolean;\r\n    FOwnsObjects : Boolean;\r\n    FSortStyle: TStringsSortStyle;\r\n    procedure ExchangeItemsInt(Index1, Index2: Integer);\r\n    function GetSorted: Boolean;\r\n    procedure Grow;\r\n    procedure InternalClear(FromIndex : Integer = 0; ClearOnly : Boolean = False);\r\n    procedure QuickSort(L, R: Integer; CompareFn: TStringListSortCompare);\r\n    procedure SetSorted(Value: Boolean);\r\n    procedure SetCaseSensitive(b : boolean);\r\n    procedure SetSortStyle(AValue: TStringsSortStyle);\r\n  protected\r\n    Procedure CheckIndex(AIndex : Integer);\r\n    procedure ExchangeItems(Index1, Index2: Integer); virtual;\r\n    procedure Changed; virtual;\r\n    procedure Changing; virtual;\r\n    function Get(Index: Integer): string; override;\r\n    function GetCapacity: Integer; override;\r\n    function GetCount: Integer; override;\r\n    function GetObject(Index: Integer): TObject; override;\r\n    procedure Put(Index: Integer; const S: string); override;\r\n    procedure PutObject(Index: Integer; AObject: TObject); override;\r\n    procedure SetCapacity(NewCapacity: Integer); override;\r\n    procedure SetUpdateState(Updating: Boolean); override;\r\n    procedure InsertItem(Index: Integer; const S: string); virtual;\r\n    procedure InsertItem(Index: Integer; const S: string; O: TObject); virtual;\r\n    Function DoCompareText(const s1,s2 : string) : PtrInt; override;\r\n    function CompareStrings(const s1,s2 : string) : Integer; virtual;\r\n  public\r\n    destructor Destroy; override;\r\n    function Add(const S: string): Integer; override;\r\n    procedure Clear; override;\r\n    procedure Delete(Index: Integer); override;\r\n    procedure Exchange(Index1, Index2: Integer); override;\r\n    function Find(const S: string; Out Index: Integer): Boolean; virtual;\r\n    function IndexOf(const S: string): Integer; override;\r\n    procedure Insert(Index: Integer; const S: string); override;\r\n    procedure Sort; virtual;\r\n    procedure CustomSort(CompareFn: TStringListSortCompare); virtual;\r\n    property Duplicates: TDuplicates read FDuplicates write FDuplicates;\r\n    property Sorted: Boolean read GetSorted write SetSorted;\r\n    property CaseSensitive: Boolean read FCaseSensitive write SetCaseSensitive;\r\n    property OnChange: TNotifyEvent read FOnChange write FOnChange;\r\n    property OnChanging: TNotifyEvent read FOnChanging write FOnChanging;\r\n    property OwnsObjects : boolean read FOwnsObjects write FOwnsObjects;\r\n    Property SortStyle : TStringsSortStyle Read FSortStyle Write SetSortStyle;\r\n  end;\r\n\r\n  TCollection = class;\r\n\r\n  { TCollectionItem }\r\n\r\n  TCollectionItem = class(TPersistent)\r\n  private\r\n    FCollection: TCollection;\r\n    FID: Integer;\r\n    FUpdateCount: Integer;\r\n    function GetIndex: Integer;\r\n  protected\r\n    procedure SetCollection(Value: TCollection);virtual;\r\n    procedure Changed(AllItems: Boolean);\r\n    function GetOwner: TPersistent; override;\r\n    function GetDisplayName: string; virtual;\r\n    procedure SetIndex(Value: Integer); virtual;\r\n    procedure SetDisplayName(const Value: string); virtual;\r\n    property UpdateCount: Integer read FUpdateCount;\r\n  public\r\n    constructor Create(ACollection: TCollection); virtual; reintroduce;\r\n    destructor Destroy; override;\r\n    function GetNamePath: string; override;\r\n    property Collection: TCollection read FCollection write SetCollection;\r\n    property ID: Integer read FID;\r\n    property Index: Integer read GetIndex write SetIndex;\r\n    property DisplayName: string read GetDisplayName write SetDisplayName;\r\n  end;\r\n\r\n  TCollectionEnumerator = class\r\n  private\r\n    FCollection: TCollection;\r\n    FPosition: Integer;\r\n  public\r\n    constructor Create(ACollection: TCollection); reintroduce;\r\n    function GetCurrent: TCollectionItem;\r\n    function MoveNext: Boolean;\r\n    property Current: TCollectionItem read GetCurrent;\r\n  end;\r\n\r\n  TCollectionItemClass = class of TCollectionItem;\r\n  TCollectionNotification = (cnAdded, cnExtracting, cnDeleting);\r\n  TCollectionSortCompare = function (Item1, Item2: TCollectionItem): Integer;\r\n\r\n  TCollection = class(TPersistent)\r\n  private\r\n    FItemClass: TCollectionItemClass;\r\n    FItems: TFpList;\r\n    FUpdateCount: Integer;\r\n    FNextID: Integer;\r\n    FPropName: string;\r\n    function GetCount: Integer;\r\n    function GetPropName: string;\r\n    procedure InsertItem(Item: TCollectionItem);\r\n    procedure RemoveItem(Item: TCollectionItem);\r\n    procedure DoClear;\r\n  protected\r\n    { Design-time editor support }\r\n    function GetAttrCount: Integer; virtual;\r\n    function GetAttr(Index: Integer): string; virtual;\r\n    function GetItemAttr(Index, ItemIndex: Integer): string; virtual;\r\n    procedure Changed;\r\n    function GetItem(Index: Integer): TCollectionItem;\r\n    procedure SetItem(Index: Integer; Value: TCollectionItem);\r\n    procedure SetItemName(Item: TCollectionItem); virtual;\r\n    procedure SetPropName; virtual;\r\n    procedure Update(Item: TCollectionItem); virtual;\r\n    procedure Notify(Item: TCollectionItem;Action: TCollectionNotification); virtual;\r\n    property PropName: string read GetPropName write FPropName;\r\n    property UpdateCount: Integer read FUpdateCount;\r\n  public\r\n    constructor Create(AItemClass: TCollectionItemClass); reintroduce;\r\n    destructor Destroy; override;\r\n    function Owner: TPersistent;\r\n    function Add: TCollectionItem;\r\n    procedure Assign(Source: TPersistent); override;\r\n    procedure BeginUpdate; virtual;\r\n    procedure Clear;\r\n    procedure EndUpdate; virtual;\r\n    procedure Delete(Index: Integer);\r\n    function GetEnumerator: TCollectionEnumerator;\r\n    function GetNamePath: string; override;\r\n    function Insert(Index: Integer): TCollectionItem;\r\n    function FindItemID(ID: Integer): TCollectionItem;\r\n    procedure Exchange(Const Index1, index2: integer);\r\n    procedure Sort(Const Compare : TCollectionSortCompare);\r\n    property Count: Integer read GetCount;\r\n    property ItemClass: TCollectionItemClass read FItemClass;\r\n    property Items[Index: Integer]: TCollectionItem read GetItem write SetItem;\r\n  end;\r\n\r\n  TOwnedCollection = class(TCollection)\r\n  private\r\n    FOwner: TPersistent;\r\n  protected\r\n    Function GetOwner: TPersistent; override;\r\n  public\r\n    Constructor Create(AOwner: TPersistent; AItemClass: TCollectionItemClass); reintroduce;\r\n  end;\r\n\r\n  TComponent = Class;\r\n\r\n  TOperation = (opInsert, opRemove);\r\n\r\n  TComponentStateItem = ( csLoading, csReading, csWriting,  csDestroying,\r\n    csDesigning, csAncestor, csUpdating, csFixups, csFreeNotification,\r\n    csInline, csDesignInstance);\r\n  TComponentState = set of TComponentStateItem;\r\n  TComponentStyleItem = (csInheritable, csCheckPropAvail, csSubComponent, csTransient);\r\n  TComponentStyle = set of TComponentStyleItem;\r\n\r\n  TGetChildProc = procedure (Child: TComponent) of object;\r\n\r\n  TComponentName = string;\r\n\r\n  { TComponentEnumerator }\r\n\r\n  TComponentEnumerator = class\r\n  private\r\n    FComponent: TComponent;\r\n    FPosition: Integer;\r\n  public\r\n    constructor Create(AComponent: TComponent);\r\n    function GetCurrent: TComponent;\r\n    function MoveNext: Boolean;\r\n    property Current: TComponent read GetCurrent;\r\n  end;\r\n\r\n  TComponent = class(TPersistent)\r\n  private\r\n    FOwner: TComponent;\r\n    FName: TComponentName;\r\n    FTag: Ptrint;\r\n    FComponents: TFpList;\r\n    FFreeNotifies: TFpList;\r\n    FDesignInfo: Longint;\r\n    FComponentState: TComponentState;\r\n    function GetComponent(AIndex: Integer): TComponent;\r\n    function GetComponentCount: Integer;\r\n    function GetComponentIndex: Integer;\r\n    procedure Insert(AComponent: TComponent);\r\n    procedure Remove(AComponent: TComponent);\r\n    procedure RemoveNotification(AComponent: TComponent);\r\n    procedure SetComponentIndex(Value: Integer);\r\n  protected\r\n    FComponentStyle: TComponentStyle;\r\n    procedure ChangeName(const NewName: TComponentName);\r\n    procedure GetChildren(Proc: TGetChildProc; Root: TComponent); virtual;\r\n    function GetChildOwner: TComponent; virtual;\r\n    function GetChildParent: TComponent; virtual;\r\n    function GetOwner: TPersistent; override;\r\n    procedure Loaded; virtual;\r\n    procedure Loading; virtual;\r\n    procedure Notification(AComponent: TComponent;  Operation: TOperation); virtual;\r\n    procedure PaletteCreated; virtual;\r\n    procedure SetAncestor(Value: Boolean);\r\n    procedure SetDesigning(Value: Boolean; SetChildren : Boolean = True);\r\n    procedure SetDesignInstance(Value: Boolean);\r\n    procedure SetInline(Value: Boolean);\r\n    procedure SetName(const NewName: TComponentName); virtual;\r\n    procedure SetChildOrder(Child: TComponent; Order: Integer); virtual;\r\n    procedure SetParentComponent(Value: TComponent); virtual;\r\n    procedure Updating; virtual;\r\n    procedure Updated; virtual;\r\n    procedure ValidateRename(AComponent: TComponent;  const CurName, NewName: string); virtual;\r\n    procedure ValidateContainer(AComponent: TComponent); virtual;\r\n    procedure ValidateInsert(AComponent: TComponent); virtual;\r\n  public\r\n    constructor Create(AOwner: TComponent); virtual; reintroduce;\r\n    destructor Destroy; override;\r\n    procedure BeforeDestruction; override;\r\n    procedure DestroyComponents;\r\n    procedure Destroying;\r\n//    function ExecuteAction(Action: TBasicAction): Boolean; virtual;\r\n    function FindComponent(const AName: string): TComponent;\r\n    procedure FreeNotification(AComponent: TComponent);\r\n    procedure RemoveFreeNotification(AComponent: TComponent);\r\n    function GetNamePath: string; override;\r\n    function GetParentComponent: TComponent; virtual;\r\n    function HasParent: Boolean; virtual;\r\n    procedure InsertComponent(AComponent: TComponent);\r\n    procedure RemoveComponent(AComponent: TComponent);\r\n    procedure SetSubComponent(ASubComponent: Boolean);\r\n    function GetEnumerator: TComponentEnumerator;\r\n//    function UpdateAction(Action: TBasicAction): Boolean; dynamic;\r\n    property Components[Index: Integer]: TComponent read GetComponent;\r\n    property ComponentCount: Integer read GetComponentCount;\r\n    property ComponentIndex: Integer read GetComponentIndex write SetComponentIndex;\r\n    property ComponentState: TComponentState read FComponentState;\r\n    property ComponentStyle: TComponentStyle read FComponentStyle;\r\n    property DesignInfo: Longint read FDesignInfo write FDesignInfo;\r\n    property Owner: TComponent read FOwner;\r\n  published\r\n    property Name: TComponentName read FName write SetName stored False;\r\n    property Tag: PtrInt read FTag write FTag {default 0};\r\n  end;\r\n\r\n\r\nProcedure RegisterClass(AClass : TPersistentClass);\r\nFunction GetClass(AClassName : string) : TPersistentClass;\r\n\r\nimplementation\r\n\r\nuses JS;\r\n\r\n{ TComponentEnumerator }\r\n\r\nconstructor TComponentEnumerator.Create(AComponent: TComponent);\r\nbegin\r\n  inherited Create;\r\n  FComponent := AComponent;\r\n  FPosition := -1;\r\nend;\r\n\r\nfunction TComponentEnumerator.GetCurrent: TComponent;\r\nbegin\r\n  Result := FComponent.Components[FPosition];\r\nend;\r\n\r\nfunction TComponentEnumerator.MoveNext: Boolean;\r\nbegin\r\n  Inc(FPosition);\r\n  Result := FPosition < FComponent.ComponentCount;\r\nend;\r\n\r\n{ TListEnumerator }\r\n\r\nconstructor TListEnumerator.Create(AList: TList);\r\nbegin\r\n  inherited Create;\r\n  FList := AList;\r\n  FPosition := -1;\r\nend;\r\n\r\nfunction TListEnumerator.GetCurrent: JSValue;\r\nbegin\r\n  Result := FList[FPosition];\r\nend;\r\n\r\nfunction TListEnumerator.MoveNext: Boolean;\r\nbegin\r\n  Inc(FPosition);\r\n  Result := FPosition < FList.Count;\r\nend;\r\n\r\n{ TFPListEnumerator }\r\n\r\nconstructor TFPListEnumerator.Create(AList: TFPList);\r\nbegin\r\n  inherited Create;\r\n  FList := AList;\r\n  FPosition := -1;\r\nend;\r\n\r\nfunction TFPListEnumerator.GetCurrent: JSValue;\r\nbegin\r\n  Result := FList[FPosition];\r\nend;\r\n\r\nfunction TFPListEnumerator.MoveNext: Boolean;\r\nbegin\r\n  Inc(FPosition);\r\n  Result := FPosition < FList.Count;\r\nend;\r\n\r\n{ TFPList }\r\n\r\nprocedure TFPList.CopyMove(aList: TFPList);\r\nvar r : integer;\r\nbegin\r\n  Clear;\r\n  for r := 0 to aList.count-1 do\r\n    Add(aList[r]);\r\nend;\r\n\r\nprocedure TFPList.MergeMove(aList: TFPList);\r\nvar r : integer;\r\nbegin\r\n  For r := 0 to aList.count-1 do\r\n    if IndexOf(aList[r]) < 0 then\r\n      Add(aList[r]);\r\nend;\r\n\r\nprocedure TFPList.DoCopy(ListA, ListB: TFPList);\r\nbegin\r\n  if Assigned(ListB) then\r\n    CopyMove(ListB)\r\n  else\r\n    CopyMove(ListA);\r\nend;\r\n\r\nprocedure TFPList.DoSrcUnique(ListA, ListB: TFPList);\r\nvar r : integer;\r\nbegin\r\n  if Assigned(ListB) then\r\n    begin\r\n    Clear;\r\n    for r := 0 to ListA.Count-1 do\r\n      if ListB.IndexOf(ListA[r]) < 0 then\r\n        Add(ListA[r]);\r\n    end\r\n  else\r\n    begin\r\n    for r := Count-1 downto 0 do\r\n      if ListA.IndexOf(Self[r]) >= 0 then\r\n        Delete(r);\r\n    end;\r\nend;\r\n\r\nprocedure TFPList.DoAnd(ListA, ListB: TFPList);\r\nvar r : integer;\r\nbegin\r\n  if Assigned(ListB) then\r\n    begin\r\n    Clear;\r\n    for r := 0 to ListA.count-1 do\r\n      if ListB.IndexOf(ListA[r]) >= 0 then\r\n        Add(ListA[r]);\r\n    end\r\n  else\r\n    begin\r\n    for r := Count-1 downto 0 do\r\n      if ListA.IndexOf(Self[r]) < 0 then\r\n        Delete(r);\r\n    end;\r\nend;\r\n\r\nprocedure TFPList.DoDestUnique(ListA, ListB: TFPList);\r\n\r\n  procedure MoveElements(Src, Dest: TFPList);\r\n  var r : integer;\r\n  begin\r\n    Clear;\r\n    for r := 0 to Src.count-1 do\r\n      if Dest.IndexOf(Src[r]) < 0 then\r\n        self.Add(Src[r]);\r\n  end;\r\n\r\nvar Dest : TFPList;\r\nbegin\r\n  if Assigned(ListB) then\r\n    MoveElements(ListB, ListA)\r\n  else\r\n    Dest := TFPList.Create;\r\n    try\r\n      Dest.CopyMove(Self);\r\n      MoveElements(ListA, Dest)\r\n    finally\r\n      Dest.Destroy;\r\n    end;\r\nend;\r\n\r\nprocedure TFPList.DoOr(ListA, ListB: TFPList);\r\nbegin\r\n  if Assigned(ListB) then\r\n    begin\r\n    CopyMove(ListA);\r\n    MergeMove(ListB);\r\n    end\r\n  else\r\n    MergeMove(ListA);\r\nend;\r\n\r\nprocedure TFPList.DoXOr(ListA, ListB: TFPList);\r\nvar\r\n  r : integer;\r\n  l : TFPList;\r\nbegin\r\n  if Assigned(ListB) then\r\n    begin\r\n    Clear;\r\n    for r := 0 to ListA.Count-1 do\r\n      if ListB.IndexOf(ListA[r]) < 0 then\r\n        Add(ListA[r]);\r\n    for r := 0 to ListB.Count-1 do\r\n      if ListA.IndexOf(ListB[r]) < 0 then\r\n        Add(ListB[r]);\r\n    end\r\n  else\r\n    begin\r\n    l := TFPList.Create;\r\n    try\r\n      l.CopyMove(Self);\r\n      for r := Count-1 downto 0 do\r\n        if listA.IndexOf(Self[r]) >= 0 then\r\n          Delete(r);\r\n      for r := 0 to ListA.Count-1 do\r\n        if l.IndexOf(ListA[r]) < 0 then\r\n          Add(ListA[r]);\r\n    finally\r\n      l.Destroy;\r\n    end;\r\n    end;\r\nend;\r\n\r\nfunction TFPList.Get(Index: Integer): JSValue;\r\nbegin\r\n  If (Index < 0) or (Index >= FCount) then\r\n    RaiseIndexError(Index);\r\n  Result:=FList[Index];\r\nend;\r\n\r\nprocedure TFPList.Put(Index: Integer; Item: JSValue);\r\nbegin\r\n  if (Index < 0) or (Index >= FCount) then\r\n    RaiseIndexError(Index);\r\n  FList[Index] := Item;\r\nend;\r\n\r\nprocedure TFPList.SetCapacity(NewCapacity: Integer);\r\nbegin\r\n  If (NewCapacity < FCount) then\r\n     Error (SListCapacityError, str(NewCapacity));\r\n  if NewCapacity = FCapacity then\r\n    exit;\r\n  SetLength(FList,NewCapacity);\r\n  FCapacity := NewCapacity;\r\nend;\r\n\r\nprocedure TFPList.SetCount(NewCount: Integer);\r\nbegin\r\n  if (NewCount < 0) then\r\n    Error(SListCountError, str(NewCount));\r\n  If NewCount > FCount then\r\n    begin\r\n    If NewCount > FCapacity then\r\n      SetCapacity(NewCount);\r\n    end;\r\n  FCount := NewCount;\r\nend;\r\n\r\nprocedure TFPList.RaiseIndexError(Index: Integer);\r\nbegin\r\n  Error(SListIndexError, str(Index));\r\nend;\r\n\r\ndestructor TFPList.Destroy;\r\nbegin\r\n  Clear;\r\n  inherited Destroy;\r\nend;\r\n\r\nprocedure TFPList.AddList(AList: TFPList);\r\n\r\nVar\r\n  I : Integer;\r\n\r\nbegin\r\n  If (Capacity<Count+AList.Count) then\r\n    Capacity:=Count+AList.Count;\r\n  For I:=0 to AList.Count-1 do\r\n    Add(AList[i]);\r\nend;\r\n\r\nfunction TFPList.Add(Item: JSValue): Integer;\r\nbegin\r\n  if FCount = FCapacity then\r\n    Expand;\r\n  FList[FCount] := Item;\r\n  Result := FCount;\r\n  Inc(FCount);\r\nend;\r\n\r\nprocedure TFPList.Clear;\r\nbegin\r\n  if Assigned(FList) then\r\n  begin\r\n    SetCount(0);\r\n    SetCapacity(0);\r\n  end;\r\nend;\r\n\r\nprocedure TFPList.Delete(Index: Integer);\r\nbegin\r\n  If (Index<0) or (Index>=FCount) then\r\n    Error (SListIndexError, str(Index));\r\n  FCount := FCount-1;\r\n  System.Delete(FList,Index,1);\r\n  Dec(FCapacity);\r\nend;\r\n\r\nclass procedure TFPList.Error(const Msg: string; const Data: String);\r\nbegin\r\n  Raise EListError.CreateFmt(Msg,[Data]);\r\nend;\r\n\r\nprocedure TFPList.Exchange(Index1, Index2: Integer);\r\nvar\r\n  Temp : JSValue;\r\nbegin\r\n  If (Index1 >= FCount) or (Index1 < 0) then\r\n    Error(SListIndexError, str(Index1));\r\n  If (Index2 >= FCount) or (Index2 < 0) then\r\n    Error(SListIndexError, str(Index2));\r\n  Temp := FList[Index1];\r\n  FList[Index1] := FList[Index2];\r\n  FList[Index2] := Temp;\r\nend;\r\n\r\nfunction TFPList.Expand: TFPList;\r\nvar\r\n  IncSize : Integer;\r\nbegin\r\n  if FCount < FCapacity then exit(self);\r\n  IncSize := 4;\r\n  if FCapacity > 3 then IncSize := IncSize + 4;\r\n  if FCapacity > 8 then IncSize := IncSize+8;\r\n  if FCapacity > 127 then Inc(IncSize, FCapacity shr 2);\r\n  SetCapacity(FCapacity + IncSize);\r\n  Result := Self;\r\nend;\r\n\r\nfunction TFPList.Extract(Item: JSValue): JSValue;\r\nvar\r\n  i : Integer;\r\nbegin\r\n  i := IndexOf(Item);\r\n  if i >= 0 then\r\n  begin\r\n    Result := Item;\r\n    Delete(i);\r\n  end\r\n  else\r\n    Result := nil;\r\nend;\r\n\r\nfunction TFPList.First: JSValue;\r\nbegin\r\n  If FCount = 0 then\r\n    Result := Nil\r\n  else\r\n    Result := Items[0];\r\nend;\r\n\r\nfunction TFPList.GetEnumerator: TFPListEnumerator;\r\nbegin\r\n  Result:=TFPListEnumerator.Create(Self);\r\nend;\r\n\r\nfunction TFPList.IndexOf(Item: JSValue): Integer;\r\n\r\nVar\r\n  C : Integer;\r\n\r\nbegin\r\n  Result:=0;\r\n  C:=Count;\r\n  while (Result<C) and (FList[Result]<>Item) do\r\n    Inc(Result);\r\n  If Result>=C then\r\n    Result:=-1;\r\n\r\nend;\r\n\r\nfunction TFPList.IndexOfItem(Item: JSValue; Direction: TDirection): Integer;\r\n\r\nbegin\r\n  if Direction=fromBeginning then\r\n    Result:=IndexOf(Item)\r\n  else\r\n    begin\r\n    Result:=Count-1;\r\n    while (Result >=0) and (Flist[Result]<>Item) do\r\n      Result:=Result - 1;\r\n    end;\r\nend;\r\n\r\n\r\nprocedure TFPList.Insert(Index: Integer; Item: JSValue);\r\nbegin\r\n  if (Index < 0) or (Index > FCount )then\r\n    Error(SlistIndexError, str(Index));\r\n  TJSArray(FList).splice(Index, 0, Item);\r\n  inc(FCapacity);\r\n  inc(FCount);\r\nend;\r\n\r\nfunction TFPList.Last: JSValue;\r\nbegin\r\n  If FCount = 0 then\r\n    Result := nil\r\n  else\r\n    Result := Items[FCount - 1];\r\nend;\r\n\r\nprocedure TFPList.Move(CurIndex, NewIndex: Integer);\r\nvar\r\n  Temp: JSValue;\r\nbegin\r\n  if (CurIndex < 0) or (CurIndex > Count - 1) then\r\n    Error(SListIndexError, str(CurIndex));\r\n  if (NewIndex < 0) or (NewIndex > Count -1) then\r\n    Error(SlistIndexError, str(NewIndex));\r\n  if CurIndex=NewIndex then exit;\r\n  Temp:=FList[CurIndex];\r\n  // ToDo: use TJSArray.copyWithin if available\r\n  TJSArray(FList).splice(CurIndex,1);\r\n  TJSArray(FList).splice(NewIndex,0,Temp);\r\nend;\r\n\r\nprocedure TFPList.Assign(ListA: TFPList; AOperator: TListAssignOp;\r\n  ListB: TFPList);\r\nbegin\r\n  case AOperator of\r\n    laCopy      : DoCopy (ListA, ListB);      // replace dest with src\r\n    laSrcUnique : DoSrcUnique (ListA, ListB); // replace dest with src that are not in dest\r\n    laAnd       : DoAnd (ListA, ListB);       // remove from dest that are not in src\r\n    laDestUnique: DoDestUnique (ListA, ListB);// remove from dest that are in src\r\n    laOr        : DoOr (ListA, ListB);        // add to dest from src and not in dest\r\n    laXOr       : DoXOr (ListA, ListB);       // add to dest from src and not in dest, remove from dest that are in src\r\n  end;\r\nend;\r\n\r\nfunction TFPList.Remove(Item: JSValue): Integer;\r\nbegin\r\n  Result := IndexOf(Item);\r\n  If Result <> -1 then\r\n    Delete(Result);\r\nend;\r\n\r\nprocedure TFPList.Pack;\r\nvar\r\n  Dst, i: Integer;\r\n  V: JSValue;\r\nbegin\r\n  Dst:=0;\r\n  for i:=0 to Count-1 do\r\n    begin\r\n    V:=FList[i];\r\n    if not Assigned(V) then continue;\r\n    FList[Dst]:=V;\r\n    inc(Dst);\r\n    end;\r\nend;\r\n\r\n// Needed by Sort method.\r\n\r\nProcedure QuickSort(aList: TJSValueDynArray; L, R : Longint;\r\n                    const Compare: TListSortCompare);\r\nvar\r\n  I, J : Longint;\r\n  P, Q : JSValue;\r\nbegin\r\n  repeat\r\n    I := L;\r\n    J := R;\r\n    P := aList[ (L + R) div 2 ];\r\n    repeat\r\n      while Compare(P, aList[i]) > 0 do\r\n        I := I + 1;\r\n      while Compare(P, aList[J]) < 0 do\r\n        J := J - 1;\r\n      If I <= J then\r\n      begin\r\n        Q := aList[I];\r\n        aList[I] := aList[J];\r\n        aList[J] := Q;\r\n        I := I + 1;\r\n        J := J - 1;\r\n      end;\r\n    until I > J;\r\n    // sort the smaller range recursively\r\n    // sort the bigger range via the loop\r\n    // Reasons: memory usage is O(log(n)) instead of O(n) and loop is faster than recursion\r\n    if J - L < R - I then\r\n    begin\r\n      if L < J then\r\n        QuickSort(aList, L, J, Compare);\r\n      L := I;\r\n    end\r\n    else\r\n    begin\r\n      if I < R then\r\n        QuickSort(aList, I, R, Compare);\r\n      R := J;\r\n    end;\r\n  until L >= R;\r\nend;\r\n\r\nprocedure TFPList.Sort(const Compare: TListSortCompare);\r\nbegin\r\n  if Not Assigned(FList) or (FCount < 2) then exit;\r\n  QuickSort(Flist, 0, FCount-1, Compare);\r\nend;\r\n\r\nprocedure TFPList.ForEachCall(const proc2call: TListCallback; const arg: JSValue\r\n  );\r\nvar\r\n  i : integer;\r\n  v : JSValue;\r\nbegin\r\n  For I:=0 To Count-1 Do\r\n    begin\r\n      v:=FList[i];\r\n      if Assigned(v) then\r\n        proc2call(v,arg);\r\n    end;\r\nend;\r\n\r\nprocedure TFPList.ForEachCall(const proc2call: TListStaticCallback;\r\n  const arg: JSValue);\r\nvar\r\n  i : integer;\r\n  v : JSValue;\r\nbegin\r\n  For I:=0 To Count-1 Do\r\n    begin\r\n      v:=FList[i];\r\n      if Assigned(v) then\r\n        proc2call(v,arg);\r\n    end;\r\nend;\r\n\r\n{ TList }\r\n\r\nprocedure TList.CopyMove(aList: TList);\r\nvar\r\n  r : integer;\r\nbegin\r\n  Clear;\r\n  for r := 0 to aList.count-1 do\r\n    Add(aList[r]);\r\nend;\r\n\r\nprocedure TList.MergeMove(aList: TList);\r\nvar r : integer;\r\nbegin\r\n  For r := 0 to aList.count-1 do\r\n    if IndexOf(aList[r]) < 0 then\r\n      Add(aList[r]);\r\nend;\r\n\r\nprocedure TList.DoCopy(ListA, ListB: TList);\r\nbegin\r\n  if Assigned(ListB) then\r\n    CopyMove(ListB)\r\n  else\r\n    CopyMove(ListA);\r\nend;\r\n\r\nprocedure TList.DoSrcUnique(ListA, ListB: TList);\r\nvar r : integer;\r\nbegin\r\n  if Assigned(ListB) then\r\n    begin\r\n    Clear;\r\n    for r := 0 to ListA.Count-1 do\r\n      if ListB.IndexOf(ListA[r]) < 0 then\r\n        Add(ListA[r]);\r\n    end\r\n  else\r\n    begin\r\n    for r := Count-1 downto 0 do\r\n      if ListA.IndexOf(Self[r]) >= 0 then\r\n        Delete(r);\r\n    end;\r\nend;\r\n\r\nprocedure TList.DoAnd(ListA, ListB: TList);\r\nvar r : integer;\r\nbegin\r\n  if Assigned(ListB) then\r\n    begin\r\n    Clear;\r\n    for r := 0 to ListA.Count-1 do\r\n      if ListB.IndexOf(ListA[r]) >= 0 then\r\n        Add(ListA[r]);\r\n    end\r\n  else\r\n    begin\r\n    for r := Count-1 downto 0 do\r\n      if ListA.IndexOf(Self[r]) < 0 then\r\n        Delete(r);\r\n    end;\r\nend;\r\n\r\nprocedure TList.DoDestUnique(ListA, ListB: TList);\r\n\r\n  procedure MoveElements(Src, Dest : TList);\r\n  var r : integer;\r\n  begin\r\n    Clear;\r\n    for r := 0 to Src.Count-1 do\r\n      if Dest.IndexOf(Src[r]) < 0 then\r\n        Add(Src[r]);\r\n  end;\r\n\r\nvar Dest : TList;\r\nbegin\r\n  if Assigned(ListB) then\r\n    MoveElements(ListB, ListA)\r\n  else\r\n    try\r\n      Dest := TList.Create;\r\n      Dest.CopyMove(Self);\r\n      MoveElements(ListA, Dest)\r\n    finally\r\n      Dest.Destroy;\r\n    end;\r\nend;\r\n\r\nprocedure TList.DoOr(ListA, ListB: TList);\r\nbegin\r\n  if Assigned(ListB) then\r\n    begin\r\n    CopyMove(ListA);\r\n    MergeMove(ListB);\r\n    end\r\n  else\r\n    MergeMove(ListA);\r\nend;\r\n\r\nprocedure TList.DoXOr(ListA, ListB: TList);\r\nvar\r\n  r : integer;\r\n  l : TList;\r\nbegin\r\n  if Assigned(ListB) then\r\n    begin\r\n    Clear;\r\n    for r := 0 to ListA.Count-1 do\r\n      if ListB.IndexOf(ListA[r]) < 0 then\r\n        Add(ListA[r]);\r\n    for r := 0 to ListB.Count-1 do\r\n      if ListA.IndexOf(ListB[r]) < 0 then\r\n        Add(ListB[r]);\r\n    end\r\n  else\r\n    try\r\n      l := TList.Create;\r\n      l.CopyMove (Self);\r\n      for r := Count-1 downto 0 do\r\n        if listA.IndexOf(Self[r]) >= 0 then\r\n          Delete(r);\r\n      for r := 0 to ListA.Count-1 do\r\n        if l.IndexOf(ListA[r]) < 0 then\r\n          Add(ListA[r]);\r\n    finally\r\n      l.Destroy;\r\n    end;\r\nend;\r\n\r\nfunction TList.Get(Index: Integer): JSValue;\r\nbegin\r\n  Result := FList.Get(Index);\r\nend;\r\n\r\nprocedure TList.Put(Index: Integer; Item: JSValue);\r\nvar V : JSValue;\r\nbegin\r\n  V := Get(Index);\r\n  FList.Put(Index, Item);\r\n  if Assigned(V) then\r\n    Notify(V, lnDeleted);\r\n  if Assigned(Item) then\r\n    Notify(Item, lnAdded);\r\nend;\r\n\r\nprocedure TList.Notify(aValue: JSValue; Action: TListNotification);\r\nbegin\r\n  if Assigned(aValue) then ;\r\n  if Action=lnExtracted then ;\r\nend;\r\n\r\nprocedure TList.SetCapacity(NewCapacity: Integer);\r\nbegin\r\n  FList.SetCapacity(NewCapacity);\r\nend;\r\n\r\nfunction TList.GetCapacity: integer;\r\nbegin\r\n  Result := FList.Capacity;\r\nend;\r\n\r\nprocedure TList.SetCount(NewCount: Integer);\r\nbegin\r\n  if NewCount < FList.Count then\r\n    while FList.Count > NewCount do\r\n      Delete(FList.Count - 1)\r\n  else\r\n    FList.SetCount(NewCount);\r\nend;\r\n\r\nfunction TList.GetCount: integer;\r\nbegin\r\n  Result := FList.Count;\r\nend;\r\n\r\nfunction TList.GetList: TJSValueDynArray;\r\nbegin\r\n  Result := FList.List;\r\nend;\r\n\r\nconstructor TList.Create;\r\nbegin\r\n  inherited Create;\r\n  FList := TFPList.Create;\r\nend;\r\n\r\ndestructor TList.Destroy;\r\nbegin\r\n  if Assigned(FList) then\r\n    Clear;\r\n  FreeAndNil(FList);\r\nend;\r\n\r\nprocedure TList.AddList(AList: TList);\r\nvar\r\n  I: Integer;\r\nbegin\r\n  { this only does FList.AddList(AList.FList), avoiding notifications }\r\n  FList.AddList(AList.FList);\r\n\r\n  { make lnAdded notifications }\r\n  for I := 0 to AList.Count - 1 do\r\n    if Assigned(AList[I]) then\r\n      Notify(AList[I], lnAdded);\r\nend;\r\n\r\nfunction TList.Add(Item: JSValue): Integer;\r\nbegin\r\n  Result := FList.Add(Item);\r\n  if Assigned(Item) then\r\n    Notify(Item, lnAdded);\r\nend;\r\n\r\nprocedure TList.Clear;\r\nbegin\r\n  While (FList.Count>0) do\r\n    Delete(Count-1);\r\nend;\r\n\r\nprocedure TList.Delete(Index: Integer);\r\n\r\nvar V : JSValue;\r\n\r\nbegin\r\n  V:=FList.Get(Index);\r\n  FList.Delete(Index);\r\n  if assigned(V) then\r\n    Notify(V, lnDeleted);\r\nend;\r\n\r\nclass procedure TList.Error(const Msg: string; Data: String);\r\nbegin\r\n  Raise EListError.CreateFmt(Msg,[Data]);\r\nend;\r\n\r\nprocedure TList.Exchange(Index1, Index2: Integer);\r\nbegin\r\n  FList.Exchange(Index1, Index2);\r\nend;\r\n\r\nfunction TList.Expand: TList;\r\nbegin\r\n  FList.Expand;\r\n  Result:=Self;\r\nend;\r\n\r\nfunction TList.Extract(Item: JSValue): JSValue;\r\nvar c : integer;\r\nbegin\r\n  c := FList.Count;\r\n  Result := FList.Extract(Item);\r\n  if c <> FList.Count then\r\n    Notify (Result, lnExtracted);\r\nend;\r\n\r\nfunction TList.First: JSValue;\r\nbegin\r\n  Result := FList.First;\r\nend;\r\n\r\nfunction TList.GetEnumerator: TListEnumerator;\r\nbegin\r\n  Result:=TListEnumerator.Create(Self);\r\nend;\r\n\r\nfunction TList.IndexOf(Item: JSValue): Integer;\r\nbegin\r\n  Result := FList.IndexOf(Item);\r\nend;\r\n\r\nprocedure TList.Insert(Index: Integer; Item: JSValue);\r\nbegin\r\n  FList.Insert(Index, Item);\r\n  if Assigned(Item) then\r\n    Notify(Item,lnAdded);\r\nend;\r\n\r\nfunction TList.Last: JSValue;\r\nbegin\r\n  Result := FList.Last;\r\nend;\r\n\r\nprocedure TList.Move(CurIndex, NewIndex: Integer);\r\nbegin\r\n  FList.Move(CurIndex, NewIndex);\r\nend;\r\n\r\nprocedure TList.Assign(ListA: TList; AOperator: TListAssignOp; ListB: TList);\r\nbegin\r\n  case AOperator of\r\n    laCopy      : DoCopy (ListA, ListB);      // replace dest with src\r\n    laSrcUnique : DoSrcUnique (ListA, ListB); // replace dest with src that are not in dest\r\n    laAnd       : DoAnd (ListA, ListB);       // remove from dest that are not in src\r\n    laDestUnique: DoDestUnique (ListA, ListB);// remove from dest that are in src\r\n    laOr        : DoOr (ListA, ListB);        // add to dest from src and not in dest\r\n    laXOr       : DoXOr (ListA, ListB);       // add to dest from src and not in dest, remove from dest that are in src\r\n  end;\r\nend;\r\n\r\nfunction TList.Remove(Item: JSValue): Integer;\r\nbegin\r\n  Result := IndexOf(Item);\r\n  if Result <> -1 then\r\n    Self.Delete(Result);\r\nend;\r\n\r\nprocedure TList.Pack;\r\nbegin\r\n  FList.Pack;\r\nend;\r\n\r\nprocedure TList.Sort(const Compare: TListSortCompare);\r\nbegin\r\n  FList.Sort(Compare);\r\nend;\r\n\r\n{ TPersistent }\r\n\r\nprocedure TPersistent.AssignError(Source: TPersistent);\r\nvar\r\n  SourceName: String;\r\nbegin\r\n  if Source<>Nil then\r\n    SourceName:=Source.ClassName\r\n  else\r\n    SourceName:='Nil';\r\n  raise EConvertError.Create('Cannot assign a '+SourceName+' to a '+ClassName+'.');\r\nend;\r\n\r\nprocedure TPersistent.AssignTo(Dest: TPersistent);\r\nbegin\r\n  Dest.AssignError(Self);\r\nend;\r\n\r\nfunction TPersistent.GetOwner: TPersistent;\r\nbegin\r\n  Result:=nil;\r\nend;\r\n\r\nprocedure TPersistent.Assign(Source: TPersistent);\r\nbegin\r\n  If Source<>Nil then\r\n    Source.AssignTo(Self)\r\n  else\r\n    AssignError(Nil);\r\nend;\r\n\r\nfunction TPersistent.GetNamePath: string;\r\nvar\r\n  OwnerName: String;\r\n  TheOwner: TPersistent;\r\nbegin\r\n  Result:=ClassName;\r\n  TheOwner:=GetOwner;\r\n  if TheOwner<>Nil then\r\n  begin\r\n    OwnerName:=TheOwner.GetNamePath;\r\n    if OwnerName<>'' then Result:=OwnerName+'.'+Result;\r\n  end;\r\nend;\r\n\r\n{\r\n    This file is part of the Free Component Library (FCL)\r\n    Copyright (c) 1999-2000 by the Free Pascal development team\r\n\r\n    See the file COPYING.FPC, included in this distribution,\r\n    for details about the copyright.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n **********************************************************************}\r\n\r\n{****************************************************************************}\r\n{*                        TStringsEnumerator                                *}\r\n{****************************************************************************}\r\n\r\nconstructor TStringsEnumerator.Create(AStrings: TStrings);\r\nbegin\r\n  inherited Create;\r\n  FStrings := AStrings;\r\n  FPosition := -1;\r\nend;\r\n\r\nfunction TStringsEnumerator.GetCurrent: String;\r\nbegin\r\n  Result := FStrings[FPosition];\r\nend;\r\n\r\nfunction TStringsEnumerator.MoveNext: Boolean;\r\nbegin\r\n  Inc(FPosition);\r\n  Result := FPosition < FStrings.Count;\r\nend;\r\n\r\n{****************************************************************************}\r\n{*                             TStrings                                     *}\r\n{****************************************************************************}\r\n\r\n// Function to quote text. Should move maybe to sysutils !!\r\n// Also, it is not clear at this point what exactly should be done.\r\n\r\n{ //!! is used to mark unsupported things. }\r\n\r\n(*\r\nFunction QuoteString (Const S : String; Const Quote : String) : String;\r\nVar\r\n  I,J : Integer;\r\nbegin\r\n  J:=0;\r\n  Result:=S;\r\n  for i:=1 to length(s) do\r\n   begin\r\n     inc(j);\r\n     if S[i]=Quote then\r\n      begin\r\n        Insert(Quote,Result,J);\r\n        inc(j);\r\n      end;\r\n   end;\r\n  Result:=Quote+Result+Quote;\r\nend;\r\n*)\r\n\r\n{\r\n  For compatibility we can't add a Constructor to TSTrings to initialize\r\n  the special characters. Therefore we add a routine which is called whenever\r\n  the special chars are needed.\r\n}\r\n\r\nProcedure Tstrings.CheckSpecialChars;\r\n\r\nbegin\r\n  If Not FSpecialCharsInited then\r\n    begin\r\n    FQuoteChar:='\"';\r\n    FDelimiter:=',';\r\n    FNameValueSeparator:='=';\r\n    FLBS:=DefaultTextLineBreakStyle;\r\n    FSpecialCharsInited:=true;\r\n    FLineBreak:=sLineBreak;\r\n    end;\r\nend;\r\n\r\nFunction TStrings.GetSkipLastLineBreak : Boolean;\r\n\r\nbegin\r\n  CheckSpecialChars;\r\n  Result:=FSkipLastLineBreak;\r\nend;\r\n\r\nprocedure TStrings.SetSkipLastLineBreak(const AValue : Boolean);\r\n\r\nbegin\r\n  CheckSpecialChars;\r\n  FSkipLastLineBreak:=AValue;\r\nend;\r\n\r\nFunction TStrings.GetLBS : TTextLineBreakStyle;\r\nbegin\r\n  CheckSpecialChars;\r\n  Result:=FLBS;\r\nend;\r\n\r\nProcedure TStrings.SetLBS (AValue : TTextLineBreakStyle);\r\nbegin\r\n  CheckSpecialChars;\r\n  FLBS:=AValue;\r\nend;\r\n\r\nprocedure TStrings.SetDelimiter(c:Char);\r\nbegin\r\n  CheckSpecialChars;\r\n  FDelimiter:=c;\r\nend;\r\n\r\nFunction TStrings.GetDelimiter : Char;\r\nbegin\r\n  CheckSpecialChars;\r\n  Result:=FDelimiter;\r\nend;\r\n\r\nprocedure TStrings.SetLineBreak(Const S : String);\r\nbegin\r\n  CheckSpecialChars;\r\n  FLineBreak:=S;\r\nend;\r\n\r\nFunction TStrings.GetLineBreak : String;\r\nbegin\r\n  CheckSpecialChars;\r\n  Result:=FLineBreak;\r\nend;\r\n\r\n\r\nprocedure TStrings.SetQuoteChar(c:Char);\r\nbegin\r\n  CheckSpecialChars;\r\n  FQuoteChar:=c;\r\nend;\r\n\r\nFunction TStrings.GetQuoteChar :Char;\r\nbegin\r\n  CheckSpecialChars;\r\n  Result:=FQuoteChar;\r\nend;\r\n\r\nprocedure TStrings.SetNameValueSeparator(c:Char);\r\nbegin\r\n  CheckSpecialChars;\r\n  FNameValueSeparator:=c;\r\nend;\r\n\r\nFunction TStrings.GetNameValueSeparator :Char;\r\nbegin\r\n  CheckSpecialChars;\r\n  Result:=FNameValueSeparator;\r\nend;\r\n\r\n\r\nfunction TStrings.GetCommaText: string;\r\n\r\nVar\r\n  C1,C2 : Char;\r\n  FSD : Boolean;\r\n\r\nbegin\r\n  CheckSpecialChars;\r\n  FSD:=StrictDelimiter;\r\n  C1:=Delimiter;\r\n  C2:=QuoteChar;\r\n  Delimiter:=',';\r\n  QuoteChar:='\"';\r\n  StrictDelimiter:=False;\r\n  Try\r\n    Result:=GetDelimitedText;\r\n  Finally\r\n    Delimiter:=C1;\r\n    QuoteChar:=C2;\r\n    StrictDelimiter:=FSD;\r\n  end;\r\nend;\r\n\r\n\r\nFunction TStrings.GetDelimitedText: string;\r\n\r\nVar\r\n  I: integer;\r\n  RE : string;\r\n  S : String;\r\n  doQuote : Boolean;\r\n\r\nbegin\r\n  CheckSpecialChars;\r\n  result:='';\r\n  RE:=QuoteChar+'|'+Delimiter;\r\n  if not StrictDelimiter then\r\n    RE:=' |'+RE;\r\n  RE:='/'+RE+'/';\r\n  // Check for break characters and quote if required.\r\n  For i:=0 to count-1 do\r\n    begin\r\n    S:=Strings[i];\r\n    doQuote:=FAlwaysQuote or (TJSString(s).search(RE)=-1);\r\n    if DoQuote then\r\n      Result:=Result+QuoteString(S,QuoteChar)\r\n    else\r\n      Result:=Result+S;\r\n    if I<Count-1 then\r\n      Result:=Result+Delimiter;\r\n    end;\r\n  // Quote empty string:\r\n  If (Length(Result)=0) and (Count=1) then\r\n    Result:=QuoteChar+QuoteChar;\r\nend;\r\n\r\nprocedure TStrings.GetNameValue(Index : Integer; Out AName,AValue : String);\r\n\r\nVar L : longint;\r\n\r\nbegin\r\n  CheckSpecialChars;\r\n  AValue:=Strings[Index];\r\n  L:=Pos(FNameValueSeparator,AValue);\r\n  If L<>0 then\r\n    begin\r\n    AName:=Copy(AValue,1,L-1);\r\n    //    System.Delete(AValue,1,L);\r\n    AValue:=Copy(AValue,L+1,length(AValue)-L);\r\n    end\r\n  else\r\n    AName:='';\r\nend;\r\n\r\nfunction TStrings.ExtractName(const s:String):String;\r\nvar\r\n  L: Longint;\r\nbegin\r\n  CheckSpecialChars;\r\n  L:=Pos(FNameValueSeparator,S);\r\n  If L<>0 then\r\n    Result:=Copy(S,1,L-1)\r\n  else\r\n    Result:='';\r\nend;\r\n\r\nfunction TStrings.GetName(Index: Integer): string;\r\n\r\nVar\r\n  V : String;\r\n\r\nbegin\r\n  GetNameValue(Index,Result,V);\r\nend;\r\n\r\nFunction TStrings.GetValue(const Name: string): string;\r\n\r\nVar\r\n  L : longint;\r\n  N : String;\r\n\r\nbegin\r\n  Result:='';\r\n  L:=IndexOfName(Name);\r\n  If L<>-1 then\r\n    GetNameValue(L,N,Result);\r\nend;\r\n\r\nFunction TStrings.GetValueFromIndex(Index: Integer): string;\r\n\r\nVar\r\n  N : String;\r\n\r\nbegin\r\n  GetNameValue(Index,N,Result);\r\nend;\r\n\r\nProcedure TStrings.SetValueFromIndex(Index: Integer; const Value: string);\r\n\r\nbegin\r\n  If (Value='') then\r\n    Delete(Index)\r\n  else\r\n    begin\r\n    If (Index<0) then\r\n      Index:=Add('');\r\n    CheckSpecialChars;\r\n    Strings[Index]:=GetName(Index)+FNameValueSeparator+Value;\r\n    end;\r\nend;\r\n\r\nProcedure TStrings.SetDelimitedText(const AValue: string);\r\nvar i,j:integer;\r\n    aNotFirst:boolean;\r\nbegin\r\n CheckSpecialChars;\r\n BeginUpdate;\r\n\r\n i:=1;\r\n j:=1;\r\n aNotFirst:=false;\r\n\r\n { Paraphrased from Delphi XE2 help:\r\n Strings must be separated by Delimiter characters or spaces.\r\n They may be enclosed in QuoteChars.\r\n QuoteChars in the string must be repeated to distinguish them from the QuoteChars enclosing the string.\r\n }\r\n try\r\n  Clear;\r\n  If StrictDelimiter then\r\n    begin\r\n    while i<=length(AValue) do begin\r\n     // skip delimiter\r\n     if aNotFirst and (i<=length(AValue)) and (AValue[i]=FDelimiter) then inc(i);\r\n\r\n     // read next string\r\n     if i<=length(AValue) then begin\r\n      if AValue[i]=FQuoteChar then begin\r\n       // next string is quoted\r\n       j:=i+1;\r\n       while (j<=length(AValue)) and\r\n             ( (AValue[j]<>FQuoteChar) or\r\n               ( (j+1<=length(AValue)) and (AValue[j+1]=FQuoteChar) ) ) do begin\r\n        if (j<=length(AValue)) and (AValue[j]=FQuoteChar) then inc(j,2)\r\n                                                          else inc(j);\r\n       end;\r\n       // j is position of closing quote\r\n       Add( StringReplace (Copy(AValue,i+1,j-i-1),\r\n                           FQuoteChar+FQuoteChar,FQuoteChar, [rfReplaceAll]));\r\n       i:=j+1;\r\n      end else begin\r\n       // next string is not quoted; read until delimiter\r\n       j:=i;\r\n       while (j<=length(AValue)) and\r\n             (AValue[j]<>FDelimiter) do inc(j);\r\n       Add( Copy(AValue,i,j-i));\r\n       i:=j;\r\n      end;\r\n     end else begin\r\n      if aNotFirst then Add('');\r\n     end;\r\n\r\n     aNotFirst:=true;\r\n    end;\r\n    end\r\n  else\r\n    begin\r\n    while i<=length(AValue) do begin\r\n     // skip delimiter\r\n     if aNotFirst and (i<=length(AValue)) and (AValue[i]=FDelimiter) then inc(i);\r\n\r\n     // skip spaces\r\n     while (i<=length(AValue)) and (Ord(AValue[i])<=Ord(' ')) do inc(i);\r\n\r\n     // read next string\r\n     if i<=length(AValue) then begin\r\n      if AValue[i]=FQuoteChar then begin\r\n       // next string is quoted\r\n       j:=i+1;\r\n       while (j<=length(AValue)) and\r\n             ( (AValue[j]<>FQuoteChar) or\r\n               ( (j+1<=length(AValue)) and (AValue[j+1]=FQuoteChar) ) ) do begin\r\n        if (j<=length(AValue)) and (AValue[j]=FQuoteChar) then inc(j,2)\r\n                                                          else inc(j);\r\n       end;\r\n       // j is position of closing quote\r\n       Add( StringReplace (Copy(AValue,i+1,j-i-1),\r\n                           FQuoteChar+FQuoteChar,FQuoteChar, [rfReplaceAll]));\r\n       i:=j+1;\r\n      end else begin\r\n       // next string is not quoted; read until control character/space/delimiter\r\n       j:=i;\r\n       while (j<=length(AValue)) and\r\n             (Ord(AValue[j])>Ord(' ')) and\r\n             (AValue[j]<>FDelimiter) do inc(j);\r\n       Add( Copy(AValue,i,j-i));\r\n       i:=j;\r\n      end;\r\n     end else begin\r\n      if aNotFirst then Add('');\r\n     end;\r\n\r\n     // skip spaces\r\n     while (i<=length(AValue)) and (Ord(AValue[i])<=Ord(' ')) do inc(i);\r\n\r\n     aNotFirst:=true;\r\n    end;\r\n    end;\r\n finally\r\n   EndUpdate;\r\n end;\r\nend;\r\n\r\nProcedure TStrings.SetCommaText(const Value: string);\r\n\r\nVar\r\n  C1,C2 : Char;\r\n\r\nbegin\r\n  CheckSpecialChars;\r\n  C1:=Delimiter;\r\n  C2:=QuoteChar;\r\n  Delimiter:=',';\r\n  QuoteChar:='\"';\r\n  Try\r\n    SetDelimitedText(Value);\r\n  Finally\r\n    Delimiter:=C1;\r\n    QuoteChar:=C2;\r\n  end;\r\nend;\r\n\r\nProcedure TStrings.SetValue(const Name, Value: string);\r\n\r\nVar L : longint;\r\n\r\nbegin\r\n  CheckSpecialChars;\r\n  L:=IndexOfName(Name);\r\n  if L=-1 then\r\n   Add (Name+FNameValueSeparator+Value)\r\n  else\r\n   Strings[L]:=Name+FNameValueSeparator+value;\r\nend;\r\n\r\n\r\nProcedure TStrings.Error(const Msg: string; Data: Integer);\r\nbegin\r\n  Raise EStringListError.CreateFmt(Msg,[IntToStr(Data)]);\r\nend;\r\n\r\nFunction TStrings.GetCapacity: Integer;\r\n\r\nbegin\r\n  Result:=Count;\r\nend;\r\n\r\n\r\n\r\nFunction TStrings.GetObject(Index: Integer): TObject;\r\n\r\nbegin\r\n  if Index=0 then ;\r\n  Result:=Nil;\r\nend;\r\n\r\nFunction TStrings.GetTextStr: string;\r\n\r\nVar\r\n  I : Longint;\r\n  S,NL : String;\r\n\r\nbegin\r\n  CheckSpecialChars;\r\n  // Determine needed place\r\n  if FLineBreak<>sLineBreak then\r\n    NL:=FLineBreak\r\n  else\r\n    Case FLBS of\r\n      tlbsLF   : NL:=#10;\r\n      tlbsCRLF : NL:=#13#10;\r\n      tlbsCR   : NL:=#13;\r\n    end;\r\n  Result:='';\r\n  For i:=0 To count-1 do\r\n    begin\r\n    S:=Strings[I];\r\n    Result:=Result+S;\r\n    if (I<Count-1) or Not SkipLastLineBreak then\r\n      Result:=Result+NL;\r\n    end;\r\nend;\r\n\r\n\r\n\r\nProcedure TStrings.Put(Index: Integer; const S: string);\r\n\r\nVar Obj : TObject;\r\n\r\nbegin\r\n  Obj:=Objects[Index];\r\n  Delete(Index);\r\n  InsertObject(Index,S,Obj);\r\nend;\r\n\r\n\r\n\r\nProcedure TStrings.PutObject(Index: Integer; AObject: TObject);\r\n\r\nbegin\r\n  // Empty.\r\n  if Index=0 then exit;\r\n  if AObject=nil then exit;\r\nend;\r\n\r\n\r\n\r\nProcedure TStrings.SetCapacity(NewCapacity: Integer);\r\n\r\nbegin\r\n  // Empty.\r\n  if NewCapacity=0 then ;\r\nend;\r\n\r\nFunction TStrings.GetNextLineBreak (Const Value : String; Out S : String; Var P : Integer) : Boolean;\r\n\r\nVar\r\n  PP : Integer;\r\n\r\nbegin\r\n  S:='';\r\n  Result:=False;\r\n  If ((Length(Value)-P)<0) then\r\n    exit;\r\n  PP:=TJSString(Value).IndexOf(LineBreak,P-1)+1;\r\n  if (PP<1) then\r\n    PP:=Length(Value)+1;\r\n  S:=Copy(Value,P,PP-P);\r\n  P:=PP+length(LineBreak);\r\n  Result:=True;\r\nend;\r\n\r\nProcedure TStrings.DoSetTextStr(const Value: string; DoClear : Boolean);\r\n\r\nVar\r\n  S : String;\r\n  P : Integer;\r\n\r\nbegin\r\n  Try\r\n    BeginUpdate;\r\n    if DoClear then\r\n      Clear;\r\n    P:=1;\r\n    While GetNextLineBreak (Value,S,P) do\r\n      Add(S);\r\n  finally\r\n    EndUpdate;\r\n  end;\r\nend;\r\n\r\nProcedure TStrings.SetTextStr(const Value: string);\r\n\r\nbegin\r\n  CheckSpecialChars;\r\n  DoSetTextStr(Value,True);\r\nend;\r\n\r\nProcedure TStrings.AddText(const S: string);\r\n\r\nbegin\r\n  CheckSpecialChars;\r\n  DoSetTextStr(S,False);\r\nend;\r\n\r\nProcedure TStrings.SetUpdateState(Updating: Boolean);\r\n\r\nbegin\r\n  // FPONotifyObservers(Self,ooChange,Nil);\r\n  if Updating then ;\r\nend;\r\n\r\n\r\n\r\ndestructor TSTrings.Destroy;\r\n\r\nbegin\r\n  inherited destroy;\r\nend;\r\n\r\n\r\nconstructor TStrings.Create;\r\nbegin\r\n  inherited Create;\r\n  FAlwaysQuote:=False;\r\nend;\r\n\r\nFunction TStrings.Add(const S: string): Integer;\r\n\r\nbegin\r\n  Result:=Count;\r\n  Insert (Count,S);\r\nend;\r\n\r\n(*\r\nfunction TStrings.AddFmt(const Fmt : string; const Args : Array of const): Integer;\r\n\r\nbegin\r\n  Result:=Add(Format(Fmt,Args));\r\nend;\r\n*)\r\n\r\nFunction TStrings.AddObject(const S: string; AObject: TObject): Integer;\r\n\r\nbegin\r\n  Result:=Add(S);\r\n  Objects[result]:=AObject;\r\nend;\r\n\r\n(*\r\nfunction TStrings.AddObject(const Fmt: string; Args : Array of const; AObject: TObject): Integer;\r\n\r\nbegin\r\n  Result:=AddObject(Format(Fmt,Args),AObject);\r\nend;\r\n*)\r\n\r\nProcedure TStrings.Append(const S: string);\r\n\r\nbegin\r\n  Add (S);\r\nend;\r\n\r\n\r\n\r\nProcedure TStrings.AddStrings(TheStrings: TStrings; ClearFirst : Boolean);\r\n\r\n\r\nbegin\r\n  beginupdate;\r\n  try\r\n    if ClearFirst then\r\n      Clear;\r\n    AddStrings(TheStrings);\r\n  finally\r\n    EndUpdate;\r\n  end;\r\nend;\r\n\r\nProcedure TStrings.AddStrings(TheStrings: TStrings);\r\n\r\nVar Runner : longint;\r\nbegin\r\n  For Runner:=0 to TheStrings.Count-1 do\r\n    self.AddObject (Thestrings[Runner],TheStrings.Objects[Runner]);\r\nend;\r\n\r\nProcedure TStrings.AddStrings(const TheStrings: array of string);\r\n\r\nVar Runner : longint;\r\nbegin\r\n  if Count + High(TheStrings)+1 > Capacity then\r\n    Capacity := Count + High(TheStrings)+1;\r\n  For Runner:=Low(TheStrings) to High(TheStrings) do\r\n    self.Add(Thestrings[Runner]);\r\nend;\r\n\r\n\r\nProcedure TStrings.AddStrings(const TheStrings: array of string; ClearFirst : Boolean);\r\n\r\nbegin\r\n  beginupdate;\r\n  try\r\n    if ClearFirst then\r\n      Clear;\r\n    AddStrings(TheStrings);\r\n  finally\r\n    EndUpdate;\r\n  end;\r\nend;\r\n\r\n\r\nfunction TStrings.AddPair(const AName, AValue: string): TStrings;\r\n\r\nbegin\r\n  Result:=AddPair(AName,AValue,Nil);\r\nend;\r\n\r\nfunction TStrings.AddPair(const AName, AValue: string; AObject: TObject): TStrings;\r\n\r\nbegin\r\n  Result := Self;\r\n  AddObject(AName+NameValueSeparator+AValue, AObject);\r\nend;\r\n\r\n\r\nProcedure TStrings.Assign(Source: TPersistent);\r\n\r\nVar\r\n  S : TStrings;\r\n\r\nbegin\r\n  If Source is TStrings then\r\n    begin\r\n    S:=TStrings(Source);\r\n    BeginUpdate;\r\n    Try\r\n      clear;\r\n      FSpecialCharsInited:=S.FSpecialCharsInited;\r\n      FQuoteChar:=S.FQuoteChar;\r\n      FDelimiter:=S.FDelimiter;\r\n      FNameValueSeparator:=S.FNameValueSeparator;\r\n      FLBS:=S.FLBS;\r\n      FLineBreak:=S.FLineBreak;\r\n      AddStrings(S);\r\n    finally\r\n      EndUpdate;\r\n    end;\r\n    end\r\n  else\r\n    Inherited Assign(Source);\r\nend;\r\n\r\n\r\n\r\nProcedure TStrings.BeginUpdate;\r\n\r\nbegin\r\n   if FUpdateCount = 0 then SetUpdateState(true);\r\n   inc(FUpdateCount);\r\nend;\r\n\r\n\r\n\r\nProcedure TStrings.EndUpdate;\r\n\r\nbegin\r\n  If FUpdateCount>0 then\r\n     Dec(FUpdateCount);\r\n  if FUpdateCount=0 then\r\n    SetUpdateState(False);\r\nend;\r\n\r\n\r\n\r\nFunction TStrings.Equals(Obj: TObject): Boolean;\r\n\r\nbegin\r\n  if Obj is TStrings then\r\n    Result := Equals(TStrings(Obj))\r\n  else\r\n    Result := inherited Equals(Obj);\r\nend;\r\n\r\n\r\n\r\nFunction TStrings.Equals(TheStrings: TStrings): Boolean;\r\n\r\nVar Runner,Nr : Longint;\r\n\r\nbegin\r\n  Result:=False;\r\n  Nr:=Self.Count;\r\n  if Nr<>TheStrings.Count then exit;\r\n  For Runner:=0 to Nr-1 do\r\n    If Strings[Runner]<>TheStrings[Runner] then exit;\r\n  Result:=True;\r\nend;\r\n\r\n\r\n\r\nProcedure TStrings.Exchange(Index1, Index2: Integer);\r\n\r\nVar\r\n  Obj : TObject;\r\n  Str : String;\r\n\r\nbegin\r\n  beginUpdate;\r\n  Try\r\n    Obj:=Objects[Index1];\r\n    Str:=Strings[Index1];\r\n    Objects[Index1]:=Objects[Index2];\r\n    Strings[Index1]:=Strings[Index2];\r\n    Objects[Index2]:=Obj;\r\n    Strings[Index2]:=Str;\r\n  finally\r\n    EndUpdate;\r\n  end;\r\nend;\r\n\r\n\r\nfunction TStrings.GetEnumerator: TStringsEnumerator;\r\nbegin\r\n  Result:=TStringsEnumerator.Create(Self);\r\nend;\r\n\r\n\r\nFunction TStrings.DoCompareText(const s1,s2 : string) : PtrInt;\r\nbegin\r\n  result:=CompareText(s1,s2);\r\nend;\r\n\r\n\r\nFunction TStrings.IndexOf(const S: string): Integer;\r\nbegin\r\n  Result:=0;\r\n  While (Result<Count) and (DoCompareText(Strings[Result],S)<>0) do Result:=Result+1;\r\n  if Result=Count then Result:=-1;\r\nend;\r\n\r\n\r\nFunction TStrings.IndexOfName(const Name: string): Integer;\r\nVar\r\n  len : longint;\r\n  S : String;\r\nbegin\r\n  CheckSpecialChars;\r\n  Result:=0;\r\n  while (Result<Count) do\r\n    begin\r\n    S:=Strings[Result];\r\n    len:=pos(FNameValueSeparator,S)-1;\r\n    if (len>=0) and (DoCompareText(Name,Copy(S,1,Len))=0) then\r\n      exit;\r\n    inc(result);\r\n    end;\r\n  result:=-1;\r\nend;\r\n\r\n\r\nFunction TStrings.IndexOfObject(AObject: TObject): Integer;\r\nbegin\r\n  Result:=0;\r\n  While (Result<count) and (Objects[Result]<>AObject) do Result:=Result+1;\r\n  If Result=Count then Result:=-1;\r\nend;\r\n\r\n\r\nProcedure TStrings.InsertObject(Index: Integer; const S: string;\r\n  AObject: TObject);\r\n\r\nbegin\r\n  Insert (Index,S);\r\n  Objects[Index]:=AObject;\r\nend;\r\n\r\nProcedure TStrings.Move(CurIndex, NewIndex: Integer);\r\nVar\r\n  Obj : TObject;\r\n  Str : String;\r\nbegin\r\n  BeginUpdate;\r\n  Try\r\n    Obj:=Objects[CurIndex];\r\n    Str:=Strings[CurIndex];\r\n    Objects[CurIndex]:=Nil; // Prevent Delete from freeing.\r\n    Delete(Curindex);\r\n    InsertObject(NewIndex,Str,Obj);\r\n  finally\r\n    EndUpdate;\r\n    end;\r\nend;\r\n\r\n\r\n{****************************************************************************}\r\n{*                             TStringList                                  *}\r\n{****************************************************************************}\r\n\r\n\r\nprocedure TStringList.ExchangeItemsInt(Index1, Index2: Integer);\r\n\r\nVar\r\n  S : String;\r\n  O : TObject;\r\n\r\nbegin\r\n  S:=Flist[Index1].FString;\r\n  O:=Flist[Index1].FObject;\r\n  Flist[Index1].Fstring:=Flist[Index2].Fstring;\r\n  Flist[Index1].FObject:=Flist[Index2].FObject;\r\n  Flist[Index2].Fstring:=S;\r\n  Flist[Index2].FObject:=O;\r\nend;\r\n\r\nfunction TStringList.GetSorted: Boolean;\r\nbegin\r\n  Result:=FSortStyle in [sslUser,sslAuto];\r\nend;\r\n\r\n\r\nprocedure TStringList.ExchangeItems(Index1, Index2: Integer);\r\nbegin\r\n  ExchangeItemsInt(Index1, Index2);\r\nend;\r\n\r\n\r\nprocedure TStringList.Grow;\r\n\r\nVar\r\n  NC : Integer;\r\n\r\nbegin\r\n  NC:=Capacity;\r\n  If NC>=256 then\r\n    NC:=NC+(NC Div 4)\r\n  else if NC=0 then\r\n    NC:=4\r\n  else\r\n    NC:=NC*4;\r\n  SetCapacity(NC);\r\nend;\r\n\r\nprocedure TStringList.InternalClear(FromIndex: Integer; ClearOnly: Boolean);\r\n\r\nVar\r\n  I: Integer;\r\n\r\nbegin\r\n  if FromIndex < FCount then\r\n    begin\r\n      if FOwnsObjects then\r\n        begin\r\n          For I:=FromIndex to FCount-1 do\r\n            begin\r\n              Flist[I].FString:='';\r\n              freeandnil(Flist[i].FObject);\r\n            end;\r\n        end\r\n      else\r\n        begin\r\n          For I:=FromIndex to FCount-1 do\r\n            Flist[I].FString:='';\r\n        end;\r\n      FCount:=FromIndex;\r\n    end;\r\n  if Not ClearOnly then\r\n    SetCapacity(0);\r\nend;\r\n\r\n\r\nprocedure TStringList.QuickSort(L, R: Integer; CompareFn: TStringListSortCompare\r\n  );\r\n\r\n\r\nvar\r\n  Pivot, vL, vR: Integer;\r\n\r\nbegin\r\n  //if ExchangeItems is override call that, else call (faster) ExchangeItemsInt\r\n\r\n  if R - L <= 1 then begin // a little bit of time saver\r\n    if L < R then\r\n      if CompareFn(Self, L, R) > 0 then\r\n        ExchangeItems(L, R);\r\n\r\n    Exit;\r\n  end;\r\n\r\n  vL := L;\r\n  vR := R;\r\n\r\n  Pivot := L + Random(R - L); // they say random is best\r\n\r\n  while vL < vR do begin\r\n    while (vL < Pivot) and (CompareFn(Self, vL, Pivot) <= 0) do\r\n      Inc(vL);\r\n\r\n    while (vR > Pivot) and (CompareFn(Self, vR, Pivot) > 0) do\r\n      Dec(vR);\r\n\r\n    ExchangeItems(vL, vR);\r\n\r\n    if Pivot = vL then // swap pivot if we just hit it from one side\r\n      Pivot := vR\r\n    else if Pivot = vR then\r\n      Pivot := vL;\r\n  end;\r\n\r\n  if Pivot - 1 >= L then\r\n    QuickSort(L, Pivot - 1, CompareFn);\r\n  if Pivot + 1 <= R then\r\n    QuickSort(Pivot + 1, R, CompareFn);\r\nend;\r\n\r\n\r\nprocedure TStringList.InsertItem(Index: Integer; const S: string);\r\nbegin\r\n  InsertItem(Index, S, nil);\r\nend;\r\n\r\n\r\nprocedure TStringList.InsertItem(Index: Integer; const S: string; O: TObject);\r\n\r\nVar\r\n  It : TStringItem;\r\n  \r\nbegin\r\n  Changing;\r\n  If FCount=Capacity then Grow;\r\n  it.FString:=S;\r\n  it.FObject:=O;\r\n  TJSArray(FList).Splice(Index,0,It);\r\n  Inc(FCount);\r\n  Changed;\r\nend;\r\n\r\n\r\nprocedure TStringList.SetSorted(Value: Boolean);\r\n\r\nbegin\r\n  If Value then\r\n    SortStyle:=sslAuto\r\n  else\r\n    SortStyle:=sslNone\r\nend;\r\n\r\n\r\n\r\nprocedure TStringList.Changed;\r\n\r\nbegin\r\n  If (FUpdateCount=0) Then\r\n   begin\r\n   If Assigned(FOnChange) then\r\n     FOnchange(Self);\r\n   end;\r\nend;\r\n\r\n\r\n\r\nprocedure TStringList.Changing;\r\n\r\nbegin\r\n  If FUpdateCount=0 then\r\n    if Assigned(FOnChanging) then\r\n      FOnchanging(Self);\r\nend;\r\n\r\n\r\n\r\nfunction TStringList.Get(Index: Integer): string;\r\n\r\nbegin\r\n  CheckIndex(Index);\r\n  Result:=Flist[Index].FString;\r\nend;\r\n\r\n\r\n\r\nfunction TStringList.GetCapacity: Integer;\r\n\r\nbegin\r\n  Result:=Length(FList);\r\nend;\r\n\r\n\r\n\r\nfunction TStringList.GetCount: Integer;\r\n\r\nbegin\r\n  Result:=FCount;\r\nend;\r\n\r\n\r\n\r\nfunction TStringList.GetObject(Index: Integer): TObject;\r\n\r\nbegin\r\n  CheckIndex(Index);\r\n  Result:=Flist[Index].FObject;\r\nend;\r\n\r\n\r\n\r\nprocedure TStringList.Put(Index: Integer; const S: string);\r\n\r\nbegin\r\n  If Sorted then\r\n    Error(SSortedListError,0);\r\n  CheckIndex(Index);\r\n  Changing;\r\n  Flist[Index].FString:=S;\r\n  Changed;\r\nend;\r\n\r\n\r\n\r\nprocedure TStringList.PutObject(Index: Integer; AObject: TObject);\r\n\r\nbegin\r\n  CheckIndex(Index);\r\n  Changing;\r\n  Flist[Index].FObject:=AObject;\r\n  Changed;\r\nend;\r\n\r\n\r\n\r\nprocedure TStringList.SetCapacity(NewCapacity: Integer);\r\n\r\nbegin\r\n  If (NewCapacity<0) then\r\n     Error (SListCapacityError,NewCapacity);\r\n  If NewCapacity<>Capacity then\r\n    SetLength(FList,NewCapacity)\r\nend;\r\n\r\n\r\n\r\nprocedure TStringList.SetUpdateState(Updating: Boolean);\r\n\r\nbegin\r\n  If Updating then\r\n    Changing\r\n  else\r\n    Changed\r\nend;\r\n\r\n\r\n\r\ndestructor TStringList.Destroy;\r\n\r\nbegin\r\n  InternalClear;\r\n  Inherited destroy;\r\nend;\r\n\r\n\r\n\r\nfunction TStringList.Add(const S: string): Integer;\r\n\r\nbegin\r\n  If Not (SortStyle=sslAuto) then\r\n    Result:=FCount\r\n  else\r\n    If Find (S,Result) then\r\n      Case DUplicates of\r\n        DupIgnore : Exit;\r\n        DupError : Error(SDuplicateString,0)\r\n      end;\r\n   InsertItem (Result,S);\r\nend;\r\n\r\nprocedure TStringList.Clear;\r\n\r\nbegin\r\n  if FCount = 0 then Exit;\r\n  Changing;\r\n  InternalClear;\r\n  Changed;\r\nend;\r\n\r\nprocedure TStringList.Delete(Index: Integer);\r\n\r\nbegin\r\n  CheckIndex(Index);\r\n  Changing;\r\n  if FOwnsObjects then\r\n    FreeAndNil(Flist[Index].FObject);\r\n  TJSArray(FList).splice(Index,1);  \r\n  FList[Count-1].FString:='';\r\n  Flist[Count-1].FObject:=Nil;\r\n  Dec(FCount);\r\n  Changed;\r\nend;\r\n\r\nprocedure TStringList.Exchange(Index1, Index2: Integer);\r\n\r\nbegin\r\n  CheckIndex(Index1);\r\n  CheckIndex(Index2);\r\n  Changing;\r\n  ExchangeItemsInt(Index1,Index2);\r\n  changed;\r\nend;\r\n\r\nprocedure TStringList.SetCaseSensitive(b : boolean);\r\nbegin\r\n  if b=FCaseSensitive then\r\n    Exit;\r\n  FCaseSensitive:=b;\r\n  if FSortStyle=sslAuto then\r\n    begin\r\n    FForceSort:=True;\r\n    try\r\n      Sort;\r\n    finally\r\n      FForceSort:=False;\r\n    end;\r\n    end;\r\nend;\r\n\r\nprocedure TStringList.SetSortStyle(AValue: TStringsSortStyle);\r\nbegin\r\n  if FSortStyle=AValue then Exit;\r\n  if (AValue=sslAuto) then\r\n    Sort;\r\n  FSortStyle:=AValue;\r\nend;\r\n\r\nprocedure TStringList.CheckIndex(AIndex: Integer);\r\nbegin\r\n  If (AIndex<0) or (AIndex>=FCount) then\r\n    Error(SListIndexError,AIndex);\r\nend;\r\n\r\n\r\nfunction TStringList.DoCompareText(const s1, s2: string): PtrInt;\r\nbegin\r\n  if FCaseSensitive then\r\n    result:=CompareStr(s1,s2)\r\n  else\r\n    result:=CompareText(s1,s2);\r\nend;\r\n\r\n\r\nfunction TStringList.CompareStrings(const s1,s2 : string) : Integer;\r\nbegin\r\n  Result := DoCompareText(s1, s2);\r\nend;\r\n\r\n\r\nfunction TStringList.Find(const S: string; out Index: Integer): Boolean;\r\n\r\nvar\r\n  L, R, I: Integer;\r\n  CompareRes: PtrInt;\r\nbegin\r\n  Result := false;\r\n  Index:=-1;\r\n  if Not Sorted then\r\n    Raise EListError.Create(SErrFindNeedsSortedList);\r\n  // Use binary search.\r\n  L := 0;\r\n  R := Count - 1;\r\n  while (L<=R) do\r\n  begin\r\n    I := L + (R - L) div 2;\r\n    CompareRes := DoCompareText(S, Flist[I].FString);\r\n    if (CompareRes>0) then\r\n      L := I+1\r\n    else begin\r\n      R := I-1;\r\n      if (CompareRes=0) then begin\r\n         Result := true;\r\n         if (Duplicates<>dupAccept) then\r\n            L := I; // forces end of while loop\r\n      end;\r\n    end;\r\n  end;\r\n  Index := L;\r\nend;\r\n\r\n\r\n\r\nfunction TStringList.IndexOf(const S: string): Integer;\r\n\r\nbegin\r\n  If Not Sorted then\r\n    Result:=Inherited indexOf(S)\r\n  else\r\n    // faster using binary search...\r\n    If Not Find (S,Result) then\r\n      Result:=-1;\r\nend;\r\n\r\n\r\n\r\nprocedure TStringList.Insert(Index: Integer; const S: string);\r\n\r\nbegin\r\n  If SortStyle=sslAuto then\r\n    Error (SSortedListError,0)\r\n  else\r\n    begin\r\n    If (Index<0) or (Index>FCount) then\r\n      Error(SListIndexError,Index); // Cannot use CheckIndex, because there >= FCount...\r\n    InsertItem (Index,S);\r\n    end;\r\nend;\r\n\r\n\r\nprocedure TStringList.CustomSort(CompareFn: TStringListSortCompare);\r\n\r\nbegin\r\n  If (FForceSort or (Not (FSortStyle=sslAuto))) and (FCount>1) then\r\n    begin\r\n    Changing;\r\n    QuickSort(0,FCount-1, CompareFn);\r\n    Changed;\r\n    end;\r\nend;\r\n\r\nfunction StringListAnsiCompare(List: TStringList; Index1, Index: Integer): Integer;\r\n\r\nbegin\r\n  Result := List.DoCompareText(List.FList[Index1].FString,\r\n                               List.FList[Index].FString);\r\nend;\r\n\r\nprocedure TStringList.Sort;\r\n\r\nbegin\r\n  CustomSort(@StringListAnsiCompare);\r\nend;\r\n\r\n{****************************************************************************}\r\n{*                             TCollectionItem                              *}\r\n{****************************************************************************}\r\n\r\n\r\nfunction TCollectionItem.GetIndex: Integer;\r\n\r\nbegin\r\n  if FCollection<>nil then\r\n    Result:=FCollection.FItems.IndexOf(Self)\r\n  else\r\n    Result:=-1;\r\nend;\r\n\r\n\r\n\r\nprocedure TCollectionItem.SetCollection(Value: TCollection);\r\n\r\nbegin\r\n  IF Value<>FCollection then\r\n    begin\r\n    If FCollection<>Nil then FCollection.RemoveItem(Self);\r\n    if Value<>Nil then Value.InsertItem(Self);\r\n    end;\r\nend;\r\n\r\n\r\n\r\nprocedure TCollectionItem.Changed(AllItems: Boolean);\r\n\r\nbegin\r\n If (FCollection<>Nil) and (FCollection.UpdateCount=0) then\r\n  begin\r\n  If AllItems then\r\n    FCollection.Update(Nil)\r\n  else\r\n    FCollection.Update(Self);\r\n  end;\r\nend;\r\n\r\n\r\n\r\nfunction TCollectionItem.GetNamePath: string;\r\n\r\nbegin\r\n  If FCollection<>Nil then\r\n    Result:=FCollection.GetNamePath+'['+IntToStr(Index)+']'\r\n  else\r\n    Result:=ClassName;\r\nend;\r\n\r\n\r\nfunction TCollectionItem.GetOwner: TPersistent;\r\n\r\nbegin\r\n  Result:=FCollection;\r\nend;\r\n\r\n\r\n\r\nfunction TCollectionItem.GetDisplayName: string;\r\n\r\nbegin\r\n  Result:=ClassName;\r\nend;\r\n\r\n\r\n\r\nprocedure TCollectionItem.SetIndex(Value: Integer);\r\n\r\nVar Temp : Longint;\r\n\r\nbegin\r\n  Temp:=GetIndex;\r\n  If (Temp>-1) and (Temp<>Value) then\r\n    begin\r\n    FCollection.FItems.Move(Temp,Value);\r\n    Changed(True);\r\n    end;\r\nend;\r\n\r\n\r\nprocedure TCollectionItem.SetDisplayName(const Value: string);\r\n\r\nbegin\r\n  Changed(False);\r\n  if Value='' then ;\r\nend;\r\n\r\n\r\n\r\nconstructor TCollectionItem.Create(ACollection: TCollection);\r\n\r\nbegin\r\n  Inherited Create;\r\n  SetCollection(ACollection);\r\nend;\r\n\r\n\r\n\r\ndestructor TCollectionItem.Destroy;\r\n\r\nbegin\r\n  SetCollection(Nil);\r\n  Inherited Destroy;\r\nend;\r\n\r\n{****************************************************************************}\r\n{*                          TCollectionEnumerator                           *}\r\n{****************************************************************************}\r\n\r\nconstructor TCollectionEnumerator.Create(ACollection: TCollection);\r\nbegin\r\n  inherited Create;\r\n  FCollection := ACollection;\r\n  FPosition := -1;\r\nend;\r\n\r\nfunction TCollectionEnumerator.GetCurrent: TCollectionItem;\r\nbegin\r\n  Result := FCollection.Items[FPosition];\r\nend;\r\n\r\nfunction TCollectionEnumerator.MoveNext: Boolean;\r\nbegin\r\n  Inc(FPosition);\r\n  Result := FPosition < FCollection.Count;\r\nend;\r\n\r\n\r\n{****************************************************************************}\r\n{*                             TCollection                                  *}\r\n{****************************************************************************}\r\n\r\nfunction TCollection.Owner: TPersistent;\r\nbegin\r\n  result:=getowner;\r\nend;\r\n\r\n\r\nfunction TCollection.GetCount: Integer;\r\n\r\nbegin\r\n  Result:=FItems.Count;\r\nend;\r\n\r\n\r\nProcedure TCollection.SetPropName;\r\n\r\n{\r\nVar\r\n  TheOwner : TPersistent;\r\n  PropList : PPropList;\r\n  I, PropCount : Integer;\r\n}\r\nbegin\r\n  FPropName:='';\r\n{\r\n  TheOwner:=GetOwner;\r\n  // TODO: This needs to wait till Mattias finishes typeinfo.\r\n  // It's normally only used in the designer so should not be a problem currently.\r\n  if (TheOwner=Nil) Or (TheOwner.Classinfo=Nil) Then Exit;\r\n  // get information from the owner RTTI\r\n  PropCount:=GetPropList(TheOwner, PropList);\r\n  Try\r\n    For I:=0 To PropCount-1 Do\r\n      If (PropList^[i]^.PropType^.Kind=tkClass) And\r\n         (GetObjectProp(TheOwner, PropList^[i], ClassType)=Self) Then\r\n        Begin\r\n          FPropName:=PropList^[i]^.Name;\r\n          Exit;\r\n        End;\r\n  Finally\r\n    FreeMem(PropList);\r\n  End;\r\n}\r\nend;\r\n\r\n\r\nfunction TCollection.GetPropName: string;\r\n\r\n{Var\r\n  TheOwner : TPersistent;}\r\n\r\nbegin\r\n  Result:=FPropNAme;\r\n//  TheOwner:=GetOwner;\r\n//  If (Result<>'') or (TheOwner=Nil) Or (TheOwner.Classinfo=Nil) then exit;\r\n  SetPropName;\r\n  Result:=FPropName;\r\nend;\r\n\r\n\r\nprocedure TCollection.InsertItem(Item: TCollectionItem);\r\nbegin\r\n  If Not(Item Is FitemClass) then\r\n    exit;\r\n  FItems.add(Item);\r\n  Item.FCollection:=Self;\r\n  Item.FID:=FNextID;\r\n  inc(FNextID);\r\n  SetItemName(Item);\r\n  Notify(Item,cnAdded);\r\n  Changed;\r\nend;\r\n\r\n\r\nprocedure TCollection.RemoveItem(Item: TCollectionItem);\r\n\r\nVar\r\n  I : Integer;\r\n\r\nbegin\r\n  Notify(Item,cnExtracting);\r\n  I:=FItems.IndexOfItem(Item,fromEnd);\r\n  If (I<>-1) then\r\n    FItems.Delete(I);\r\n  Item.FCollection:=Nil;\r\n  Changed;\r\nend;\r\n\r\n\r\nfunction TCollection.GetAttrCount: Integer;\r\nbegin\r\n  Result:=0;\r\nend;\r\n\r\n\r\nfunction TCollection.GetAttr(Index: Integer): string;\r\nbegin\r\n  Result:='';\r\n  if Index=0 then ;\r\nend;\r\n\r\n\r\nfunction TCollection.GetItemAttr(Index, ItemIndex: Integer): string;\r\nbegin\r\n  Result:=TCollectionItem(FItems.Items[ItemIndex]).DisplayName;\r\n  if Index=0 then ;\r\nend;\r\n\r\n\r\nfunction TCollection.GetEnumerator: TCollectionEnumerator;\r\nbegin\r\n  Result := TCollectionEnumerator.Create(Self);\r\nend;\r\n\r\n\r\nfunction TCollection.GetNamePath: string;\r\nvar o : TPersistent;\r\nbegin\r\n  o:=getowner;\r\n  if assigned(o) and (propname<>'') then\r\n     result:=o.getnamepath+'.'+propname\r\n   else\r\n     result:=classname;\r\nend;\r\n\r\n\r\nprocedure TCollection.Changed;\r\nbegin\r\n  if FUpdateCount=0 then\r\n    Update(Nil);\r\nend;\r\n\r\n\r\nfunction TCollection.GetItem(Index: Integer): TCollectionItem;\r\nbegin\r\n  Result:=TCollectionItem(FItems.Items[Index]);\r\nend;\r\n\r\n\r\nprocedure TCollection.SetItem(Index: Integer; Value: TCollectionItem);\r\nbegin\r\n  TCollectionItem(FItems.items[Index]).Assign(Value);\r\nend;\r\n\r\n\r\nprocedure TCollection.SetItemName(Item: TCollectionItem);\r\nbegin\r\n  if Item=nil then ;\r\nend;\r\n\r\nprocedure TCollection.Update(Item: TCollectionItem);\r\nbegin\r\n  if Item=nil then ;\r\nend;\r\n\r\n\r\nconstructor TCollection.Create(AItemClass: TCollectionItemClass);\r\nbegin\r\n  inherited create;\r\n  FItemClass:=AItemClass;\r\n  FItems:=TFpList.Create;\r\nend;\r\n\r\n\r\ndestructor TCollection.Destroy;\r\nbegin\r\n  FUpdateCount:=1; // Prevent OnChange\r\n  try\r\n    DoClear;\r\n  Finally\r\n    FUpdateCount:=0;\r\n  end;\r\n  if assigned(FItems) then\r\n    FItems.Destroy;\r\n  Inherited Destroy;\r\nend;\r\n\r\n\r\nfunction TCollection.Add: TCollectionItem;\r\nbegin\r\n  Result:=FItemClass.Create(Self);\r\nend;\r\n\r\n\r\nprocedure TCollection.Assign(Source: TPersistent);\r\nVar I : Longint;\r\nbegin\r\n  If Source is TCollection then\r\n    begin\r\n    Clear;\r\n    For I:=0 To TCollection(Source).Count-1 do\r\n     Add.Assign(TCollection(Source).Items[I]);\r\n    exit;\r\n    end\r\n  else\r\n    Inherited Assign(Source);\r\nend;\r\n\r\n\r\nprocedure TCollection.BeginUpdate;\r\nbegin\r\n  inc(FUpdateCount);\r\nend;\r\n\r\n\r\nprocedure TCollection.Clear;\r\nbegin\r\n  if FItems.Count=0 then\r\n    exit; // Prevent Changed\r\n  BeginUpdate;\r\n  try\r\n    DoClear;\r\n  finally\r\n    EndUpdate;\r\n  end;\r\nend;\r\n\r\n\r\nprocedure TCollection.DoClear;\r\nvar\r\n  Item: TCollectionItem;\r\nbegin\r\n  While FItems.Count>0 do\r\n    begin\r\n    Item:=TCollectionItem(FItems.Last);\r\n    if Assigned(Item) then\r\n      Item.Destroy;\r\n    end;\r\nend;\r\n\r\n\r\nprocedure TCollection.EndUpdate;\r\nbegin\r\n  if FUpdateCount>0 then\r\n    dec(FUpdateCount);\r\n  if FUpdateCount=0 then\r\n    Changed;\r\nend;\r\n\r\n\r\nfunction TCollection.FindItemID(ID: Integer): TCollectionItem;\r\nVar\r\n          I : Longint;\r\nbegin\r\n  For I:=0 to Fitems.Count-1 do\r\n   begin\r\n     Result:=TCollectionItem(FItems.items[I]);\r\n     If Result.Id=Id then\r\n       exit;\r\n   end;\r\n  Result:=Nil;\r\nend;\r\n\r\n\r\nprocedure TCollection.Delete(Index: Integer);\r\nVar\r\n  Item : TCollectionItem;\r\nbegin\r\n  Item:=TCollectionItem(FItems[Index]);\r\n  Notify(Item,cnDeleting);\r\n  If assigned(Item) then\r\n    Item.Destroy;\r\nend;\r\n\r\n\r\nfunction TCollection.Insert(Index: Integer): TCollectionItem;\r\nbegin\r\n  Result:=Add;\r\n  Result.Index:=Index;\r\nend;\r\n\r\n\r\nprocedure TCollection.Notify(Item: TCollectionItem;Action: TCollectionNotification);\r\nbegin\r\n  if Item=nil then ;\r\n  if Action=cnAdded then ;\r\nend;\r\n\r\nprocedure TCollection.Sort(Const Compare : TCollectionSortCompare);\r\n\r\nbegin\r\n  BeginUpdate;\r\n  try\r\n    FItems.Sort(TListSortCompare(Compare));\r\n  Finally\r\n    EndUpdate;\r\n  end;\r\nend;\r\n\r\nprocedure TCollection.Exchange(Const Index1, index2: integer);\r\n\r\nbegin\r\n  FItems.Exchange(Index1,Index2);\r\nend;\r\n\r\n\r\n{****************************************************************************}\r\n{*                             TOwnedCollection                             *}\r\n{****************************************************************************}\r\n\r\n\r\n\r\nConstructor TOwnedCollection.Create(AOwner: TPersistent; AItemClass: TCollectionItemClass);\r\n\r\nBegin\r\n  FOwner := AOwner;\r\n  inherited Create(AItemClass);\r\nend;\r\n\r\nFunction TOwnedCollection.GetOwner: TPersistent;\r\n\r\nbegin\r\n  Result:=FOwner;\r\nend;\r\n\r\n{****************************************************************************}\r\n{*                             TComponent                                   *}\r\n{****************************************************************************}\r\n\r\n\r\nFunction  TComponent.GetComponent(AIndex: Integer): TComponent;\r\n\r\nbegin\r\n  If not assigned(FComponents) then\r\n    Result:=Nil\r\n  else\r\n    Result:=TComponent(FComponents.Items[Aindex]);\r\nend;\r\n\r\nFunction  TComponent.GetComponentCount: Integer;\r\n\r\nbegin\r\n  If not assigned(FComponents) then\r\n    result:=0\r\n  else\r\n    Result:=FComponents.Count;\r\nend;\r\n\r\n\r\nFunction  TComponent.GetComponentIndex: Integer;\r\n\r\nbegin\r\n  If Assigned(FOwner) and Assigned(FOwner.FComponents) then\r\n    Result:=FOWner.FComponents.IndexOf(Self)\r\n  else\r\n    Result:=-1;\r\nend;\r\n\r\n\r\nProcedure TComponent.Insert(AComponent: TComponent);\r\n\r\nbegin\r\n  If not assigned(FComponents) then\r\n    FComponents:=TFpList.Create;\r\n  FComponents.Add(AComponent);\r\n  AComponent.FOwner:=Self;\r\nend;\r\n\r\n\r\nProcedure TComponent.Remove(AComponent: TComponent);\r\n\r\nbegin\r\n  AComponent.FOwner:=Nil;\r\n  If assigned(FCOmponents) then\r\n    begin\r\n    FComponents.Remove(AComponent);\r\n    IF FComponents.Count=0 then\r\n      begin\r\n      FComponents.Destroy;\r\n      FComponents:=Nil;\r\n      end;\r\n    end;\r\nend;\r\n\r\n\r\nProcedure TComponent.RemoveNotification(AComponent: TComponent);\r\n\r\nbegin\r\n  if FFreeNotifies<>nil then\r\n    begin\r\n    FFreeNotifies.Remove(AComponent);\r\n    if FFreeNotifies.Count=0 then\r\n      begin\r\n      FFreeNotifies.Destroy;\r\n      FFreeNotifies:=nil;\r\n      Exclude(FComponentState,csFreeNotification);\r\n      end;\r\n    end;\r\nend;\r\n\r\n\r\nProcedure TComponent.SetComponentIndex(Value: Integer);\r\n\r\nVar Temp,Count : longint;\r\n\r\nbegin\r\n  If Not assigned(Fowner) then exit;\r\n  Temp:=getcomponentindex;\r\n  If temp<0 then exit;\r\n  If value<0 then value:=0;\r\n  Count:=Fowner.FComponents.Count;\r\n  If Value>=Count then value:=count-1;\r\n  If Value<>Temp then\r\n    begin\r\n    FOWner.FComponents.Delete(Temp);\r\n    FOwner.FComponents.Insert(Value,Self);\r\n    end;\r\nend;\r\n\r\n\r\nProcedure TComponent.ChangeName(const NewName: TComponentName);\r\n\r\nbegin\r\n  FName:=NewName;\r\nend;\r\n\r\n\r\nProcedure TComponent.GetChildren(Proc: TGetChildProc; Root: TComponent);\r\n\r\nbegin\r\n  // Does nothing.\r\n  if Proc=nil then ;\r\n  if Root=nil then ;\r\nend;\r\n\r\n\r\nFunction  TComponent.GetChildOwner: TComponent;\r\n\r\nbegin\r\n Result:=Nil;\r\nend;\r\n\r\n\r\nFunction  TComponent.GetChildParent: TComponent;\r\n\r\nbegin\r\n  Result:=Self;\r\nend;\r\n\r\n\r\nFunction  TComponent.GetNamePath: string;\r\n\r\nbegin\r\n  Result:=FName;\r\nend;\r\n\r\n\r\nFunction  TComponent.GetOwner: TPersistent;\r\n\r\nbegin\r\n  Result:=FOwner;\r\nend;\r\n\r\n\r\nProcedure TComponent.Loaded;\r\n\r\nbegin\r\n  Exclude(FComponentState,csLoading);\r\nend;\r\n\r\nProcedure TComponent.Loading;\r\n\r\nbegin\r\n  Include(FComponentState,csLoading);\r\nend;\r\n\r\n\r\nProcedure TComponent.Notification(AComponent: TComponent;\r\n  Operation: TOperation);\r\n\r\nVar\r\n  C : Longint;\r\n\r\nbegin\r\n  If (Operation=opRemove) then\r\n    RemoveFreeNotification(AComponent);\r\n  If Not assigned(FComponents) then\r\n    exit;\r\n  C:=FComponents.Count-1;\r\n  While (C>=0) do\r\n    begin\r\n    TComponent(FComponents.Items[C]).Notification(AComponent,Operation);\r\n    Dec(C);\r\n    if C>=FComponents.Count then\r\n      C:=FComponents.Count-1;\r\n    end;\r\nend;\r\n\r\n\r\nprocedure TComponent.PaletteCreated;\r\nbegin\r\nend;\r\n\r\n\r\n\r\nProcedure TComponent.SetAncestor(Value: Boolean);\r\n\r\nVar Runner : Longint;\r\n\r\nbegin\r\n  If Value then\r\n    Include(FComponentState,csAncestor)\r\n  else\r\n    Exclude(FCOmponentState,csAncestor);\r\n  if Assigned(FComponents) then\r\n    For Runner:=0 To FComponents.Count-1 do\r\n      TComponent(FComponents.Items[Runner]).SetAncestor(Value);\r\nend;\r\n\r\n\r\nProcedure TComponent.SetDesigning(Value: Boolean; SetChildren : Boolean = True);\r\n\r\nVar Runner : Longint;\r\n\r\nbegin\r\n  If Value then\r\n    Include(FComponentState,csDesigning)\r\n  else\r\n    Exclude(FComponentState,csDesigning);\r\n  if Assigned(FComponents) and SetChildren then\r\n    For Runner:=0 To FComponents.Count - 1 do\r\n      TComponent(FComponents.items[Runner]).SetDesigning(Value);\r\nend;\r\n\r\nProcedure TComponent.SetDesignInstance(Value: Boolean);\r\n\r\nbegin\r\n  If Value then\r\n    Include(FComponentState,csDesignInstance)\r\n  else\r\n    Exclude(FComponentState,csDesignInstance);\r\nend;\r\n\r\nProcedure TComponent.SetInline(Value: Boolean);\r\n\r\nbegin\r\n  If Value then\r\n    Include(FComponentState,csInline)\r\n  else\r\n    Exclude(FComponentState,csInline);\r\nend;\r\n\r\n\r\nProcedure TComponent.SetName(const NewName: TComponentName);\r\n\r\nbegin\r\n  If FName=NewName then exit;\r\n  If (NewName<>'') and not IsValidIdent(NewName) then\r\n    Raise EComponentError.CreateFmt(SInvalidName,[NewName]);\r\n  If Assigned(FOwner) Then\r\n    FOwner.ValidateRename(Self,FName,NewName)\r\n  else\r\n    ValidateRename(Nil,FName,NewName);\r\n  ChangeName(NewName);\r\nend;\r\n\r\n\r\nProcedure TComponent.SetChildOrder(Child: TComponent; Order: Integer);\r\n\r\nbegin\r\n  // does nothing\r\n  if Child=nil then ;\r\n  if Order=0 then ;\r\nend;\r\n\r\n\r\nProcedure TComponent.SetParentComponent(Value: TComponent);\r\n\r\nbegin\r\n  // Does nothing\r\n  if Value=nil then ;\r\nend;\r\n\r\n\r\nProcedure TComponent.Updating;\r\n\r\nbegin\r\n  Include (FComponentState,csUpdating);\r\nend;\r\n\r\n\r\nProcedure TComponent.Updated;\r\n\r\nbegin\r\n  Exclude(FComponentState,csUpdating);\r\nend;\r\n\r\n\r\nProcedure TComponent.ValidateRename(AComponent: TComponent;\r\n  const CurName, NewName: string);\r\n\r\nbegin\r\n//!! This contradicts the Delphi manual.\r\n  If (AComponent<>Nil) and (CompareText(CurName,NewName)<>0) and (AComponent.Owner = Self) and\r\n     (FindComponent(NewName)<>Nil) then\r\n      raise EComponentError.Createfmt(SDuplicateName,[newname]);\r\n  If (csDesigning in FComponentState) and (FOwner<>Nil) then\r\n    FOwner.ValidateRename(AComponent,Curname,Newname);\r\nend;\r\n\r\n\r\nProcedure TComponent.ValidateContainer(AComponent: TComponent);\r\n\r\nbegin\r\n  AComponent.ValidateInsert(Self);\r\nend;\r\n\r\n\r\nProcedure TComponent.ValidateInsert(AComponent: TComponent);\r\n\r\nbegin\r\n  // Does nothing.\r\n  if AComponent=nil then ;\r\nend;\r\n\r\n\r\nConstructor TComponent.Create(AOwner: TComponent);\r\n\r\nbegin\r\n  FComponentStyle:=[csInheritable];\r\n  If Assigned(AOwner) then AOwner.InsertComponent(Self);\r\nend;\r\n\r\n\r\nDestructor TComponent.Destroy;\r\n\r\nVar\r\n  I : Integer;\r\n  C : TComponent;\r\n\r\nbegin\r\n  Destroying;\r\n  If Assigned(FFreeNotifies) then\r\n    begin\r\n    I:=FFreeNotifies.Count-1;\r\n    While (I>=0) do\r\n      begin\r\n      C:=TComponent(FFreeNotifies.Items[I]);\r\n      // Delete, so one component is not notified twice, if it is owned.\r\n      FFreeNotifies.Delete(I);\r\n      C.Notification (self,opRemove);\r\n      If (FFreeNotifies=Nil) then\r\n        I:=0\r\n      else if (I>FFreeNotifies.Count) then\r\n        I:=FFreeNotifies.Count;\r\n      dec(i);\r\n      end;\r\n    FreeAndNil(FFreeNotifies);\r\n    end;\r\n  DestroyComponents;\r\n  If FOwner<>Nil Then FOwner.RemoveComponent(Self);\r\n  inherited destroy;\r\nend;\r\n\r\n\r\nProcedure TComponent.BeforeDestruction;\r\nbegin\r\n  if not(csDestroying in FComponentstate) then\r\n    Destroying;\r\nend;\r\n\r\n\r\nProcedure TComponent.DestroyComponents;\r\n\r\nVar acomponent: TComponent;\r\n\r\nbegin\r\n  While assigned(FComponents) do\r\n    begin\r\n    aComponent:=TComponent(FComponents.Last);\r\n    Remove(aComponent);\r\n    Acomponent.Destroy;\r\n    end;\r\nend;\r\n\r\n\r\nProcedure TComponent.Destroying;\r\n\r\nVar Runner : longint;\r\n\r\nbegin\r\n  If csDestroying in FComponentstate Then Exit;\r\n  include (FComponentState,csDestroying);\r\n  If Assigned(FComponents) then\r\n    for Runner:=0 to FComponents.Count-1 do\r\n      TComponent(FComponents.Items[Runner]).Destroying;\r\nend;\r\n\r\n\r\nFunction  TComponent.FindComponent(const AName: string): TComponent;\r\n\r\nVar I : longint;\r\n\r\nbegin\r\n  Result:=Nil;\r\n  If (AName='') or Not assigned(FComponents) then exit;\r\n  For i:=0 to FComponents.Count-1 do\r\n    if (CompareText(TComponent(FComponents[I]).Name,AName)=0) then\r\n      begin\r\n      Result:=TComponent(FComponents.Items[I]);\r\n      exit;\r\n      end;\r\nend;\r\n\r\n\r\nProcedure TComponent.FreeNotification(AComponent: TComponent);\r\n\r\nbegin\r\n  If (Owner<>Nil) and (AComponent=Owner) then exit;\r\n  If not (Assigned(FFreeNotifies)) then\r\n    FFreeNotifies:=TFpList.Create;\r\n  If FFreeNotifies.IndexOf(AComponent)=-1 then\r\n    begin\r\n    FFreeNotifies.Add(AComponent);\r\n    AComponent.FreeNotification (self);\r\n    end;\r\nend;\r\n\r\n\r\nprocedure TComponent.RemoveFreeNotification(AComponent: TComponent);\r\nbegin\r\n  RemoveNotification(AComponent);\r\n  AComponent.RemoveNotification (self);\r\nend;\r\n\r\n\r\nFunction  TComponent.GetParentComponent: TComponent;\r\n\r\nbegin\r\n  Result:=Nil;\r\nend;\r\n\r\n\r\nFunction  TComponent.HasParent: Boolean;\r\n\r\nbegin\r\n  Result:=False;\r\nend;\r\n\r\n\r\nProcedure TComponent.InsertComponent(AComponent: TComponent);\r\n\r\nbegin\r\n  AComponent.ValidateContainer(Self);\r\n  ValidateRename(AComponent,'',AComponent.FName);\r\n  Insert(AComponent);\r\n  If csDesigning in FComponentState then\r\n    AComponent.SetDesigning(true);\r\n  Notification(AComponent,opInsert);\r\nend;\r\n\r\n\r\nProcedure TComponent.RemoveComponent(AComponent: TComponent);\r\n\r\nbegin\r\n  Notification(AComponent,opRemove);\r\n  Remove(AComponent);\r\n  Acomponent.Setdesigning(False);\r\n  ValidateRename(AComponent,AComponent.FName,'');\r\nend;\r\n\r\nprocedure TComponent.SetSubComponent(ASubComponent: Boolean);\r\nbegin\r\n  if ASubComponent then\r\n    Include(FComponentStyle, csSubComponent)\r\n  else\r\n    Exclude(FComponentStyle, csSubComponent);\r\nend;\r\n\r\nfunction TComponent.GetEnumerator: TComponentEnumerator;\r\nbegin\r\n  Result:=TComponentEnumerator.Create(Self);\r\nend;\r\n\r\n\r\n{ ---------------------------------------------------------------------\r\n  Global routines\r\n  ---------------------------------------------------------------------}\r\n\r\nvar\r\n  ClassList : TJSObject;\r\n  \r\nProcedure RegisterClass(AClass : TPersistentClass);\r\n\r\nbegin\r\n  ClassList[AClass.ClassName]:=AClass;\r\nend;\r\n\r\nFunction GetClass(AClassName : string) : TPersistentClass;\r\n\r\nbegin\r\n  Result:=nil;\r\n  if AClassName='' then exit;\r\n  if not ClassList.hasOwnProperty(AClassName) then exit;\r\n  Result:=TPersistentClass(ClassList[AClassName]);\r\nend;\r\n\r\ninitialization\r\n  ClassList:=TJSObject.create(nil);\r\nend.\r\n\r\n","{\r\n    This file is part of the Pas2JS run time library.\r\n    Copyright (c) 2017 by Mattias Gaertner\r\n\r\n    See the file COPYING.FPC, included in this distribution,\r\n    for details about the copyright.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n **********************************************************************}\r\n\r\n{$mode objfpc}\r\n{$modeswitch externalclass}\r\n\r\nunit Web;\r\n\r\ninterface\r\n\r\nuses Types, JS;\r\n\r\nType\r\n  // Forward definitions\r\n  TJSWindow = class;\r\n  TJSDOMTokenList = class;\r\n  TJSXPathResult = CLass;\r\n  TJSNodeList = class;\r\n  TJSDocument = class;\r\n  TJSElement = class;\r\n  TJSCSSStyleSheet = Class;\r\n  TJSNodeFilter = Class;\r\n  TJSIDBObjectStore = Class;\r\n  TIDBDatabase = class;\r\n  TJSIDBRequest = class;\r\n  TJSEventTarget = class;\r\n  TJSMouseEvent = Class;\r\n  TJSWheelEvent = Class;\r\n  TJSKeyBoardEvent = class;\r\n  TJSPointerEvent = Class;\r\n  TJSUIEvent = class;\r\n  TJSTouchEvent = Class;\r\n\r\n  TJSAttr = class external name 'Attr'\r\n  Private\r\n    fLocalName : String; external name 'localName';\r\n    fNameSpaceURI : String external name 'namespaceURI';\r\n    fPrefix : string; external name 'prefix';\r\n    fName : string; external name 'name';\r\n  public\r\n    value : JSValue;\r\n    property localName : String Read fLocalName;\r\n    property namespaceURI : string Read fNameSpaceURI;\r\n    property prefix : string read fPrefix;\r\n    property name : string Read fName;\r\n  end;\r\n\r\n\r\n  { TEventListenerEvent }\r\n\r\n  TEventListenerEvent = class external name 'EventListener_Event'\r\n  private\r\n    FTarget: TJSEventTarget; external name 'target';\r\n  public\r\n    Property target: TJSEventTarget Read FTarget;\r\n  end;\r\n\r\n  TJSEventHandler = reference to function(Event: TEventListenerEvent): boolean;\r\n\r\n  TJSEventTarget = class external name 'EventTarget'\r\n  public\r\n    procedure addEventListener(aname : string; aListener : TJSEventHandler);\r\n    procedure addEventListener(aname : string; aListener : JSValue);\r\n    function dispatchEvent(event : JSValue) : Boolean;\r\n    procedure removeEventListener(aname : string; aListener : TJSEventHandler);\r\n    procedure removeEventListener(aname : string; aListener : JSValue);\r\n  end;\r\n\r\n  TJSNode = class external name 'Node' (TJSEventTarget)\r\n  Private\r\n    FBaseURI : String; external name 'baseURI';\r\n    FChildNodes: TJSNodeList; external name 'childNodes';\r\n    FFirstChild : TJSNode; external name 'firstChild';\r\n    FNextSibling : TJSNode; external name 'nextSibling';\r\n    FNodeName : String; external name 'nodeName';\r\n    FNodeType : NativeInt; external name 'nodeType';\r\n    FOwnerDocument : TJSDocument; external name 'ownerDocument';\r\n    FParentElement : TJSElement; external name 'parentElement';\r\n    FParentNode : TJSNode; external name 'parentNode';\r\n    FPreviousSibling : TJSNode; external name 'previousSibling';\r\n  Public \r\n    Const\r\n      ELEMENT_NODE \t=1;\r\n      TEXT_NODE \t=3;\r\n      PROCESSING_INSTRUCTION_NODE = \t7;\r\n      COMMENT_NODE \t=8;\r\n      DOCUMENT_NODE \t=9;\r\n      DOCUMENT_TYPE_NODE \t= 10;\r\n      DOCUMENT_FRAGMENT_NODE  = 11;\r\n\r\n      DOCUMENT_POSITION_DISCONNECTED \t= 1;\r\n      DOCUMENT_POSITION_PRECEDING \t= 2;\r\n      DOCUMENT_POSITION_FOLLOWING \t= 4;\r\n      DOCUMENT_POSITION_CONTAINS \t= 8;\r\n      DOCUMENT_POSITION_CONTAINED_BY \t= 16;\r\n      DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;\r\n  Public  \r\n    nodeValue: string;\r\n    innerText : string;\r\n    textContent : string;\r\n    function appendChild(aChild : TJSNode) : TJSNode;\r\n    function cloneNode(deep:  boolean): TJSNode;\r\n    function compareDocumentPosition(aNode : TJSNode) : NativeInt;\r\n    function contains(aNode : TJSNode) : boolean;\r\n    function hasChildNodes : boolean;\r\n    function insertBefore(newNode, referenceNode : TJSNode) : TJSNode;\r\n    function isDefaultNameSpace(aNameSpaceURI : String) : Boolean;\r\n    function isEqualNode(aNode : TJSNode) : boolean;\r\n    function isSameNode(aNode : TJSNode) : boolean;\r\n    function lookupNamespaceURI(aPrefix : string) : string;\r\n    function lookupPrefix(aPrefix : string) : string;\r\n    procedure normalize;\r\n    function removeChild(aChild: TJSNode) : TJSNode;\r\n    function replaceChild(aNewChild, aOldChild : TJSNode) : TJSNode;\r\n    property baseURI : string read FBaseURI;\r\n    property childNodes : TJSNodeList read FChildNodes;\r\n    property firstChild : TJSNode Read FFirstChild;\r\n    property nextSibling : TJSNode Read FNextSibling;\r\n    property nodeName : String Read FNodeName;\r\n    property nodeType : NativeInt Read FNodeType;\r\n    property ownerDocument : TJSDocument read FOwnerDocument;    \r\n    property parentElement : TJSElement read FParentElement;\r\n    property parentNode : TJSNode read FParentNode;\r\n    property previousSibling : TJSNode Read FPreviousSibling;\r\n  end;\r\n\r\n  TJSNodeListCallBack = procedure (currentValue : TJSNode; currentIndex: NativeInt; list : TJSNodeList);\r\n  TJSNodeListEvent = procedure (currentValue : TJSNode; currentIndex: NativeInt; list : TJSNodeList) of object;\r\n  \r\n  TJSNodeList = class external name 'NodeList'\r\n  Private\r\n    FLength : NativeInt; external name 'length';\r\n  Public\r\n    procedure forEach(const aCallBack : TJSNodeListCallBack);\r\n    procedure forEach(const aCallBack : TJSNodeListEvent);\r\n    function item(aIndex : NativeInt) : TJSNode;\r\n    Property length : NativeInt Read FLength;\r\n    Property Nodes [aIndex : NativeInt] : TJSNode Read item; default;\r\n  end;\r\n  \r\n  TJSNamedNodeMap = class external name 'NamedNodeMap'\r\n  Public\r\n    function getNamedItem(aName : string) : TJSAttr;\r\n    Property Attrs[aIndex : String] : TJSattr Read getNamedItem; default;\r\n  end;\r\n  \r\n  TJSHTMLCollection = class external name 'HTMLCollection'\r\n  Private\r\n    FLength : NativeInt; external name 'length';\r\n  public\r\n    Function item(aIndex : Integer) : TJSNode;\r\n    Function namedItem(aName : string) : TJSNode;\r\n    property Items[aIndex : Integer] : TJSNode Read item; default;\r\n    property NamedItems[aName : String] : TJSNode Read namedItem; \r\n    Property length : NativeInt Read FLength;\r\n  end;  \r\n  \r\n  TJSDOMString = String;\r\n\r\n  TDOMTokenlistCallBack = Procedure (Current : JSValue; currentIndex : NativeInt; list : TJSDOMTokenList);\r\n  \r\n  // Interface\r\n  TJSDOMTokenList = class external name 'DOMTokenList'\r\n  Private\r\n    FLength : NativeInt; external name 'length';\r\n  public\r\n    Procedure add(aToken : TJSDOMString); varargs;\r\n    Procedure remove(aToken : TJSDOMString); varargs;\r\n    function item(aIndex : NativeInt) : String;\r\n    function contains(aToken : TJSDOMString) : Boolean;\r\n    Procedure replace(aOldToken, ANewToken : TJSDOMString);\r\n    function supports(aToken : TJSDOMString) : Boolean;\r\n    function toggle(aToken : TJSDOMString) : Boolean;\r\n    // entries,keys, values\r\n    procedure forEach(const callback: TDOMTokenlistCallBack);\r\n    property length : NativeInt read FLength;\r\n  end;\r\n\r\n  TJSDOMRect = class external name 'DOMRect'\r\n  public\r\n    left,top,right,bottom,x,y,width,height : double;\r\n    {$IFDEF FIREFOX}\r\n    constructor New;\r\n    {$ENDIF}\r\n  end;\r\n  TJSClientRect = record\r\n    left,top,right,bottom : double;\r\n    {$IFDEF FIREFOX}\r\n    width, height: double;\r\n    {$ENDIF}\r\n  end;\r\n  \r\n  TJSClientRectArray = array of TJSClientRect;\r\n  \r\n  TJSElement = class external name 'Element' (TJSNode)\r\n  Private\r\n    FAttributes : TJSNamedNodeMap; external name 'attributes';\r\n    FChildElementCount : NativeInt; external name 'childElementCount';\r\n    FChildren : TJSHTMLCollection; external name 'children';\r\n    FClassList : TJSDOMTokenList; external name 'classList';\r\n    FCLientHeight : NativeInt; external name 'clientHeight';\r\n    FCLientLeft : NativeInt; external name 'clientLeft';\r\n    FCLientTop : NativeInt; external name 'clientTop';\r\n    FCLientWidth : NativeInt; external name 'clientWidth';\r\n    FFirstElementChild : TJSElement; external name 'firstElementChild';\r\n    FLastElementChild : TJSElement; external name 'lastElementChild';\r\n    FLocalName : string; external name 'localName';\r\n    FNameSpaceURI : String; external name 'namespaceURI';\r\n    FNextElementSibling : TJSElement; external name 'nextElementSibling';\r\n    FPreviousElementSibling : TJSElement; external name 'previousElementSibling';\r\n    FPrefix : String; external name 'prefix';\r\n    FScrollHeight : NativeInt; external name 'scrollHeight';\r\n{$IFDEF FIREFOX}\r\n    FScrollLeftMax : NativeInt; external name 'scrollLeftMax';\r\n    FScrollTopMax : NativeInt; external name 'scrollTopMax';\r\n{$endif}\r\n    FScrollWidth : NativeInt; external name 'scrollWidth';\r\n    FTagName : string; external name 'tagName';\r\n  Public\r\n    name : string;\r\n    className : string;\r\n    id : string;\r\n    innerHTML : String;\r\n    outerHTML : string;\r\n    scrollLeft : NativeInt;\r\n    scrollTop : NativeInt;\r\n    procedure append(aText : String); overload;\r\n    procedure append(aNode : TJSElement); overload;\r\n    procedure append(aText : String; aNode : TJSElement); varargs; overload;\r\n    procedure append(aNode1,aNode2: TJSElement); varargs; overload;\r\n    function getAttribute(aName : string) : string;\r\n    function getAttributeNode(aName : string) : TJSAttr;\r\n    function getAttributeNodeNS(aNameSpace, aName : string) : TJSAttr;\r\n    function getAttributeNS(aNameSpace, aName : string) : string;\r\n    function getBoundingClientRect : TJSDOMRect;\r\n    function getClientRects : TJSClientRectArray;\r\n    function getElementsByClassName(aClassName: string) : TJSHTMLCollection;\r\n    function getElementsByTagNameNS(aNameSpace, aTagName : String): TJSHTMLCollection;\r\n    function getElementsByTagName(aTagName : String): TJSHTMLCollection;\r\n    function hasAttribute(aName : String) : Boolean;\r\n    function hasAttributeNS(aNameSpace,aName : String) : Boolean;\r\n    function hasAttributes : Boolean;\r\n    function insertAdjacentElement(aPosition : string; aElement : TJSElement) : TJSElement;\r\n    procedure insertAdjacentHTML(aPosition,aHTML : string);\r\n    procedure insertAdjacentText(aPosition,aText : string);\r\n    function matches(aSelectorString : String) : Boolean;\r\n    function querySelector(aSelectors : String) : TJSElement;\r\n    function querySelectorAll(aSelectors : String) : TJSNodeList;\r\n    procedure releasePointerCapture(evID : JSValue);\r\n    procedure removeAttribute(aName: string);\r\n    procedure removeAttributeNS(aNameSpace,aName: string);\r\n    function removeAttributeNode(aAttr : TJSAttr) : TJSAttr;\r\n    procedure setAttribute(aName : string; AValue : String);\r\n    function setAttributeNode(aNode: TJSAttr) : TJSAttr;\r\n    function setAttributeNodeNS(aNode: TJSAttr) : TJSAttr;\r\n    procedure setAttributeNS(aNameSpace,aName : string; AValue : String);\r\n    procedure setCapture(retargetToElement : Boolean);\r\n    procedure setPointerCapture(pointerID : JSValue);\r\n    procedure requestFullScreen;    \r\n    Property attributes : TJSNamedNodeMap read FAttributes;\r\n    Property childElementCount : NativeInt Read FChildElementCount;\r\n    Property children : TJSHTMLCollection Read FChildren;\r\n    Property classList : TJSDOMTokenList read FClassList;\r\n    property clientHeight : NativeInt read FClientHeight;\r\n    property clientLeft : NativeInt read FClientLeft;\r\n    property clientTop : NativeInt read FClientTop;\r\n    property clientWidth : NativeInt read FClientWidth;\r\n    property firstElementChild : TJSElement Read FFirstElementChild;\r\n    property lastElementChild : TJSElement Read FLastElementChild;\r\n    property localName : string Read FLocalName;\r\n    property namespaceURI : String read FNameSpaceURI;\r\n    property nextElementSibling : TJSElement Read FNextElementSibling;\r\n    property previousElementSibling : TJSElement Read FPreviousElementSibling;\r\n    property prefix : String read FPrefix;\r\n    property scrollHeight : NativeInt Read FScrollHeight;\r\n{$IFDEF FIREFOX}\r\n    property scrollLeftMax  : NativeInt Read FScrollLeftMax;\r\n    property scrollTopMax  : NativeInt Read FScrollTopMax;\r\n{$ENDIF}\r\n    property scrollWidth : NativeInt Read FScrollWidth;\r\n    property tagName : String read FTagName;\r\n    Property Attrs[aName : string] : String read getAttribute write setAttribute; default;\r\n  end;\r\n   \r\n  TJSElementCreationOptions = record\r\n    named : string;\r\n  end;\r\n \r\n  TJSDocumentType = class external name 'DocumentType' (TJSNode)\r\n  private\r\n    FName : String; external name 'name';\r\n    FPublicID : String; external name 'publicId';\r\n    FSystemID : String; external name 'systemId';\r\n  public\r\n    property name : String read FName;\r\n    property publicId : String Read FPublicID;\r\n    property systemId : String read FSystemID;\r\n  end;\r\n\r\n  TJSDOMImplementation  = class external name 'DocumentImplementation'\r\n  Public  \r\n    function createDocument(aNamespaceURI, aQualifiedNameStr : String; aDocumentType : TJSDocumentType) : TJSDocument;\r\n    function createDocumentType(aQualifiedNameStr,aPublicId,aSystemId : String) : TJSDocumentType;\r\n    function createHTMLDocument(aTitle : String) : TJSDocument;\r\n  end;\r\n\r\n  TJSLocation = class external name 'Location'\r\n  Private\r\n    FOrigin : string;\r\n  Public\r\n    hash : string;\r\n    host : string;\r\n    hostname : string;\r\n    href : string;\r\n    password : string;\r\n    pathname : string;\r\n    port : string;\r\n    protocol : string;\r\n    search : string;\r\n    username : string;\r\n    procedure assign(aURL : String);\r\n    procedure reload(aForce : Boolean);\r\n    procedure replace(aURL : String);\r\n    function toString : String;\r\n    property origin : string read FOrigin;\r\n  end;\r\n  \r\n  TJSStyleSheet = class external name 'StyleSheet' (TJSEventTarget)\r\n  Private\r\n    FHRef : String; external name 'href';\r\n    FOwnerNode : TJSNode; external name 'ownerNode';\r\n    FParentStyleSheet : TJSStyleSheet; external name 'parentStyleSheet';\r\n    FTitle : String; external name 'title';\r\n    FType : String; external name 'type';\r\n  Public\r\n    disabled : String;\r\n    Property href : String read FHRef;\r\n    property ownerNode : TJSNode Read FOwnerNode;\r\n    property parentStyleSheet : TJSStyleSheet read FParentStyleSheet;\r\n    property title : string Read FTitle;\r\n    property _type : String read FType;\r\n  end;\r\n\r\n\r\n  TJSCSSRule = class external name 'CSSRule'\r\n  Private\r\n    FCSSText : String; external name 'cssText';\r\n    FParentStyleSheet : TJSCSSStyleSheet; external name 'parentStyleSheet';\r\n    FparentRule : TJSCSSRule; external name 'parentRule';\r\n  Public\r\n    property cssText : String Read FCSSText;\r\n    property parentRule : TJSCSSRule read FparentRule;\r\n    property parentStyleSheet : TJSCSSStyleSheet Read FParentStyleSheet;\r\n  end;\r\n  \r\n  TJSCSSRuleList = Class external name 'CSSRuleList'\r\n  Private\r\n    FLength : NativeInt; external name 'length';\r\n  Public\r\n    function item(index : NativeInt) : TJSCSSRule;\r\n    property length : NativeInt Read FLength;\r\n    Property items[aIndex : NativeInt] : TJSCSSRule read item; default;\r\n  end;\r\n  \r\n  \r\n  TJSCSSStyleSheet = class external name 'CSSStyleSheet' (TJSStyleSheet)\r\n  Private\r\n    FCSSRules : TJSCSSRuleList; external name 'cssRules';\r\n  Public\r\n    procedure deleteRule(aIndex : NativeInt);\r\n    function insertRule(aRule : String; aIndex : NativeInt) : NativeInt;\r\n    Property cssRules : TJSCSSRuleList read FCSSRules;\r\n  end;\r\n\r\n  TJSStyleSheetList = Class external name 'StyleSheetList'\r\n  Private\r\n    FLength : NativeInt; external name 'length';\r\n  Public\r\n    function item(index : NativeInt) : TJSStyleSheet;\r\n    property length : NativeInt Read FLength;\r\n    Property items[aIndex : NativeInt] : TJSStyleSheet read item; default;\r\n  end;\r\n\r\n  { TJSDocumentFragment }\r\n\r\n  TJSDocumentFragment = Class external name 'DocumentFragment' (TJSNode)\r\n  private\r\n    FchildElementCount: Integer; external name 'childElementCount';\r\n    Fchildren: TJSHTMLCollection; external name 'children';\r\n    FfirstElementChild: TJSElement; external name 'firstElementChild';\r\n    FlastElementChild: TJSElement; external name 'lastElementChild';\r\n  public\r\n    constructor new;\r\n    function querySelector(aSelector : String) : TJSElement;\r\n    function querySelectorAll(aSelector : String) : TJSNodeList;\r\n    property childElementCount : Integer read FchildElementCount;\r\n    property children : TJSHTMLCollection read Fchildren;\r\n    property firstElementChild : TJSElement read FfirstElementChild;\r\n    property lastElementChild : TJSElement read FlastElementChild;\r\n  end;\r\n\r\n  TJSEventInit = record\r\n    bubbles : boolean;\r\n    cancelable : boolean;\r\n    scoped : boolean;\r\n    composed : boolean;\r\n  end;\r\n\r\n  TJSEvent = class external name 'Event'\r\n  Private\r\n    FBubbles : Boolean; external name 'bubbles';\r\n    FCancelable : Boolean; external name 'cancelable';\r\n    FComposed : Boolean; external name 'composed';\r\n    FCurrentTarget : TJSElement; external name 'currentTarget';\r\n    FdefaultPrevented : Boolean; external name 'defaultPrevented';\r\n    FEventPhase : NativeInt; external name 'eventPhase';\r\n    FTarget : TJSElement; external name 'target';\r\n    FTimeStamp : NativeInt; external name 'timestamp';\r\n    FType : String; external name 'type';\r\n    FIsTrusted : Boolean; external name 'isTrusted';\r\n  Public\r\n    Const\r\n      NONE = 0;\r\n      CAPTURING_PHASE = 1;\r\n      AT_TARGET  = 2;\r\n      BUBBLING_PHASE = 3;\r\n  public    \r\n    cancelBubble : Boolean;\r\n    constructor new (aType : String; const aInit : TJSEventInit); overload;\r\n    procedure preventDefault;\r\n    procedure stopImmediatePropagation;\r\n    procedure stopPropagation;\r\n    Property bubbles : Boolean Read FBubbles;\r\n    Property cancelable : Boolean Read FCancelable;\r\n    Property composed : Boolean Read FComposed;\r\n    property currentTarget : TJSElement Read FCurrentTarget;\r\n    property defaultPrevented : Boolean Read FdefaultPrevented;\r\n    property eventPhase : NativeInt Read FEventPhase;\r\n    property target : TJSElement Read FTarget;\r\n    Property timestamp : NativeInt Read FTimeStamp;\r\n    property _type : string read FType;\r\n    property isTrusted : Boolean Read FIsTrusted;\r\n  end;\r\n\r\n\r\n  TJSXPathExpression = class external name 'XPathExpression'\r\n  Public\r\n    function evaluate(contextNode : TJSNode; aType : NativeInt; aResult : TJSXPathResult) : TJSXPathResult;\r\n    function evaluateWithContext(contextNode : TJSNode; aPosition, aSize, aType : NativeInt; aResult : TJSXPathResult) : TJSXPathResult;\r\n  end;\r\n\r\n  TJSXPathNSResolver = class external name 'XPathNSResolver'\r\n  Public\r\n    function lookupNamespaceURI(prefix : string) : string;\r\n  end;\r\n\r\n  { TJSCharacterData }\r\n\r\n  TJSCharacterData = class external name 'CharacterData' (TJSNode)\r\n  private\r\n    FnextElementSibling: TJSElement; external name 'nextElementSibling';\r\n    FpreviousElementSibling: TJSElement; external name 'previousElementSibling';\r\n  public\r\n    property nextElementSibling : TJSElement read FnextElementSibling;\r\n    property previousElementSibling : TJSElement read FpreviousElementSibling;\r\n  end;\r\n\r\n  TJSProcessingInstruction = class external name 'ProcessingInstruction' (TJSCharacterData);\r\n\r\n  { TJSRange }\r\n\r\n  TJSRange = class external name 'Range'\r\n  private\r\n    FCollapsed: boolean; external name 'collapsed';\r\n    FcommonAncestorContainer: TJSNode; external name 'commonAncestorContainer';\r\n    FendContainer: TJSNode; external name 'endContainer';\r\n    FEndOffset: NativeInt; external name 'endOffset';\r\n    FstartContainer: TJSNode; external name 'startContainer';\r\n    FstartOffset: NativeInt; external name 'startOffset';\r\n  Public\r\n    const\r\n      END_TO_END     = 0;\r\n      END_TO_START   = 1;\r\n      START_TO_END   = 2;\r\n      START_TO_START = 3;\r\n  Public\r\n    constructor new;\r\n    function cloneContents : TJSDocumentFragment;\r\n    function cloneRange : TJSRange;\r\n    procedure collapse;\r\n    function compareBoundaryPoints(aHow : NativeInt) : NativeInt;\r\n    function createContextualFragment(aTagstring : String) : TJSDocumentFragment;\r\n    procedure deleteContents;\r\n    procedure detach;\r\n    function extractContents : TJSDocumentFragment;\r\n    procedure insertNode(aNode : TJSNode);\r\n    procedure selectNode(aNode : TJSNode);\r\n    procedure selectNodeContents(aNode : TJSNode);\r\n    procedure setEnd(aEndNode : TJSNode; aEndOffset : NativeInt); \r\n    procedure setEndAfter(aEndNode : TJSNode);\r\n    procedure setEndBefore(aEndNode : TJSNode);\r\n    procedure setStart(aStartNode : TJSNode; aStartOffset : NativeInt); \r\n    procedure setStartAfter(aStartNode : TJSNode);\r\n    procedure setStartBefore(aStartNode : TJSNode);\r\n    procedure surroundContents(aNode : TJSNode);\r\n    function toString : string;\r\n    property collapsed : boolean read FCollapsed;\r\n    property commonAncestorContainer : TJSNode read FcommonAncestorContainer ;\r\n    property endContainer : TJSNode read FendContainer;\r\n    property endOffset : NativeInt Read FEndOffset;\r\n    property startContainer : TJSNode read FstartContainer;\r\n    property startOffset : NativeInt Read FstartOffset;\r\n  end;\r\n\r\n\r\n  { TJSTreeWalker }\r\n\r\n  TJSTreeWalker = class external name 'TreeWalker'\r\n  private\r\n    FCurrentNode: TJSNode; external name 'currentNode';\r\n    FexpandEntityReference: Boolean; external name 'expandEntityReference';\r\n    FFilter: TJSNodeFilter; external name 'filter';\r\n    FRoot: TJSNode; external name 'root';\r\n    FWhatToShow: NativeInt; external name 'whatToShow';\r\n  Public\r\n    function firstChild : TJSNode;\r\n    function lastChild : TJSNode;\r\n    function nextNode : TJSNode;\r\n    function nextSibling : TJSNode;\r\n    function parentNode : TJSNode;\r\n    function previousNode : TJSNode;\r\n    function previousSibling : TJSNode;\r\n\r\n    property root : TJSNode read FRoot;\r\n    property whatToShow : NativeInt read FWhatToShow;\r\n    property filter : TJSNodeFilter Read FFilter;\r\n    property expandEntityReference : Boolean Read FexpandEntityReference;\r\n    property currentNode : TJSNode Read FCurrentNode;\r\n  end;\r\n\r\n  TJSNodeFilter = class external name 'NodeFilter'\r\n    const\r\n      SHOW_ALL                    = -1;\r\n      SHOW_ATTRIBUTE              = 2;\r\n      SHOW_CDATA_SECTION          = 8;\r\n      SHOW_COMMENT                = 128;\r\n      SHOW_DOCUMENT               = 256;\r\n      SHOW_DOCUMENT_FRAGMENT      = 1024;\r\n      SHOW_DOCUMENT_TYPE          = 512;\r\n      SHOW_ELEMENT                = 1;\r\n      SHOW_ENTITY                 = 32;\r\n      SHOW_ENTITY_REFERENCE       = 16;\r\n      SHOW_NOTATION               = 2048;\r\n      SHOW_PROCESSING_INSTRUCTION = 64;\r\n      SHOW_TEXT                   = 4;\r\n    function acceptNode (aNode : TJSNode) : NativeInt;\r\n  end;\r\n\r\n  TJSXPathResult = class external name 'XPathResult'\r\n  private\r\n    FBooleanValue : Boolean; external name 'booleanValue';\r\n    FNumberValue : Double; external name 'numberValue';\r\n    FResultType : NativeInt; external name 'resultType';\r\n    FSingleNodeValue : TJSNode;  external name 'singleNodeValue';\r\n    FSnaphotLength : NativeInt; external name 'snapshotLength';\r\n    FStringValue : String; external name 'stringValue';\r\n  public  \r\n    Function iterateNext : TJSNode;\r\n    Function snapshotItem(Index: NativeInt) : TJSNode;\r\n    Property booleanValue : Boolean Read FBooleanValue;\r\n    Property numberValue : Double Read FNumberValue;\r\n    property resultType : NativeInt Read FResultType;\r\n    Property singleNodeValue : TJSNode Read FSingleNodeValue;\r\n    property snapshotLength : NativeInt read FSnaphotLength;\r\n    property stringValue : String Read FStringValue;\r\n  end;\r\n\r\n  TJSSelection = class external name 'Selection'\r\n  Private\r\n    FanchorNode : TJSNode ; external name 'anchorNode';\r\n    FanchorOffset : NativeInt ; external name 'anchorOffset';\r\n    FfocusNode : TJSNode ; external name 'focusNode';\r\n    FfocusOffset : NativeInt ; external name 'focusOffset';\r\n    FisCollapsed : Boolean ; external name 'isCollapsed';\r\n    FrangeCount : NativeInt ; external name 'rangeCount';\r\n    Ftype : String ; external name 'type';\r\n  Public\r\n    function getRangeAt(aIndex : NativeInt) : TJSRange;\r\n    procedure collapse(aParentNode : TJSNode; Offset : NativeInt);\r\n    procedure extend(aParentNode : TJSNode; Offset : NativeInt);\r\n    procedure collapseToStart;\r\n    procedure collapseToEnd;\r\n    procedure selectAllChildren(aParentNode : TJSNode);\r\n    procedure addRange(aRange : TJSRange);\r\n    procedure removeRange(aRange : TJSRange);\r\n    procedure removeAllRanges;\r\n    procedure deleteFromDocument;\r\n    function containsNode(aNode : TJSNode; aPartlyContained : Boolean) : Boolean;\r\n    procedure setBaseAndExtent(aAnchorNode : TJSNode; aAnchorOffset : NativeInt; aFocusNode : TJSNode; aFocusOffset : NativeInt);\r\n    function toString : String;\r\n    property anchorNode : TJSNode read FAnchorNode;\r\n    property anchorOffset : NativeInt read FAnchorOffset;\r\n    property focusNode : TJSNode read FFocusNode;\r\n    property focusOffset : NativeInt read FFocusOffset;\r\n    property isCollapsed : Boolean read FIsCollapsed;\r\n    property rangeCount : NativeInt read FRangeCount;\r\n    property _type : String Read FType;\r\n  end;\r\n  TJSNameSpaceMapperCallback = function (aNameSpace : string ) : String;\r\n\r\n  TJSHTMLFile = class;\r\n  TJSHTMLFileList = Class;\r\n\r\n  { TJSDataTransferItem }\r\n\r\n  TJSDataTransferItemCallBack = reference to Procedure(aData : String);\r\n\r\n  TJSDataTransferItem = class external name 'DataTransferItem'\r\n  private\r\n    FKind: String; external name 'kind';\r\n    FType: string; external name 'type';\r\n  Public\r\n    function getAsFile : TJSHTMLFile;\r\n    Procedure getAsString(aCallBack : TJSDataTransferItemCallBack);\r\n    property Kind : String read FKind;\r\n    property _Type : string read FType;\r\n  end;\r\n\r\n  TJSDataTransferItemList = class external name 'DataTransferItemList'\r\n  private\r\n    FLength: NativeInt; external name 'length';\r\n    function getitem(aIndex : nativeInt) : TJSDataTransferItem ; external name '[]';\r\n  Public\r\n    Function add(aData : string; AType: string) : TJSDataTransferItem; overload;\r\n    Function add(aFile : TJSHTMLFile) : TJSDataTransferItem; overload;\r\n    Procedure clear;\r\n    procedure remove(aIndex : integer);\r\n    property length : NativeInt read FLength;\r\n    property Items[aIndex : NativeInt] : TJSDataTransferItem Read getitem; default;\r\n  end;\r\n\r\n  { TDataTransfer }\r\n\r\n  TJSDataTransfer = class external name 'DataTransfer'\r\n  private\r\n    FFiles: TJSHTMLFileList; external name 'files';\r\n    FItems: TJSDataTransferItemList; external name 'items';\r\n    FTypes: TJSStringDynArray; external name 'types';\r\n  Public\r\n    dropEffect : string;\r\n    effectAllowed : string;\r\n    Procedure clearData; overload;\r\n    Procedure clearData(aFormat : string); overload;\r\n    function getData(aFormat : string) : String;\r\n    procedure setData(aFormat : String; aData : String);\r\n    procedure setDragImage(aImage: TJSElement; xOffset,yOffset : integer);\r\n    property files : TJSHTMLFileList Read FFiles;\r\n    property items : TJSDataTransferItemList read FItems;\r\n    property types : TJSStringDynArray read FTypes;\r\n  end;\r\n\r\n  { TJSDragEvent }\r\n\r\n  TJSDragEvent = class external name 'DragEvent' (TJSEvent)\r\n  Private\r\n    FDataTransfer: TJSDataTransfer; external name 'dataTransfer';\r\n    FrelatedTarget : TJSEventTarget external name 'relatedTarget';\r\n    FscreenX : NativeInt external name 'screenX';\r\n    FscreenY : NativeInt external name 'screenY';\r\n    FclientX : NativeInt external name 'clientX';\r\n    FclientY : NativeInt external name 'clientY';\r\n    Fbutton : NativeInt external name 'button';\r\n    Fbuttons : NativeInt external name 'buttons';\r\n    FctrlKey : Boolean external name 'ctrlKey';\r\n    FshiftKey : Boolean external name 'shiftKey';\r\n    FaltKey  : Boolean external name 'altKey';\r\n    FmetaKey  : Boolean external name 'metaKey';\r\n  Public\r\n    Property relatedTarget : TJSEventTarget Read FRelatedTarget;\r\n    Property screenX : NativeInt Read FScreenX;\r\n    Property screenY : NativeInt Read FScreenY;\r\n    Property clientX : NativeInt Read FClientX;\r\n    Property clientY : NativeInt Read FClientY;\r\n    Property button : NativeInt Read FButton;\r\n    Property buttons : NativeInt Read FButtons;\r\n    Property ctrlKey : Boolean Read FctrlKey;\r\n    Property shiftKey : Boolean Read FshiftKey;\r\n    Property altKey  : Boolean Read FaltKey;\r\n    Property metaKey  : Boolean Read FmetaKey;\r\n    property dataTransfer : TJSDataTransfer Read FDataTransfer;\r\n  end;\r\n  TJSDragDropEventHandler = reference to function(aEvent: TJSDragEvent) : Boolean;\r\n  THTMLClickEventHandler = reference to function(aEvent : TJSMouseEvent) : boolean;\r\n  { Various events }\r\n\r\n{$IFNDEF FIREFOX}\r\n  TJSFocusEvent = TJSEvent;\r\n{$ELSE}\r\n  TJSFocusEvent = Class(TJSEvent)\r\n  private\r\n    FrelatedTarget : TJSElement external name 'relatedTarget';\r\n  public\r\n    property relatedTarget : TJSElement Read FrelatedTarget;\r\n  end;\r\n{$ENDIF}\r\n  TJSAnimationEvent = Class(TJSEvent);\r\n  TJSLoadEvent = Class(TJSEvent);\r\n\r\n  TJSErrorEvent = class external name 'ErrorEvent' (TJSEvent)\r\n  Private\r\n    Fmessage : String external name 'message';\r\n    Ffilename : string external name 'filename';\r\n    Flineno : integer external name 'lineno';\r\n    Fcolno : integer external name 'colno';\r\n    Ferror : TJSObject external name 'error';\r\n  Public\r\n    Property message : String read FMessage;\r\n    property filename : string Read FFileName;\r\n    property lineno : integer read FLineNo;\r\n    Property colno : integer read FColNo;\r\n    Property error : TJSObject read FError;\r\n  end;\r\n\r\n  TJsPageTransitionEvent = class(TJSEvent)\r\n  end;\r\n\r\n  TJSHashChangeEvent = class external name 'HashChangeEvent' (TJSEvent)\r\n  Private\r\n    FnewURL : String external name 'newURL';\r\n    FoldURL : String external name 'oldURL';\r\n  public\r\n    property newURL : String Read FNewURL;\r\n    property oldURL : String Read FOldURL;\r\n  end;\r\n\r\n  TJSPopStateEvent = class external name 'PopStateEvent'  (TJSEvent)\r\n  Private\r\n    FState : JSValue; external name 'state';\r\n  Public\r\n    property state : JSValue read FState;\r\n  end;\r\n\r\n  TJSStorageEvent = class external name 'StorageEvent' (TJSEvent)\r\n  private\r\n    Fkey : String external name 'key';\r\n    FoldValue : String external name 'oldValue';\r\n    FnewValue : String external name 'newValue';\r\n    Furl : String external name 'url';\r\n    FstorageArea : String external name 'storageArea';\r\n  public\r\n    Property key : String Read FKey;\r\n    Property oldValue : String Read FOldValue;\r\n    Property newValue : String Read FNewValue;\r\n    Property url : String Read FURL;\r\n    Property storageArea : String Read FstorageArea;\r\n  end;\r\n\r\n  { TJSProgressEvent }\r\n\r\n  TJSProgressEvent = class external name 'ProgressEvent' (TJSEvent)\r\n  Private\r\n    FlengthComputable : Boolean external name 'lengthComputable';\r\n    Floaded : NativeUINT external name 'loaded';\r\n    FTotal : NativeUINT external name 'Total';\r\n  Public\r\n    property lengthComputable : Boolean Read FlengthComputable;\r\n    property loaded : NativeUINT Read FLoaded;\r\n    property Total : NativeUINT Read FTotal;\r\n  end;\r\n\r\n  TJSPageTransitionEventHandler = reference to function(aEvent : TJsPageTransitionEvent) : boolean;\r\n  TJSHashChangeEventhandler = reference to function(aEvent : TJSHashChangeEvent) : boolean;\r\n  TJSMouseWheelEventHandler = reference to function(aEvent : TJSWheelEvent) : boolean;\r\n  TJSMouseEventHandler = reference to function(aEvent : TJSMouseEvent) : boolean;\r\n  THTMLAnimationEventHandler = reference to function(aEvent : TJSAnimationEvent) : boolean;\r\n  TJSErrorEventHandler = reference to function(aEvent : TJSErrorEvent) : boolean;\r\n  TJSFocusEventHandler = reference to function(aEvent : TJSFocusEvent) : boolean;\r\n  TJSKeyEventhandler = reference to function (aEvent : TJSKeyBoardEvent) : boolean;\r\n  TJSLoadEventhandler = reference to function (aEvent : TJSLoadEvent) : boolean;\r\n  TJSPointerEventHandler = reference to function(aEvent : TJSPointerEvent) : boolean;\r\n  TJSUIEventHandler = reference to function(aEvent : TJSUIEvent) : Boolean;\r\n  TJSPopStateEventHandler = reference to function(aEvent : TJSPopStateEvent) : Boolean;\r\n  TJSStorageEventHandler = reference to function(aEvent : TJSStorageEvent) : Boolean;\r\n  TJSProgressEventhandler =  reference to function(aEvent : TJSProgressEvent) : Boolean;\r\n  TJSTouchEventHandler = reference to function(aEvent : TJSTouchEvent) : boolean;\r\n\r\n  TJSDocument = class external name 'Document' (TJSNode)\r\n  Private\r\n    fActiveElement : TJSElement; external name 'activeElement';\r\n    FCharacterSet: String; external name 'characterSet';\r\n    FChildElementCount: NativeInt; external name 'childElementCount';\r\n    FCompatMode: String; external name 'compatMode';\r\n    FCurrentScript: TJSElement; external name 'currentScript';\r\n    FDefaultView: TJSWindow; external name 'defaultView';\r\n    FDocType: TJSDocumentType; external name 'docrype';\r\n    FDocumentElement: TJSElement; external name 'documentElement';\r\n    FDocumentURI: String; external name 'documentURI';\r\n    FEmbeds: TJSHTMLCollection; external name 'embeds';\r\n    FFirstElementChild : TJSElement; external name 'firstElementChild';\r\n    FForms: TJSHTMLCollection; external name 'forms';\r\n    FFullScreenElement: TJSElement; external name 'fullscreenElement';\r\n    FFullscreenEnabled: Boolean; external name 'fullscreenEnabled';\r\n    FHead: TJSElement; external name 'head';\r\n    FHidden: Boolean; external name 'hidden';\r\n    FImages: TJSHTMLCollection; external name 'images';\r\n    FImplementation: TJSDOMImplementation; external name 'implementation';\r\n    FLastElementChild : TJSElement; external name 'lastElementChild';\r\n    FLastModified: String; external name 'lastModified';\r\n    FLastStyleSheetSet: String; external name 'lastStyleSheetSet';\r\n    FLinks: TJSHTMLCollection; external name 'links';\r\n    FLocation: TJSLocation; external name 'location';\r\n    FLocationString: String; external name 'location';\r\n    FPlugins: TJSHTMLCollection; external name 'plugins';\r\n    FPointerLockElement: TJSElement; external name 'pointerLockElement';\r\n    FPreferredStyleSheetSet: String; external name 'preferredStyleSheetSet';\r\n    FReadyState: String; external name 'readyState';\r\n    FReferrer: String; external name 'referrer';\r\n    FScripts: TJSHTMLCollection; external name 'scripts';\r\n    FStyleSheets: TJSStyleSheetList; external name 'styleSheets';\r\n    FStyleSheetSets: TJSValueDynArray; external name 'styleSheetSets';\r\n    FURL: String; external name 'URL';\r\n    FVisibilityState: string; external name 'visibilityState';\r\n  Public\r\n    function adoptNode(aExternalNode : TJSNode) : TJSNode;\r\n    procedure close;\r\n    function createAttribute(aName : string) : TJSAttr;\r\n    function createCDATASection(S : String) : TJSNode;\r\n    function createComment(S : String) : TJSNode;\r\n    function createDocumentFragment : TJSDocumentFragment;\r\n    function createElement(tagName : string) : TJSElement; overload;\r\n    function createElement(tagName : string; const options : TJSElementCreationOptions) : TJSElement; overload;\r\n    function createElementNS(aNameSpace,tagName : string) : TJSElement; overload;\r\n    function createElementNS(aNameSpace,tagName : string; const options : TJSElementCreationOptions) : TJSElement; overload;\r\n    function createEvent(aType : string) : TJSEvent;\r\n    function createExpression(xPathText : String; aNameSpaceMapper: TJSNameSpaceMapperCallback) : TJSXPathExpression;\r\n    function createNSResolver(aNode : TJSNode) : TJSXPathNSResolver;\r\n    function createProcessingInstruction(target, data : String) : TJSProcessingInstruction;\r\n    function createRange : TJSRange;\r\n    function createTextNode(S : String) : TJSNode;\r\n    function createTreeWalker(root : TJSNode; whatToShow : NativeInt; filter : TJSNodeFilter) : TJSTreeWalker;\r\n    function elementFromPoint(x,y : integer) : TJSElement;\r\n    procedure enableStyleSheetsForSet(aSet : String);\r\n    function evaluate(xpathExpression : String; ContextNode : TJSNode; NameSpaceResolver : TJSNamespaceMapperCallBack; resultType : NativeInt; aResult : TJSXPathResult) : TJSXPathResult;\r\n    function execCommand(aCommandName : String; aShowDefaultUI : Boolean; AValueArgument : String) : boolean; overload;\r\n    function execCommand(aCommandName : String; aShowDefaultUI : Boolean) : boolean; overload;\r\n    Procedure exitFullScreen;\r\n    function getElementById(aID : String) : TJSElement;\r\n    function getElementsyClassName(aNames : string) : TJSHTMLCollection;\r\n    function getElementsByName(aName : String) : TJSNodeList;\r\n    function getElementsByTagName(aName : String) : TJSHTMLCollection;\r\n    function getElementsByTagNameNS(aNameSpace,aName : String) : TJSHTMLCollection;\r\n    function getSelection : TJSSelection;\r\n    function hasFocus : boolean;\r\n    function importNode(aExternalNode : TJSNode; Deep: boolean) : TJSNode;\r\n    function querySelector(aSelectors : String) : TJSElement;\r\n    function querySelectorAll(aSelectors : String) : TJSNodeList;\r\n    procedure open;\r\n    procedure releaseCapture;\r\n    procedure write(aLine : string);\r\n    procedure writeln(aLine : String);\r\n  Public\r\n    body : TJSElement;\r\n    designMode : string;\r\n    dir : string;\r\n    domain : string;\r\n    selectedStyleSheetSet : string;\r\n    title : string;\r\n    onabort : TJSEventHandler;\r\n    onblur : TJSEventHandler;\r\n    oncancel : TJSEventHandler;\r\n    oncanplay : TJSEventHandler;\r\n    oncanplaythrough : TJSEventHandler;\r\n    onchange : TJSEventHandler;\r\n    onclick: THTMLClickEventHandler;\r\n    onclose : TJSEventHandler;\r\n    oncontextmenu : TJSEventHandler;\r\n    oncuechange : TJSEventHandler;\r\n    ondblclick : THTMLClickEventHandler;\r\n    ondrag : TJSDragDropEventHandler;\r\n    ondragend : TJSDragDropEventHandler;\r\n    ondragenter : TJSDragDropEventHandler;\r\n    ondragexit : TJSDragDropEventHandler;\r\n    ondragover : TJSDragDropEventHandler;\r\n    ondragleave : TJSDragDropEventHandler;\r\n    ondragstart: TJSDragDropEventHandler;\r\n    ondrop : TJSDragDropEventHandler;\r\n    ondurationchange : TJSEventHandler;\r\n    onemptied : TJSEventHandler;\r\n    onended : TJSEventHandler;\r\n    onerror : TJSErrorEventHandler;\r\n    onfocus : TJSFocusEventhandler;\r\n    ongotpointercapture : TJSPointerEventHandler;\r\n    oninput : TJSEventhandler;\r\n    oninvalid : TJSEventhandler;\r\n    onkeydown : TJSKeyEventhandler;\r\n    onkeypress : TJSKeyEventhandler;\r\n    onkeyup : TJSKeyEventhandler;\r\n    onload : TJSEventhandler;\r\n    onloadeddata : TJSEventhandler;\r\n    onloadedmetadata : TJSEventhandler;\r\n    onloadend : TJSProgressEventhandler;\r\n    onloadstart : TJSProgressEventhandler;\r\n    onlostpointercapture : TJSPointerEventHandler;\r\n    onmessage : TJSEventHandler;\r\n    onmousedown : TJSMouseEventHandler;\r\n    onmouseenter : TJSMouseEventHandler;\r\n    onmouseleave : TJSMouseEventHandler;\r\n    onmousemove : TJSMouseEventHandler;\r\n    onmouseout : TJSMouseEventHandler;\r\n    onmouseover : TJSMouseEventHandler;\r\n    onmouseup : TJSMouseEventHandler;\r\n    onmousewheel : TJSMouseEventHandler;\r\n    onpause : TJSEventHandler;\r\n    onplay : TJSEventHandler;\r\n    onplaying : TJSEventHandler;\r\n    onpointercancel : TJSPointerEventHandler;\r\n    onpointerdown : TJSPointerEventHandler;\r\n    onpointerenter : TJSPointerEventHandler;\r\n    onpointerleave : TJSPointerEventHandler;\r\n    onpointermove : TJSPointerEventHandler;\r\n    onpointerout : TJSPointerEventHandler;\r\n    onpointerover : TJSPointerEventHandler;\r\n    onpointerup : TJSPointerEventHandler;\r\n    onpointerlockchange : TJSPointerEventHandler;\r\n    onprogress : TJSProgressEventhandler;\r\n    onreset : TJSUIEventHandler;\r\n    onratechange : TJSEventHandler;\r\n    onscroll : TJSUIEventHandler;\r\n    onseekend : TJSEventHandler;\r\n    onseeking : TJSEventHandler;\r\n    onselect : TJSEventHandler;\r\n    onselectionchange : TJSEventHandler;\r\n    onsshow : TJSEventHandler;\r\n    onsubmit : TJSEventHandler;\r\n    onunload : TJSUIEventHandler;\r\n    onwaiting : TJSEventHandler;\r\n    touchstart : TJSTouchEventHandler;\r\n    touchend : TJSTouchEventHandler;\r\n    touchmove : TJSTouchEventHandler;\r\n    touchcancel : TJSTouchEventHandler;\r\n    Property activeElement : TJSElement Read FActiveElement;\r\n    Property characterSet : String Read FCharacterSet;\r\n    property childElementCount : NativeInt Read FChildElementCount;\r\n    property compatMode : String Read FCompatMode;\r\n    property currentScript : TJSElement Read FCurrentScript;\r\n    property defaultView : TJSWindow Read FDefaultView;\r\n    property doctype : TJSDocumentType read FDocType;\r\n    property documentElement : TJSElement read FDocumentElement;\r\n    property documentURI : String Read FDocumentURI;\r\n    property embeds : TJSHTMLCollection Read FEmbeds;\r\n    property firstElementChild : TJSElement Read FFirstElementChild;\r\n    property lastElementChild : TJSElement Read FLastElementChild;\r\n    property Forms : TJSHTMLCollection Read FForms;\r\n    property fullscreenElement : TJSElement Read FFullScreenElement;\r\n    property fullscreenEnabled : Boolean Read FFullscreenEnabled;\r\n    property head : TJSElement read FHead;\r\n    Property hidden : Boolean read FHidden;\r\n    property images : TJSHTMLCollection Read FImages;\r\n    property _implementation : TJSDOMImplementation Read FImplementation;\r\n    property lastModified : String Read FLastModified;\r\n    property lastStyleSheetSet : String read FLastStyleSheetSet;\r\n    property links : TJSHTMLCollection Read FLinks;\r\n    property location : TJSLocation read FLocation;\r\n    Property LocationString : String Read FURL Write FLocationString; // On purpose\r\n    property plugins : TJSHTMLCollection Read FPlugins;\r\n    property pointerLockElement : TJSElement Read FPointerLockElement;\r\n    property preferredStyleSheetSet : String Read FPreferredStyleSheetSet;\r\n    Property readyState : String Read FReadyState;\r\n    Property referrer : String Read FReferrer;\r\n    property scripts : TJSHTMLCollection Read FScripts;\r\n    property styleSheets : TJSStyleSheetList Read FStyleSheets;\r\n    property styleSheetSets : TJSValueDynArray Read FStyleSheetSets; // No type documented ?\r\n    Property URL : String Read FURL;\r\n    property visibilityState : string read FVisibilityState;\r\n  end;\r\n\r\n  TJSConsole = class external name 'Console'\r\n  Public\r\n    procedure assert(anAssertion : string; Obj1 : JSValue); varargs;\r\n    Procedure clear;  \r\n    procedure count; overload;\r\n    procedure count(aCounter : String);\r\n    procedure error(Obj1 : JSValue); varargs;\r\n    procedure group; overload;\r\n    procedure group(aLabel : String); overload;\r\n    procedure groupCollapsed; overload;\r\n    procedure groupCollapsed(aLabel : String);overload;\r\n    procedure groupEnd;\r\n    procedure info(Obj1 : JSValue); varargs;\r\n    procedure log(Obj1 : JSValue); varargs;\r\n    procedure table(args: array of JSValue); overload;\r\n    procedure table(args: array of JSValue; Columns : Array of string);\r\n    procedure table(args: TJSObject); overload;\r\n    procedure table(args: TJSObject; Columns : Array of string); overload;\r\n    procedure time(aName : string);\r\n    procedure timeEnd(aName : string);\r\n    procedure trace;\r\n    procedure warn(Obj1 : JSValue); varargs;\r\n  end;\r\n\r\n  { TJSCryptoKey }\r\n\r\n  TJSCryptoKey = class external name 'CryptoKey'\r\n  private\r\n    FAlgorithm: JSValue; external name 'algorithm';\r\n    FExtractable: Boolean; external name 'extractable';\r\n    FType: string; external name 'type';\r\n    FUsages: TStringDynArray; external name 'usages';\r\n  Public\r\n    property _type : string read FType;\r\n    property extractable: Boolean read FExtractable;\r\n    property algorithm : JSValue read FAlgorithm;\r\n    property usages : TStringDynArray Read FUsages;\r\n  end;\r\n  \r\n  { TJSSubtleCrypto }\r\n\r\n  TJSBufferSource = class external name 'BufferSource' end;\r\n  TJSTypedArray = class external name 'TypedArray' end;\r\n\r\n  TJSSubtleCrypto = class external name 'SubtleCrypto'\r\n  Public\r\n    function decrypt(algorithm : JSValue; aKey : TJSCryptoKey; aData : TJSBufferSource) : TJSPromise;\r\n    function deriveKey(algorithm : JSValue; aMasterKey : TJSCryptoKey; aDerivedAlgo : JSValue; extractable : Boolean; Usages : TStringDynArray) : TJSPromise;\r\n    function digest(algorithm : string; Buffer : TJSArrayBuffer) : TJSPromise; overload;\r\n    function digest(algorithm : string; Buffer : TJSTypedArray) : TJSPromise; overload;\r\n    function encrypt(algorithm : JSValue; aKey : TJSCryptoKey; aData : TJSBufferSource) : TJSPromise;\r\n    function exportKey(algorithm : String; AKey : TJSCryptoKey) : TJSPromise;\r\n    function generateKey(algorithm : JSValue; extractable : Boolean; Usages : TStringDynArray) : TJSPromise;\r\n    function importKey(format : String; KeyData : TJSArrayBuffer; algorithm : String; extractable : Boolean; Usages : TStringDynArray) : TJSPromise;\r\n    function sign(algorithm : string; Key : TJSCryptoKey; aText : TJSArrayBuffer) : TJSPromise; overload;\r\n    function unwrapKey(algorithm : string; wrappedKey : TJSArrayBuffer; Key: TJSCryptoKey;\r\n                       unwrapAlgo : string; unwrappedKeyAlgo : string; \r\n                       extractable : Boolean; Usages : TStringDynArray) : TJSPromise;\r\n   function verify(algorithm : String; key : TJSCryptoKey; Signature : TJSArrayBuffer; \r\n                   textToVerify : TJSArrayBuffer): TJSPromise;\r\n   function wrapKey(aFormat : string; Key,WrappingKey : TJSCryptoKey; WrapAlgorithm : String) : TJSPromise;                   \r\n  end;\r\n  \r\n  { TJSCrypto }\r\n\r\n  TJSCrypto = class external name 'Crypto'\r\n  private\r\n    FsubtleCrypto: TJSSubtleCrypto;\r\n  Public\r\n    procedure getRandomValues (anArray : TJSTypedArray);\r\n    property subtleCrypto : TJSSubtleCrypto Read FsubtleCrypto;\r\n  end;\r\n  \r\n  { TJSHistory }\r\n\r\n  TJSHistory = class external name 'History'\r\n  private\r\n    FLength: NativeInt; external name 'length';\r\n{$IFDEF FIREFOX}\r\n    FState : JSValue; external name 'state';\r\n{$ENDIF}\r\n  Public\r\n    procedure back;\r\n    procedure forward;\r\n    procedure go(aIndex : NativeInt);\r\n    procedure go;\r\n    procedure pushState(aState : jsValue; aTitle : String; AURL : String);\r\n    procedure pushState(aState : jsValue; aTitle : String);\r\n    procedure replaceState(aState : jsValue; aTitle : String; AURL : String);\r\n    procedure replaceState(aState : jsValue; aTitle : String);\r\n    procedure replaceState(aState : jsValue);\r\n{$IFDEF FIREFOX}\r\n    property state : JSValue read FState;\r\n{$ENDIF}\r\n    property length: NativeInt read FLength;\r\n  end;\r\n\r\n  TJSIDBTransactionMode = class\r\n  const\r\n    readonly = 'readonly';\r\n    readwrite = 'readwrite';\r\n    versionchange = 'versionchange';\r\n  end;\r\n\r\n\r\n  { TJSIDBTransaction }\r\n\r\n  TJSIDBTransaction = class external name 'IDBTransaction'  (TJSEventTarget)\r\n  private\r\n    FDB : TIDBDatabase; external name 'db';\r\n    FError: JSValue; external name 'error';\r\n    FMode: String; external name 'mode';\r\n    FObjectStoreNames: TStringDynArray; external name 'objectStoreNames';\r\n  public\r\n    procedure abort;\r\n    function objectStore(aName : String) : TJSIDBObjectStore;\r\n    property db : TIDBDatabase read FDB;\r\n    property mode : String read FMode;\r\n    property objectStoreNames : TStringDynArray read FObjectStoreNames;\r\n    property error : JSValue read FError;\r\n  end;\r\n\r\n\r\n  { TJSIDBKeyRange }\r\n\r\n  TJSIDBKeyRange = class external name 'IDBKeyRange'\r\n  private\r\n    FLower: JSValue;\r\n    FLowerOpen: Boolean;\r\n    FUpper: JSValue;\r\n    FUpperOpen: Boolean;\r\n  Public\r\n    Class Function bound(aLower,aUpper : JSValue) : TJSIDBKeyRange; overload;\r\n    Class Function bound(aLower,aUpper : JSValue; aLowerOpen : Boolean) : TJSIDBKeyRange; overload;\r\n    Class Function bound(aLower,aUpper : JSValue; aLowerOpen,aUpperOpen : Boolean) : TJSIDBKeyRange; overload;\r\n    Class Function lowerBound(aLower : JSValue) : TJSIDBKeyRange; overload;\r\n    Class Function lowerBound(aLower : JSValue; aOpen: Boolean) : TJSIDBKeyRange; overload;\r\n    Class Function only(aValue : JSValue) : TJSIDBKeyRange;\r\n    Class Function upperBound(aUpper : JSValue) : TJSIDBKeyRange; overload;\r\n    Class Function upperBound(aUpper : JSValue; aOpen: Boolean) : TJSIDBKeyRange; overload;\r\n    function includes (aValue : JSValue) : Boolean;\r\n    property lower : JSValue read FLower;\r\n    property lowerOpen : Boolean read FLowerOpen;\r\n    property upper : JSValue read FUpper;\r\n    property upperOpen : Boolean read FUpperOpen;\r\n  end;\r\n\r\n  TJSIDBIndexParameters = record\r\n    unique : boolean;\r\n    multiEntry : boolean;\r\n    locale : string;\r\n  end;\r\n\r\n\r\n  { TJSIDBIndex }\r\n\r\n  TJSIDBIndex = class external name 'IDBIndex'\r\n  private\r\n    FKeyPath: JSValue; external name 'keyPath';\r\n    FMultiEntry: Boolean; external name 'multiEntry';\r\n    FObjectStore: TJSIDBObjectStore; external name 'objectStore';\r\n    FUnique: boolean; external name 'unique';\r\n  public\r\n    name : string;\r\n    function count : TJSIDBRequest;\r\n    function get(aKey : jsValue) : TJSIDBRequest; overload;\r\n    function get(aKey : TJSIDBKeyRange) : TJSIDBRequest; overload;\r\n    function getAll(aKey : jsValue) : TJSIDBRequest; overload;\r\n    function getAll(aKey : TJSIDBKeyRange) : TJSIDBRequest; overload;\r\n    function getAll(aKey : jsValue; ACount : NativeInt) : TJSIDBRequest; overload;\r\n    function getAll(aKey : TJSIDBKeyRange; ACount : NativeInt) : TJSIDBRequest; overload;\r\n    function getAllKeys(aKey : jsValue) : TJSIDBRequest; overload;\r\n    function getAllKeys(aKey : TJSIDBKeyRange) : TJSIDBRequest; overload;\r\n    function getAllKeys(aKey : jsValue; ACount : NativeInt) : TJSIDBRequest; overload;\r\n    function getAllKeys(aKey : TJSIDBKeyRange; ACount : NativeInt) : TJSIDBRequest; overload;\r\n    function getKey(aKey : jsValue) : TJSIDBRequest;\r\n    function openCursor : TJSIDBRequest; overload;\r\n    function openCursor(aKeyRange : TJSIDBKeyRange) : TJSIDBRequest; overload;\r\n    function openCursor(aKeyRange : TJSIDBKeyRange; ADirection : String) : TJSIDBRequest;overload;\r\n    function openKeyCursor : TJSIDBRequest;overload;\r\n    function openKeyCursor(aKeyRange : TJSIDBKeyRange) : TJSIDBRequest;overload;\r\n    function openKeyCursor(aKeyRange : TJSIDBKeyRange; ADirection : String) : TJSIDBRequest;overload;\r\n    Property keyPath : JSValue Read FKeyPath;\r\n    property multiEntry : Boolean read FMultiEntry;\r\n    property objectStore : TJSIDBObjectStore read FObjectStore;\r\n    property unique : boolean read FUnique;\r\n  end;\r\n\r\n  TJSIDBCursorDirection = class external name 'IDBCursorDirection'\r\n  Const\r\n    next = 'next';\r\n    nextUnique = 'nextUnique';\r\n    prev = 'prev';\r\n    prevUnique = 'prevUnique';\r\n  end;\r\n\r\n\r\n  { TJSIDBCursor }\r\n\r\n  TJSIDBCursor = class external name 'IDBCursor'\r\n  private\r\n    FDirection: string; external name 'direction';\r\n    FKey: JSValue; external name 'key';\r\n    FPrimaryKey: JSValue; external name 'primaryKey';\r\n    FSource: JSValue; external name 'source';\r\n    FSourceAsIndex: TJSIDBIndex; external name 'source';\r\n    FSourceAsStore: TJSIDBObjectStore; external name 'source';\r\n  Public\r\n    procedure advance(aCount : NativeInt); overload;\r\n    procedure advance(aKey : JSValue); overload;\r\n    procedure continue(aKey : JSValue); overload;\r\n    procedure continue; overload;\r\n    procedure continuePrimaryKey(aKey : JSValue); overload;\r\n    procedure continuePrimaryKey(aKey,aPrimaryKey : JSValue); overload;\r\n    procedure delete;\r\n    procedure update(aValue : JSValue);\r\n    property source : JSValue read FSource;\r\n    property sourceAsStore : TJSIDBObjectStore read FSourceAsStore;\r\n    property sourceAsIndex : TJSIDBIndex read FSourceAsIndex;\r\n    property key : JSValue read FKey;\r\n    property primaryKey : JSValue read FPrimaryKey;\r\n    property direction : string read FDirection;\r\n  end;\r\n\r\n  TJSIDBObjectStore = class external name 'IDBObjectStore'  (TJSEventTarget)\r\n  public\r\n    function add(aValue : JSValue; aKey : String) : TJSIDBRequest;\r\n    function add(aValue : JSValue) : TJSIDBRequest;\r\n    function clear : TJSIDBRequest;\r\n    function delete(aKey : string) : TJSIDBRequest;\r\n    function delete(aKeyRange : TJSIDBKeyRange) : TJSIDBRequest;\r\n    function get(aKey : string) : TJSIDBRequest; overload;\r\n    function get(aKeyRange : TJSIDBKeyRange) : TJSIDBRequest; overload;\r\n    function getKey(aKey : string) : TJSIDBRequest; overload;\r\n    function getKey(aKeyRange : TJSIDBKeyRange) : TJSIDBRequest; overload;\r\n    function getAll : TJSIDBRequest; overload;\r\n    function getAll(aKey : String) : TJSIDBRequest; overload;\r\n    function getAll(aKeyRange : TJSIDBKeyRange) : TJSIDBRequest; overload;\r\n    function getAll(aKey : String; aCount: NativeInt) : TJSIDBRequest; overload;\r\n    function getAll(aKeyRange : TJSIDBKeyRange; aCount: NativeInt) : TJSIDBRequest; overload;\r\n    function getAllKeys(aKey : String) : TJSIDBRequest; overload;\r\n    function getAllKeys(aKeyRange : TJSIDBKeyRange) : TJSIDBRequest; overload;\r\n    function getAllKeys(aKey : String; aCount: NativeInt) : TJSIDBRequest; overload;\r\n    function getAllKeys(aKeyRange : TJSIDBKeyRange; aCount: NativeInt) : TJSIDBRequest; overload;\r\n    function createIndex (aIndexName : String; KeyPath : String)  : TJSIDBIndex; overload;\r\n    function createIndex (aIndexName : String; KeyPath : String; Options : TJSIDBIndexParameters)  : TJSIDBIndex; overload;\r\n    function createIndex (aIndexName : String; KeyPath : Array of String)  : TJSIDBIndex; overload;\r\n    function createIndex (aIndexName : String; KeyPath : Array of String; Options : TJSIDBIndexParameters)  : TJSIDBIndex; overload;\r\n    Procedure deleteIndex (aIndexName : String);\r\n    function index (aIndexName : String)  : TJSIDBIndex;\r\n    function put(aValue : JSValue; aKey : String) : TJSIDBRequest; overload;\r\n    function put(aValue : JSValue) : TJSIDBRequest; overload;\r\n    function openCursor : TJSIDBRequest; overload;\r\n    function openCursor(aKey : String) : TJSIDBRequest; overload;\r\n    function openCursor(aKeyRange : TJSIDBKeyRange) : TJSIDBRequest; overload;\r\n    function openCursor(aKey : String; aDirection : string) : TJSIDBRequest; overload;\r\n    function openCursor(aKeyRange : TJSIDBKeyRange; aDirection : string) : TJSIDBRequest; overload;\r\n    function openKeyCursor : TJSIDBRequest; overload;\r\n    function openKeyCursor(aKey : String) : TJSIDBRequest; overload;\r\n    function openKeyCursor(aKeyRange : TJSIDBKeyRange) : TJSIDBRequest; overload;\r\n    function openKeyCursor(aKey : String; aDirection : string) : TJSIDBRequest; overload;\r\n    function openKeyCursor(aKeyRange : TJSIDBKeyRange; aDirection : string) : TJSIDBRequest; overload;\r\n    function count : TJSIDBRequest; overload;\r\n    function count(aKey : String) : TJSIDBRequest; overload;\r\n    function count(aKeyRange : TJSIDBKeyRange) : TJSIDBRequest; overload;\r\n    property Indexes [aIndexName : String] : TJSIDBIndex read index;\r\n  end;\r\n\r\n  { TJSIDBRequest }\r\n\r\n  TJSIDBRequest = class external name 'IDBRequest'  (TJSEventTarget)\r\n  private\r\n    Ferror : JSValue; external name 'error'; // standards are not quite clear on this one\r\n    FReadyState: string; external name 'readyState';\r\n    FResult: JSValue; external name 'result';\r\n    FResultDatabase: TIDBDatabase; external name 'result';\r\n    FResultIndex: TJSIDBIndex; external name 'result';\r\n    FResultObjectStore : TJSIDBObjectStore; external name 'result';\r\n    FResultCursor : TJSIDBCursor; external name 'result';\r\n    FSourceDatabase: TIDBDatabase; external name 'source';\r\n    FSourceIndex: TJSIDBIndex; external name 'source';\r\n    FSourceObjectStore : TJSIDBObjectStore; external name 'source';\r\n    FSourceCursor : TJSIDBCursor; external name 'source';\r\n    FSource: JSValue; external name 'source';\r\n    FTransaction: TJSIDBTransaction; external name 'transaction';\r\n  Public\r\n    onerror : TJSEventHandler;\r\n    onsuccess : TJSEventHandler;\r\n    Property error : JSValue read FError;\r\n    property readyState : string read FReadyState;\r\n\r\n    property result : JSValue read FResult;\r\n    property resultAsObjectStore : TJSIDBObjectStore read FResultObjectStore;\r\n    property resultAsCursor : TJSIDBCursor read FResultCursor;\r\n    property resultAsIndex : TJSIDBIndex read FResultIndex;\r\n    property resultAsDatabase : TIDBDatabase read FResultDatabase;\r\n\r\n    property source : JSValue read FSource;\r\n    property sourceAsObjectStore : TJSIDBObjectStore read FSourceObjectStore;\r\n    property sourceAsCursor : TJSIDBCursor read FSourceCursor;\r\n    property sourceAsIndex : TJSIDBIndex read FSourceIndex;\r\n    property sourceAsDatabase : TIDBDatabase read FSourceDatabase;\r\n\r\n    property transaction : TJSIDBTransaction read FTransaction;\r\n  end;\r\n\r\n  TJSIDBOpenDBRequest = class external name 'IDBOpenDBRequest' (TJSIDBRequest)\r\n  Public\r\n    onblocked : TJSEventHandler;\r\n    onupgradeneeded : TJSEventHandler;\r\n  end;\r\n\r\n  TJSCreateObjectStoreOptions = record\r\n    keyPath : jsValue;\r\n    autoIncrement : boolean;\r\n  end;\r\n\r\n  { TIDBDatabase }\r\n\r\n  TIDBDatabase = class external name 'IDBDatabase' (TJSEventTarget)\r\n  private\r\n    FName: string; external name 'name';\r\n    FobjectStoreNames: TStringDynArray; external name 'objectStoreNames';\r\n    FVersion: integer; external name 'version';\r\n  public\r\n    procedure close;\r\n    function createObjectStore(aName : string) : TJSIDBObjectStore; overload;\r\n    function createObjectStore(aName : string; Options: TJSCreateObjectStoreOptions) : TJSIDBObjectStore; overload;\r\n    procedure deleteObjectStore(aName : string);\r\n    function transaction(aStoreNames : array of string) : TJSIDBTransaction; overload;\r\n    function transaction(aStoreNames : array of string; aMode : string) : TJSIDBTransaction; overload;\r\n    property name : string read FName;\r\n    property version : integer read FVersion;\r\n    property objectStoreNames : TStringDynArray read FobjectStoreNames;\r\n  end;\r\n\r\n  TJSIDBFactory = class external name 'IDBFactory' (TJSEventTarget)\r\n  public\r\n    function open(aName : string) : TJSIDBOpenDBRequest;\r\n    function open(aName : string; aVersion : Integer) : TJSIDBOpenDBRequest;\r\n    function deleteDatabase(aName : string) : TJSIDBOpenDBRequest;\r\n    function cmp (a,b : jsValue) : NativeInt;\r\n  end;\r\n  \r\n  { TJSStorage }\r\n\r\n  TJSStorage = class external name 'Storage' (TJSEventTarget)\r\n  private\r\n    FLength: NativeInt; external name 'length';\r\n  public\r\n    function key(aIndex : Integer) : String;\r\n    function getItem(aKeyName : string) : string;\r\n    procedure setItem(aKeyName : string; aValue : string);\r\n    procedure removeItem(aKeyName : string);\r\n    procedure clear;\r\n    property Keys[AIndex : Integer] : String read key;\r\n    property Items[aKeyName: String] : String read getItem write setItem; default;\r\n    property length : NativeInt Read FLength;\r\n  end;\r\n\r\n  // Fake object, used for objects whose visible can be checked\r\n  TJSVisibleItem = class external name 'IVisible'\r\n  Private\r\n    FVisible : boolean; external name 'visible';\r\n  Public\r\n    Property visible : boolean read FVisible;\r\n  end;\r\n  \r\n  TJSLocationBar = class external name 'LocationBar' (TJSVisibleItem);\r\n  TJSMenuBar = class external name 'MenuBar' (TJSVisibleItem);\r\n  TJSToolBar = class external name 'ToolBar' (TJSVisibleItem);\r\n  TJSPersonalBar = class external name 'PersonalBar' (TJSVisibleItem);\r\n  TJSScrollBars = class external name 'ScrollBars' (TJSVisibleItem);\r\n\r\n  TJSPositionError = record\r\n    code : integer;\r\n    message : string;\r\n  end;\r\n\r\n  TJSPositionOptions = record\r\n    enableHighAccuracy : boolean;\r\n    timeout : integer;\r\n    maximumAge : integer;\r\n  end;\r\n\r\n  TJSCoordinates = record\r\n    latitude : double;\r\n    longitude : double;\r\n    altitude : double;\r\n    accuracy : double;\r\n    altitudeAccuracy : double;\r\n    heading : double;\r\n    speed : double;\r\n  end;\r\n\r\n  TJSPosition = record\r\n    coords : TJSCoordinates;\r\n    timestamp : String;\r\n  end;\r\n\r\n  TJSGeoLocationCallback = procedure (aPosition : TJSPosition);\r\n  TJSGeoLocationEvent = procedure (aPosition : TJSPosition) of object;\r\n  TJSGeoLocationErrorCallback = procedure (aValue : TJSPositionError);\r\n  TJSGeoLocationErrorEvent = procedure (aValue : TJSPositionError) of object;\r\n\r\n  TJSGeoLocation  = class external name 'GeoLocation'\r\n  Public\r\n    Procedure getCurrentPosition(ASuccess : TJSGeoLocationCallback); overload;\r\n    Procedure getCurrentPosition(ASuccess : TJSGeoLocationCallback;aError : TJSGeoLocationErrorCallback); overload;\r\n    Procedure getCurrentPosition(ASuccess : TJSGeoLocationCallback;aError : TJSGeoLocationErrorCallback; AOptions : TJSPositionOptions); overload;\r\n    Function watchPosition(ASuccess : TJSGeoLocationCallback) : NativeInt; overload;\r\n    Function watchPosition(ASuccess : TJSGeoLocationCallback;aError : TJSGeoLocationErrorCallback) : NativeInt; overload;\r\n    Function watchPosition(ASuccess : TJSGeoLocationCallback;aError : TJSGeoLocationErrorCallback; AOptions : TJSPositionOptions) : NativeInt; overload;\r\n    procedure clearWatch(AID : NativeInt);\r\n  end;\r\n\r\n  TJSMediaDevices = class external name 'MediaDevices' (TJSEventTarget)\r\n  end;\r\n\r\n  TJSWorker = class external name 'Worker' (TJSEventTarget)\r\n  public\r\n    constructor new(aURL : string);\r\n    procedure postMessage(aValue : JSValue);\r\n    procedure postMessage(aValue : JSValue; aList : TJSValueDynArray);\r\n    procedure terminate;\r\n  end;\r\n\r\n  TJSMessagePort = class external name 'MessagePort' (TJSEventTarget)\r\n  Public\r\n    procedure close;\r\n    procedure postMessage(aValue : JSValue);\r\n    procedure postMessage(aValue : JSValue; aList : TJSValueDynArray);\r\n    procedure start;\r\n  end;\r\n\r\n  { TJSSharedWorker }\r\n\r\n  TJSSharedWorker = class external name 'SharedWorker' (TJSEventTarget)\r\n  private\r\n    FPort: TJSMessagePort; external name 'port';\r\n  Public\r\n    constructor new(aURL : String); overload;\r\n    constructor new(aURL : String; aName : string); overload;\r\n    property port : TJSMessagePort Read FPort;\r\n  end;\r\n\r\n  { TJSServiceWorker }\r\n\r\n  TJSServiceWorker = class external name 'ServiceWorker' (TJSWorker)\r\n  private\r\n    FscriptURL: String;  external name 'scriptURL';\r\n    FState: string;  external name 'state';\r\n  Public\r\n    property state : string read FState;\r\n    property scriptURL : String Read FscriptURL;\r\n  end;\r\n\r\n  { TJSServiceWorkerRegistration }\r\n\r\n  TJSServiceWorkerRegistration = class external name 'ServiceWorkerRegistration'\r\n  private\r\n    FActive: TJSServiceWorker; external name 'active';\r\n    FInstalling: TJSServiceWorker; external name 'installing';\r\n    FScope: string; external name 'scope';\r\n    FWaiting: TJSServiceWorker; external name 'waiting';\r\n  public\r\n    function unregister : TJSPromise;\r\n    procedure update;\r\n    property active : TJSServiceWorker read FActive;\r\n    property scope : string read FScope;\r\n    property waiting : TJSServiceWorker read FWaiting;\r\n    property installing : TJSServiceWorker read FInstalling;\r\n  end;\r\n\r\n  TJSServiceWorkerContainerOptions = record\r\n    scope : string;\r\n  end;\r\n\r\n  { TJSServiceWorkerContainer }\r\n\r\n  TJSServiceWorkerContainer = class external name 'ServiceWorkerContainer'\r\n  private\r\n    FController: TJSServiceWorker; external name 'controller';\r\n    FReady: TJSPromise; external name 'ready';\r\n  Public\r\n    function register(aURL : String) : TJSPromise; overload;\r\n    function register(aURL : String; aOptions : TJSServiceWorkerContainerOptions) : TJSPromise; overload;\r\n    function getRegistration(aURL : String) : TJSPromise; overload;\r\n    function getRegistration : TJSPromise; overload;\r\n    function getRegistrations : TJSPromise;\r\n    property controller : TJSServiceWorker read FController;\r\n    property ready : TJSPromise read FReady;\r\n  end;\r\n\r\n\r\n  { TJSNavigator }\r\n\r\n  TJSNavigator = class external name 'Navigator'\r\n{$IFDEF FIREFOX}\r\n    FbuildID : String ; external name 'buildID';\r\n    FOSCPU : String ; external name 'oscpu';\r\n    FproductSub : string; external name 'productSub';\r\n    FVendor : string; external name 'vendor';\r\n{$ENDIF}\r\n  private\r\n    FCookieEnabled: Boolean; external name 'cookieEnabled';\r\n    FGeoLocation: TJSGeoLocation; external name 'geolocation';\r\n    FLanguage: String; external name 'language';\r\n    FMaxTouchPoints: NativeInt; external name 'maxTouchPoints';\r\n    FMediaDevices: TJSMediaDevices; external name 'mediaDevices';\r\n    FOnline: boolean; external name 'onLine';\r\n    FPlatform: string; external name 'platform';\r\n    FServiceWorker: TJSServiceWorkerContainer; external name 'serviceWorker';\r\n    FUserAgent: string; external name 'userAgent';\r\n  public\r\n    function getBattery : TJSPromise;\r\n    function requestMediaKeySystemAccess(aKeySystem : String; supportedConfigurations : TJSValueDynArray) : TJSPromise;\r\n    Procedure registerContentHandler(aMimeType,aURI,aTitle : string);\r\n    Procedure registerProtocolHandler(aProtocol,aURI,aTitle : string);\r\n    Procedure vibrate(aPattern : NativeInt);\r\n    Procedure vibrate(aPattern : Array of NativeInt);\r\n{$IFDEF FIREFOX}\r\n    property buildID : String read FBuildID;\r\n    property oscpu : string read FOSCPU;\r\n    property productSub: string read FproductSub;\r\n    property vendor : string read Fvendor;\r\n{$ENDIF}\r\n    property cookieEnabled : Boolean read FCookieEnabled;\r\n    property geoLocation : TJSGeoLocation Read FGeoLocation;\r\n    property language : String read FLanguage;\r\n    property maxTouchPoints : NativeInt read FMaxTouchPoints;\r\n    property mediaDevices : TJSMediaDevices read FMediaDevices;\r\n    property onLine : boolean read FOnline;\r\n    property platform : string read FPlatform;\r\n    property userAgent : string read FUserAgent;\r\n    property serviceWorker : TJSServiceWorkerContainer read FServiceWorker;\r\n  end;\r\n\r\n  { TJSTouchEvent }\r\n  TTouchCoord = longint;\r\n\r\n  TJSTouch = class external name 'Touch'\r\n  private\r\n    FClientX: TTouchCoord; external name 'clientX';\r\n    FClientY: TTouchCoord; external name 'clientY';\r\n    FIDentifier: longint; external name 'identifier';\r\n    FPageX: TTouchCoord; external name 'pageX';\r\n    FPageY: TTouchCoord; external name 'pageY';\r\n    FScreenX: TTouchCoord; external name 'screenX';\r\n    FScreenY: TTouchCoord; external name 'screenY';\r\n    FTarget: TJSElement; external name 'target';\r\n  Public\r\n    Property identifier : longint read FIDentifier;\r\n    Property ScreenX : TTouchCoord Read FScreenX;\r\n    Property ScreenY : TTouchCoord Read FScreenY;\r\n    Property ClientX : TTouchCoord Read FClientX;\r\n    Property ClientY : TTouchCoord Read FClientY;\r\n    Property PageX : TTouchCoord Read FPageX;\r\n    Property PageY : TTouchCoord Read FPageY;\r\n    Property Target : TJSElement Read FTarget;\r\n  end;\r\n\r\n  { TJSTouchList }\r\n\r\n  TJSTouchList = class external name 'TouchList'\r\n  private\r\n    FLength: NativeInt; external name 'length';\r\n  Public\r\n    function item (aIndex : Integer) : TJSTouch;\r\n    property length : NativeInt Read FLength;\r\n    Property Touches[AIndex : Integer] : TJSTouch Read item; default;\r\n  end;\r\n\r\n\r\n  TJSPerformance = class external name 'Performance' (TJSObject);\r\n\r\n  TJSScreen = class external name 'Screen' (TJSObject);\r\n\r\n  TJSURL = class external name 'URL' (TJSObject);\r\n  \r\n  TJSCSSStyleDeclaration = class; // forward\r\n\r\n  TJSTimerCallBack = reference to procedure;\r\n\r\n  { TJSMediaQueryList }\r\n\r\n  TJSMediaQueryList = class external name 'MediaQueryList' (TJSObject)\r\n  private\r\n    FMatches: Boolean; external name 'matches';\r\n    FMedia: String; external name 'media';\r\n  Public\r\n    Property matches : Boolean Read FMatches;\r\n    Property media : String Read FMedia;\r\n  end;\r\n\r\n  { TJSWindow }\r\n\r\n  TJSWindowArray = Array of TJSWindow;\r\n  TJSWindow = class external name 'Window' (TJSObject)\r\n  Private\r\n    FClosed: boolean; external name 'closed';\r\n    FConsole : TJSConsole;  external name 'console';\r\n    FCrypto: TJSCrypto; external name 'crypto';\r\n    FDevicePixelRatio: Double; external name 'devicePixelRatio';\r\n    FDocument: TJSDocument; external name 'document';\r\n    FFrameElement: TJSElement; external name 'frameElement';\r\n    FFrames: TJSWindowArray; external name 'frames';\r\n    FHistory: TJSHistory; external name 'history';\r\n    FIndexedDB: TJSIDBFactory; external name 'indexedDB';\r\n    FInnerheight: NativeInt; external name 'innerHeight';\r\n    FInnerWidth: NativeInt; external name 'innerWidth';\r\n    FLength: NativeInt; external name 'length';\r\n    FLocalStorage: TJSStorage; external name 'localStorage';\r\n    FLocation: TJSLocation; external name 'location';\r\n    FLocationBar: TJSLocationBar; external name 'locationbar';\r\n    FLocationString: string; external name 'location';\r\n    FMenuBar: TJSMenuBar; external name 'menubar';\r\n    FNavigator: TJSNavigator; external name 'navigator';\r\n    FOpener: TJSWindow; external name 'opener';\r\n    FOuterheight: NativeInt; external name 'outerHeight';\r\n    FOuterWidth: NativeInt; external name 'outerWidth';\r\n    FParent: TJSWindow; external name 'parent';\r\n    FPerformance: TJSPerformance; external name 'Performance';\r\n    FPersonalBar: TJSPersonalBar; external name 'personalbar';\r\n    FScreen: TJSScreen; external name 'screen';\r\n    FScreenX: NativeInt; external name 'screenX';\r\n    FScreenY: NativeInt; external name 'screenY';\r\n    FScrollbar: TJSScrollBars; external name 'scrollbar';\r\n    FScrollX: NativeInt; external name 'scrollX';\r\n    FScrollY: NativeInt; external name 'scrollY';\r\n    FSelf: TJSWindow; external name 'self';\r\n    FSessionStorage: TJSStorage; external name 'sessionStorage';\r\n    FToolBar: TJSToolBar; external name 'toolbar';\r\n    FTop: TJSWindow; external name 'top';\r\n    FURL: TJSURL; external name 'URL';\r\n  Public\r\n    fullSreen : Boolean;   \r\n    name : string;\r\n    status : string;\r\n    onabort : TJSEventHandler;\r\n    onafterprint : TJSEventHandler;\r\n    onbeforeprint : TJSEventHandler;\r\n    onbeforeinstallprompt : TJSEventHandler;\r\n    onbeforeunloadprompt : TJSEventHandler;\r\n    onblur : TJSEventHandler;\r\n    onchange : TJSEventHandler;\r\n    onclick: THTMLClickEventHandler;\r\n    onclose : TJSEventHandler;\r\n    oncontextmenu : TJSEventHandler;\r\n    ondblclick : THTMLClickEventHandler;\r\n    onerror : TJSErrorEventHandler;\r\n    onfocus : TJSFocusEventhandler;\r\n    onhashchange : TJSHashChangeEventhandler;\r\n    oninput : TJSEventhandler;\r\n    onkeydown : TJSKeyEventhandler;\r\n    onkeypress : TJSKeyEventhandler;\r\n    onkeyup : TJSKeyEventhandler;\r\n    onlanguagechange : TJSEventhandler;\r\n    onload : TJSEventhandler;\r\n    onloadend : TJSLoadEventhandler;\r\n    onloadstart : TJSLoadEventhandler;\r\n    onmessage : TJSEventHandler;\r\n    onmousedown : TJSMouseEventHandler;\r\n    onmouseenter : TJSMouseEventHandler;\r\n    onmouseleave : TJSMouseEventHandler;\r\n    onmousemove : TJSMouseEventHandler;\r\n    onmouseout : TJSMouseEventHandler;\r\n    onmouseover : TJSMouseEventHandler;\r\n    onmouseup : TJSMouseEventHandler;\r\n    onmousewheel : TJSMouseEventHandler;\r\n    onoffline : TJSEventHandler;\r\n    ononline : TJSEventHandler;\r\n    onpagehide : TJSPageTransitionEventHandler;\r\n    onpageshow : TJSPageTransitionEventHandler;\r\n    onpaint : TJSEventHandler;\r\n    onpointercancel : TJSPointerEventHandler;\r\n    onpointerdown : TJSPointerEventHandler;\r\n    onpointerenter : TJSPointerEventHandler;\r\n    onpointerleave : TJSPointerEventHandler;\r\n    onpointermove : TJSPointerEventHandler;\r\n    onpointerout : TJSPointerEventHandler;\r\n    onpointerover : TJSPointerEventHandler;\r\n    onpointerup : TJSPointerEventHandler;\r\n    onpointerlockchange : TJSPointerEventHandler;\r\n    onprogress : TJSProgressEventhandler;\r\n    onpopstate : TJSPopStateEventHandler;\r\n    onreset : TJSUIEventHandler;\r\n    onscroll : TJSUIEventHandler;\r\n    onselect : TJSEventHandler;\r\n    onselectionchange : TJSEventHandler;\r\n    onstorage : TJSStorageEventHandler;\r\n    onsubmit : TJSEventHandler;\r\n    onunload : TJSUIEventHandler;\r\n    touchstart : TJSTouchEventHandler;\r\n    touchend : TJSTouchEventHandler;\r\n    touchmove : TJSTouchEventHandler;\r\n    touchcancel : TJSTouchEventHandler;\r\n    procedure addEventListener(aname : string; aListener : TJSEventHandler);\r\n    procedure addEventListener(aname : string; aListener : JSValue);\r\n    Procedure alert(Const Msg : String);\r\n    Function atob(Const aValue : string) : string;\r\n    procedure blur;\r\n    Procedure clearInterval(aID: NativeInt);\r\n    Procedure clearTimeout(aID: NativeInt);\r\n    Function btoa(Const aValue : string) : string;\r\n    Procedure close;\r\n    Function confirm(Const aMsg : String) :  boolean;\r\n    procedure focus;\r\n    Function getComputedStyle(aElement : TJSElement) : TJSCSSStyleDeclaration; overload;\r\n    Function getComputedStyle(aElement,aPseudoElement : TJSElement) : TJSCSSStyleDeclaration; overload;\r\n    function matchMedia(aQuery : String) : TJSMediaQueryList;\r\n    procedure moveBy(x,y : NativeInt);\r\n    procedure moveTo(x,y : NativeInt);\r\n    function open : TJSWindow;\r\n    function open(Const aURL : String) : TJSWindow; overload;\r\n    function open(Const aURL,aTarget : String) : TJSWindow; overload;\r\n    function open(Const aURL,aTarget : String; AOptions : TJSObject) : TJSWindow; overload;\r\n    procedure print;\r\n    function prompt(const aMessage : String) : String; overload;\r\n    function prompt(const aMessage,aDefault : String) : String; overload;\r\n    procedure removeEventListener(aname : string; aListener : TJSEventHandler);\r\n    procedure removeEventListener(aname : string; aListener : JSValue);\r\n    procedure resizeBy(aWidth,aHeight : NativeInt);\r\n    procedure resizeTo(aWidth,aHeight : NativeInt);\r\n    procedure scrollBy(x,y : NativeInt);\r\n    procedure scrollTo(x,y : NativeInt);\r\n    Function setInterval(ahandler : TJSTimerCallBack; aInterval : NativeUInt) : NativeInt; varargs;\r\n    Function setTimeout(ahandler : TJSTimerCallBack; aTimeout : NativeUInt) : NativeInt; varargs;\r\n    Function setTimeout(ahandler : TJSTimerCallBack) : NativeInt;\r\n    procedure stop;\r\n\r\n    property console : TJSConsole Read FConsole;\r\n    property closed : boolean read FClosed;\r\n    property crypto : TJSCrypto Read FCrypto;\r\n    property devicePixelRatio : Double read FDevicePixelRatio;\r\n    property document : TJSDocument read FDocument;\r\n    property frameElement : TJSElement Read FFrameElement;\r\n    Property frames  : TJSWindowArray read FFrames;\r\n    Property history : TJSHistory read FHistory;\r\n    Property indexedDB : TJSIDBFactory read FIndexedDB;\r\n    Property innerHeight : NativeInt Read FInnerheight;\r\n    Property innerWidth : NativeInt Read FInnerWidth;\r\n    Property length : NativeInt Read FLength;\r\n    Property localStorage : TJSStorage Read FLocalStorage; \r\n    property location : TJSLocation Read FLocation;\r\n    Property locationString : String read FLocationString write FLocationString;\r\n    property locationbar : TJSLocationBar Read FLocationBar;\r\n    property menubar : TJSMenuBar Read FMenuBar;\r\n    property navigator : TJSNavigator Read FNavigator;\r\n    property opener : TJSWindow read FOpener;\r\n    Property outerHeight : NativeInt Read FOuterheight;\r\n    Property outerWidth : NativeInt Read FOuterWidth;\r\n    Property parent : TJSWindow Read FParent;\r\n    Property Performance : TJSPerformance Read FPerformance;\r\n    property personalbar : TJSPersonalBar Read FPersonalBar;\r\n    property screen : TJSScreen read FScreen;\r\n    property screenX : NativeInt read FScreenX;\r\n    Property screenY : NativeInt read FScreenY;\r\n    Property scrollbar : TJSScrollBars Read FScrollbar;\r\n    property scrollX : NativeInt read FScrollX;\r\n    Property scrollY : NativeInt read FScrollY;\r\n    Property _Self : TJSWindow read FSelf;\r\n    Property sessionStorage : TJSStorage Read FSessionStorage; \r\n    property toolbar : TJSToolBar Read FToolBar;\r\n    property top : TJSWindow Read FTop;\r\n    property URL : TJSURL Read FURL; \r\n  end;\r\n\r\n  { TJSCSSStyleDeclaration }\r\n\r\n  TJSCSSStyleDeclaration = class external name 'CSSStyleDeclaration'\r\n  private\r\n    FLength: NativeInt; external name 'length';\r\n    FParentRule: TJSCSSRule; external name 'parentRule';\r\n    FAnimation: string; external name 'webkitAnimation';\r\n    FAnimationName: string; external name  'webkitAnimationName';\r\n  public\r\n    cssText : string;\r\n    function item(aIndex : Integer) : string;\r\n    function removeProperty(const aProperty : String) : string;\r\n    function getPropertyPriority(const aProperty : String) : string;\r\n    function getPropertyValue(const aProperty : String) : string;\r\n    procedure setProperty(const aProperty,aValue : String);overload;\r\n    procedure setProperty(const aProperty,aValue,aPriority : string); overload;\r\n    property length : NativeInt read FLength;\r\n    property parentRule : TJSCSSRule read FParentRule;\r\n    property webkitAnimation: String read FAnimation write FAnimation;\r\n    property webkitAnimationName: String read FAnimationName write FAnimationName;\r\n\r\n  end;\r\n\r\n\r\n\r\n\r\n\r\n  { TJSHTMLElement }\r\n  TJSHTMLElement = class external name 'HTMLELement' (TJSElement)\r\n  private\r\n    FDataset: TJSObject ; external name 'dataset';\r\n    FIsContentEditable: Boolean ; external name 'isContentEditable';\r\n    FOffsetHeight: Double; external name 'offsetHeight';\r\n    FOffsetLeft: Double; external name 'offsetLeft';\r\n    FOffsetParent: TJSElement; external name 'offsetParent';\r\n    FOffsetTop: Double; external name 'offsetTop';\r\n    FOffsetWidth: Double; external name 'offsetWidth';\r\n  Public\r\n    accessKey : string;\r\n    contentEditable : string;\r\n    dir : string;\r\n    draggable : boolean;\r\n    hidden : boolean;\r\n    lang : string;\r\n    spellcheck : boolean;\r\n    style : TJSCSSStyleDeclaration;\r\n    tabIndex : Integer;\r\n    title: string;\r\n    onabort : TJSEventHandler;\r\n    onanimationcancel: THTMLAnimationEventHandler;\r\n    onanimationend: THTMLAnimationEventHandler;\r\n    onblur : TJSEventHandler;\r\n    oncancel : TJSEventHandler;\r\n    oncanplay : TJSEventHandler;\r\n    oncanplaythrough : TJSEventHandler;\r\n    onchange : TJSEventHandler;\r\n    onclick: THTMLClickEventHandler;\r\n    onclose : TJSEventHandler;\r\n    oncontextmenu : TJSEventHandler;\r\n    ondblclick : THTMLClickEventHandler;\r\n    ondrag : TJSDragDropEventHandler;\r\n    ondragend : TJSDragDropEventHandler;\r\n    ondragenter : TJSDragDropEventHandler;\r\n    ondragexit : TJSDragDropEventHandler;\r\n    ondragover : TJSDragDropEventHandler;\r\n    ondragleave : TJSDragDropEventHandler;\r\n    ondragstart: TJSDragDropEventHandler;\r\n    ondrop : TJSDragDropEventHandler;\r\n    onerror : TJSErrorEventHandler;\r\n    onfocus : TJSFocusEventhandler;\r\n    ondurationchange : TJSEventHandler;\r\n    onemptied : TJSEventHandler;\r\n    onended : TJSEventHandler;\r\n    ongotpointercapture : TJSPointerEventHandler;\r\n    oninput : TJSEventhandler;\r\n    oninvalid : TJSEventhandler;\r\n    onkeydown : TJSKeyEventhandler;\r\n    onkeypress : TJSKeyEventhandler;\r\n    onkeyup : TJSKeyEventhandler;\r\n    onload : TJSEventhandler;\r\n    onloadeddata : TJSEventhandler;\r\n    onloadedmetadata : TJSEventhandler;\r\n    onloadend : TJSLoadEventhandler;\r\n    onloadstart : TJSLoadEventhandler;\r\n    onlostpointercapture : TJSPointerEventHandler;\r\n    onmousedown : TJSMouseEventHandler;\r\n    onmouseenter : TJSMouseEventHandler;\r\n    onmouseleave : TJSMouseEventHandler;\r\n    onmousemove : TJSMouseEventHandler;\r\n    onmouseout : TJSMouseEventHandler;\r\n    onmouseover : TJSMouseEventHandler;\r\n    onmouseup : TJSMouseEventHandler;\r\n    onmousewheel : TJSMouseEventHandler;\r\n    onpause : TJSPointerEventHandler;\r\n    onplay : TJSPointerEventHandler;\r\n    onplaying : TJSPointerEventHandler;\r\n    onpointercancel : TJSPointerEventHandler;\r\n    onpointerdown : TJSPointerEventHandler;\r\n    onpointerenter : TJSPointerEventHandler;\r\n    onpointerleave : TJSPointerEventHandler;\r\n    onpointermove : TJSPointerEventHandler;\r\n    onpointerout : TJSPointerEventHandler;\r\n    onpointerover : TJSPointerEventHandler;\r\n    onpointerup : TJSPointerEventHandler;\r\n    onpointerlockchange : TJSPointerEventHandler;\r\n    onprogress : TJSProgressEventhandler;\r\n    onseeked : TJSEventHandler;\r\n    onseeking : TJSEventHandler;\r\n    onreset : TJSUIEventHandler;\r\n    onscroll : TJSUIEventHandler;\r\n    onselect : TJSEventHandler;\r\n    onselectstart : TJSEventHandler;\r\n    onselectionchange : TJSEventHandler;\r\n    onshow : TJSEventHandler;\r\n    onstalled : TJSEventHandler;\r\n    ontimeupdate : TJSEventHandler;\r\n    ontransitioncancel : TJSEventHandler;\r\n    ontransitionend : TJSEventHandler;\r\n    onvolumechange : TJSEventHandler;\r\n    onsubmit : TJSEventHandler;\r\n    onwheel : TJSMouseWheelEventHandler;\r\n    onwaiting : TJSEventHandler;\r\n    touchstart : TJSTouchEventHandler;\r\n    touchend : TJSTouchEventHandler;\r\n    touchmove : TJSTouchEventHandler;\r\n    touchcancel : TJSTouchEventHandler;\r\n    Procedure blur;\r\n    Procedure focus;\r\n    Procedure click;\r\n    property dataset : TJSObject read FDataset;\r\n    property isContentEditable : Boolean read FIsContentEditable;\r\n    property offsetHeight : Double Read FOffsetHeight;\r\n    property offsetLeft : Double Read FOffsetLeft;\r\n    property offsetTop : Double Read FOffsetTop;\r\n    property offsetWidth : Double Read FOffsetWidth;\r\n    property offsetParent : TJSElement Read FOffsetParent;\r\n  end;\r\n\r\n  TJSHTMLFormControlsCollection = class external name 'HTMLFormControlsCollection' (TJSHTMLCollection)\r\n  Public\r\n    function namedItem(S : String) : TJSElement; reintroduce; external name 'namedItem';\r\n    property Items[S : String] : TJSElement read namedItem; default;\r\n  end;\r\n\r\n  { TJSHTMLFormElement }\r\n\r\n  TJSHTMLFormElement = class external name 'HTMLFormElement' (TJSHTMLElement)\r\n  private\r\n    FElements: TJSHTMLFormControlsCollection; external name 'elements';\r\n    FLength: NativeInt; external name 'length';\r\n  Public\r\n    method : string;\r\n    target : string;\r\n    action : string;\r\n    encoding : string;\r\n    enctype : string;\r\n    acceptCharset :  string;\r\n    autocomplete : string;\r\n    noValidate : boolean;\r\n    property elements : TJSHTMLFormControlsCollection read FElements;\r\n    Property length : NativeInt Read FLength;\r\n  end;\r\n\r\n  { TJSValidityState }\r\n\r\n  TJSValidityState = class external name 'ValidityState'\r\n  private\r\n    FBadInput: Boolean; external name 'badInput';\r\n    FCustomError: Boolean; external name 'customError';\r\n    FPatternMismatch: Boolean; external name 'patternMisMatch';\r\n    FRangeOverflow: Boolean; external name 'rangeOverflow';\r\n    FRangeUnderflow: Boolean; external name 'rangeUnderflow';\r\n    FStepMismatch: Boolean; external name 'stepMismatch';\r\n    FTooLong: Boolean; external name 'tooLong';\r\n    FTooShort: Boolean; external name 'tooShort';\r\n    FTypeMismatch: Boolean; external name 'typeMisMatch';\r\n    FValid: Boolean; external name 'valid';\r\n    FValueMissing: Boolean; external name 'valueMissing';\r\n  public\r\n    property badInput : Boolean read FBadInput;\r\n    property customError : Boolean read FCustomError;\r\n    property patternMisMatch : Boolean read FPatternMismatch;\r\n    property rangeOverflow : Boolean read FRangeOverflow;\r\n    property rangeUnderflow : Boolean read FRangeUnderflow;\r\n    property stepMismatch : Boolean read FStepMismatch;\r\n    property tooLong : Boolean read FTooLong;\r\n    property tooShort : Boolean read FTooShort;\r\n    property typeMisMatch : Boolean read FTypeMismatch;\r\n    property valid : Boolean Read FValid;\r\n    property valueMissing : Boolean read FValueMissing;\r\n  end;\r\n\r\n  { TJSBlob }\r\n\r\n  TJSBlob = class external name 'Blob' (TJSEventTarget)\r\n  private\r\n    FSize: NativeInt; external name 'size';\r\n    FType: string; external name  'type';\r\n  Public\r\n    procedure close;\r\n    function slice : TJSBlob; overload;\r\n    function slice(aStart : NativeInt) : TJSBlob; overload;\r\n    function slice(aStart,aEnd : NativeInt) : TJSBlob; overload;\r\n    function slice(aStart,aEnd : NativeInt; AContentType : String) : TJSBlob; overload;\r\n    property size : NativeInt read FSize;\r\n    property _type : string read FType;\r\n  end;\r\n\r\n\r\n  { TJSHTMLFile }\r\n\r\n  TJSHTMLFile = class external name 'File' (TJSBlob)\r\n  private\r\n    FLastModified: NativeInt; external name 'lastModified';\r\n    FLastModifiedDate: TJSDate; external name 'lastModifiedDate';\r\n    FName: string; external name 'name';\r\n  Public\r\n    property name : string read FName;\r\n    property lastModified : NativeInt read FLastModified;\r\n    property lastModifiedDate : TJSDate read FLastModifiedDate;\r\n  end;\r\n\r\n  { TJSHTMLFileList }\r\n\r\n  TJSHTMLFileList = class external name 'FileList' (TJSEventTarget)\r\n  private\r\n    FLength: NativeInt; external name 'length';\r\n  Public\r\n    function item(aIndex : NativeInt) : TJSHTMLFile;\r\n    property length : NativeInt read FLength;\r\n    property Files[aIndex : NativeInt] : TJSHTMLFile Read item; default;\r\n  end;\r\n\r\n   { TJSHTMLInputElement }\r\n  // https://html.spec.whatwg.org/multipage/forms.html#the-input-element\r\n\r\n  TJSHTMLInputElement = class external name 'HTMLInputElement' (TJSHTMLElement)\r\n  private\r\n    FFiles: TJSHTMLFileList; external name 'files';\r\n    FForm: TJSHTMLFormElement; external name 'form';\r\n    FLabels: TJSNodeList; external name 'labels';\r\n    FList: TJSHTMLElement; external name 'list';\r\n    FValidationmMessage: string; external name 'validationMessage';\r\n    FValidity: TJSValidityState; external name 'validity';\r\n    FWillValidate: boolean; external name 'willValidate';\r\n  Public\r\n    procedure select;\r\n    procedure setCustomValidity(aText : string);\r\n    procedure stepUp; overload;\r\n    procedure stepUp(n : Integer); overload;\r\n    function checkValidity : Boolean;\r\n    function reportValidity : Boolean;\r\n    procedure setSelectionRange(selectionStart, selectionEnd: NativeInt) ; overload;\r\n    procedure setSelectionRange(selectionStart, selectionEnd: NativeInt; Direction : string) ; overload;\r\n    procedure setRangeText(aText : string; selectionStart, selectionEnd: NativeInt) ; overload;\r\n    procedure setRangeText(aText : string; selectionStart, selectionEnd: NativeInt; Direction : string) ; overload;\r\n  Public\r\n    accept : string;\r\n    allowDirs : boolean;\r\n    align : string;\r\n    alt : string;\r\n    autofocus : boolean;\r\n    autocapitalize : string;\r\n    autocomplete : string;\r\n    defaultValue : string;\r\n    defaultChecked : string;\r\n    checked : boolean;\r\n    dirName : string;\r\n    disabled : boolean;\r\n    formAction : string;\r\n    formEncType : string;\r\n    formMethod : string;\r\n    formNoValidate : Boolean;\r\n    formTarget : string;\r\n    height : Boolean;\r\n    indeterminate : boolean;\r\n    inputMode : string;\r\n    max : string;\r\n    maxLength : NativeInt;\r\n    min : string;\r\n    minLength : NativeInt;\r\n    multiple : boolean;\r\n    pattern : string;\r\n    placeholder : string;\r\n    readOnly : boolean;\r\n    required : boolean;\r\n    size : NativeInt;\r\n    src : string;\r\n    step : string;\r\n    _type : string; external name 'type';\r\n    selectionStart : NativeInt;\r\n    selectionEnd : NativeInt;\r\n    selectionDirection : string;\r\n    useMap : string;\r\n    value : string;\r\n    width : NativeInt;\r\n    property files : TJSHTMLFileList Read FFiles;\r\n    property form : TJSHTMLFormElement read FForm;\r\n    property labels : TJSNodeList read FLabels;\r\n    property list : TJSHTMLElement Read FList;\r\n    property validationMessage : string read FValidationmMessage;\r\n    property willValidate : boolean read FWillValidate;\r\n    property validity : TJSValidityState read FValidity;\r\n  end;\r\n\r\n  { TJSHTMLOptionElement }\r\n\r\n  TJSHTMLOptionElement = class external name 'Option' (TJSHTMLElement)\r\n  private\r\n    FForm: TJSHTMLFormElement; external name 'form';\r\n    FIndex: NativeInt; external name 'index';\r\n  Public\r\n    Constructor New; overload;\r\n    Constructor New(aText : String); overload;\r\n    Constructor New(aText,aValue : String); overload;\r\n    Constructor New(aText,aValue : String; aDefaultSelected : Boolean); overload;\r\n    Constructor New(aText,aValue : String; aDefaultSelected,Selected : Boolean); overload;\r\n  Public\r\n    defaultSelected : boolean;\r\n    disabled : boolean;\r\n    _label : string ; external name 'label';\r\n    selected : boolean;\r\n    text : string;\r\n    value : string;\r\n    property index : NativeInt Read FIndex;\r\n    property form : TJSHTMLFormElement Read FForm;\r\n  end;\r\n\r\n  TJSHTMLOptGroupElement = class external name 'HTMLOptGroupElement' (TJSHTMLElement)\r\n  end;\r\n\r\n  TJSHTMLOptionsCollection = class external name 'HTMLOptionsCollection' (TJSHTMLCollection)\r\n  end;\r\n\r\n  { TJSHTMLSelectElement }\r\n\r\n  TJSHTMLSelectElement = Class external name 'HTMLSelectElement' (TJSHTMLElement)\r\n  private\r\n    FForm: TJSHTMLFormElement; external name 'form';\r\n    FLabels: TJSNodeList; external name 'labels';\r\n    FLength: NativeInt; external name 'length';\r\n    FOptions: TJSHTMLOptionsCollection; external name 'options';\r\n    FSelectedOptions: TJSHTMLCollection; external name 'selectedOptions';\r\n    FType: String; external name 'type';\r\n    FValidationMessage: string; external name 'validationMessage';\r\n    FValidity: TJSValidityState; external name 'validity';\r\n    fwillValidate: Boolean; external name 'willValidate';\r\n  Public\r\n    Procedure add(anItem : TJSHTMLOptionElement); overload;\r\n    Procedure add(anItem, before : TJSHTMLOptionElement); overload;\r\n    function item(aIndex : NativeInt): TJSHTMLOptionElement;\r\n    function namedItem(aName : String): TJSHTMLOptionElement;\r\n    procedure remove(aIndex : NativeInt);\r\n    procedure checkValidity;\r\n    procedure setCustomValidity(aMessage : String);\r\n  Public\r\n    multiple : boolean;\r\n    required: boolean;\r\n    selectedIndex : NativeInt;\r\n    size : NativeInt;\r\n    value : string;\r\n    property length : NativeInt read FLength;\r\n    Property options : TJSHTMLOptionsCollection read FOptions;\r\n    Property selectedOptions : TJSHTMLCollection read FSelectedOptions;\r\n    Property form : TJSHTMLFormElement read FForm;\r\n    property labels : TJSNodeList Read FLabels;\r\n    property _type : String Read FType;\r\n    property validity : TJSValidityState Read FValidity;\r\n    property validationMessage : string Read FValidationMessage;\r\n    property willValidate : Boolean read fwillValidate;\r\n  end;\r\n//------------------------------------------------------------------------------\r\n{ TJSHTMLTableElement }\r\n\r\n  TJSHTMLTableSectionElement = class;\r\n  TJSHTMLTableRowElement = class;\r\n\r\n  TJSHTMLTableElement = Class external name 'HTMLTableElement' (TJSHTMLElement)\r\n  private\r\n    FAlign: String; external name 'align';\r\n    FBGColor: String; external name 'bgColor';\r\n    FBorder: String; external name 'border';\r\n    FCaption: TJSHTMLElement; external name 'caption';\r\n    FCellPadding: String; external name 'cellPadding';\r\n    FCellSpacing: String; external name 'cellSpacing';\r\n    FFrame: String; external name 'frame';\r\n    FRows: TJSHTMLCollection; external name 'rows';\r\n    FRules: String; external name 'rules';\r\n    FSummary: String; external name 'summary';\r\n    FTBodies: TJSHTMLCollection; external name 'tBodies';\r\n    FTfoot: TJSHTMLTableSectionElement; external name 'tfoot';\r\n    FTHead: TJSHTMLTableSectionElement; external name 'tHead';\r\n    FWidth: String; external name 'width';\r\n  public\r\n  { Methods }\r\n    function createCaption: TJSHTMLElement;\r\n    function createTFoot: TJSHTMLTableSectionElement;\r\n    function createTHead: TJSHTMLTableSectionElement;\r\n    procedure deleteCaption;\r\n    procedure deleteRow(index: Integer);\r\n    procedure deleteTFoot;\r\n    procedure deleteTHead;\r\n    function insertRow(index: Integer): TJSHTMLTableRowElement;\r\n  { Properties }\r\n    property align: String read FAlign write FAlign;\r\n    property bgColor: String read FBGColor write FBGColor;\r\n    property border: String read FBorder write FBorder;\r\n    property caption: TJSHTMLElement read FCaption;\r\n    property cellPadding: String read FCellPadding write FCellPadding;\r\n    property cellSpacing: String read FCellSpacing write FCellSpacing;\r\n    property frame: String read FFrame write FFrame;\r\n    property rows: TJSHTMLCollection read FRows;\r\n    property rules: String read FRules write FRules;\r\n    property summary: String read FSummary write FSummary;\r\n    property tBodies: TJSHTMLCollection read FTBodies;\r\n    property tfoot: TJSHTMLTableSectionElement read FTfoot;\r\n    property tHead: TJSHTMLTableSectionElement read FTHead;\r\n    property width: String read FWidth write FWidth;\r\n  end;\r\n\r\n{ TJSHTMLTableSectionElement }\r\n\r\n  TJSHTMLTableSectionElement = Class external name 'HTMLTableSectionElement' (TJSHTMLElement)\r\n  private\r\n    Falign: String; external name 'align';\r\n    Frows: TJSHTMLCollection external name 'rows';\r\n    Fch: String; external name 'ch';\r\n    FchOff: String; external name 'chOff';\r\n    FvAlign: String; external name 'vAlign';\r\n  public\r\n  { Methods }\r\n    procedure deleteRow(index: Integer);\r\n    function insertRow(index: Integer): TJSHTMLTableRowElement;\r\n  { Properties }\r\n    property align: String read Falign write Falign;\r\n    property rows: TJSHTMLCollection read Frows;\r\n    property ch: String read Fch write Fch;\r\n    property chOff: String read FchOff write FchOff;\r\n    property vAlign: String read FvAlign write FvAlign;\r\n  end;\r\n\r\n\r\n{ TJSHTMLTableCellElement }\r\n\r\n  TJSHTMLTableCellElement = Class external name 'HTMLTableCellElement' (TJSHTMLElement)\r\n  private\r\n    Fabbr: String; external name 'abbr';\r\n    Falign: String; external name 'align';\r\n    Faxis: String; external name 'axis';\r\n    FbgColor: String; external name 'bgColor';\r\n    FcellIndex: Integer; external name 'cellIndex';\r\n    Fch: String; external name 'ch';\r\n    FchOff: String; external name 'chOff';\r\n    FcolSpan: Integer; external name 'colSpan';\r\n    Fheaders: String; external name 'headers';\r\n    Fheight: String; external name 'height';\r\n    FnoWrap: Boolean; external name 'noWrap';\r\n    FrowSpan: Integer; external name 'rowSpan';\r\n    Fscope: String; external name 'scope';\r\n    FvAlign: String; external name 'vAlign';\r\n    Fwidth: String; external name 'width';\r\n  public\r\n  { Properties }\r\n    property abbr: String read Fabbr write Fabbr;\r\n    property align: String read Falign write Falign;\r\n    property axis: String read Faxis write Faxis;\r\n    property bgColor: String read FbgColor write FbgColor;\r\n    property cellIndex: Integer read FcellIndex;\r\n    property ch: String read Fch write Fch;\r\n    property chOff: String read FchOff write FchOff;\r\n    property colSpan: Integer read FcolSpan write FcolSpan;\r\n    property headers: String read Fheaders write Fheaders;\r\n    property height: String read Fheight write Fheight;\r\n    property noWrap: Boolean read FnoWrap write FnoWrap;\r\n    property rowSpan: Integer read FrowSpan write FrowSpan;\r\n    property scope: String read Fscope write Fscope;\r\n    property vAlign: String read FvAlign write FvAlign;\r\n    property width: String read Fwidth write Fwidth;\r\n  end;\r\n\r\n{ TJSHTMLTableRowElement }\r\n\r\n  TJSHTMLTableRowElement = Class external name 'HTMLTableRowElement' (TJSHTMLElement)\r\n  private\r\n    Falign: String; external name 'align';\r\n    FbgColor: String; external name 'bgColor';\r\n    Fcells: TJSHTMLCollection; external name 'cells';\r\n    Fch: String; external name 'ch';\r\n    FchOff: String; external name 'chOff';\r\n    FrowIndex: Integer; external name 'rowIndex';\r\n    FsectionRowIndex: Integer; external name 'sectionRowIndex';\r\n    FvAlign: String; external name 'vAlign';\r\n  public\r\n  { Methods }\r\n    procedure deleteCell(index: Integer);\r\n    function insertCell(index: Integer): TJSHTMLTableCellElement;\r\n  { Properties }\r\n    property align: String read Falign write Falign;\r\n    property bgColor: String read FbgColor write FbgColor;\r\n    property cells: TJSHTMLCollection read Fcells;\r\n    property ch: String read Fch write Fch;\r\n    property chOff: String read FchOff write FchOff;\r\n    property rowIndex: Integer read FrowIndex;\r\n    property sectionRowIndex: Integer read FsectionRowIndex;\r\n    property vAlign: String read FvAlign write FvAlign;\r\n  end;\r\n\r\n  { TJSHTMLTableDataCellElement }\r\n\r\n    TJSHTMLTableDataCellElement = Class external name 'HTMLTableDataCellElement' (TJSHTMLElement)\r\n    private\r\n      Fabbr: String; external name 'abbr';\r\n    public\r\n    { Properties }\r\n      property abbr: String read Fabbr write Fabbr;\r\n    end;\r\n\r\n//------------------------------------------------------------------------------\r\n  TJSCanvasRenderingContext2D = Class;\r\n\r\n  THTMLCanvasToBlobCallback = Reference to function (aBlob : TJSBlob) : boolean;\r\n\r\n  TJSHTMLCanvasElement = Class external name 'HTMLCanvasElement' (TJSHTMLElement)\r\n  Public\r\n    height : integer;\r\n    width : integer;\r\n    Function getContext(contextType : string) : TJSObject;\r\n    Function getContext(contextType : string; contextAttributes : TJSObject) : TJSObject;\r\n    Function getContextAs2DContext(contextType : string; contextAttributes : TJSObject) : TJSCanvasRenderingContext2D; external name 'getContext';\r\n    Function getContextAs2DContext(contextType : string) : TJSCanvasRenderingContext2D; external name 'getContext';\r\n    Procedure toBlob (aCallBack : THTMLCanvasToBlobCallback; aMimeType : String); overload;\r\n    Procedure toBlob (aCallBack : THTMLCanvasToBlobCallback; aMimeType : String; aQuality : Double); overload;\r\n    Function toDataURL : String; overload;\r\n    Function toDataURL(aMimeType : String) : String; overload;\r\n    Function toDataURL(aMimeType : String; aQuality : Double) : String; overload;\r\n  end;\r\n\r\n  // Opaque objects\r\n  TJSCanvasGradient = class external name 'CanvasGradient'\r\n  end;\r\n\r\n  TJSCanvasPattern = class external name 'CanvasPattern'\r\n  end;\r\n\r\n  TJSPath2D = class external name 'Path2D'\r\n  end;\r\n\r\n  { TJSImageData }\r\n\r\n  TJSImageData = class external name 'ImageData'\r\n  private\r\n    FData: TJSUint8ClampedArray; external name 'data';\r\n    FHeight: Integer; external name 'height';\r\n    FWidth: Integer; external name 'width';\r\n  Public\r\n    constructor new(awidth,aheight : integer); overload;\r\n    constructor new(anArray :TJSUint8ClampedArray; awidth,aheight : integer); overload;\r\n    property data : TJSUint8ClampedArray read FData;\r\n    property height : Integer Read FHeight;\r\n    property width : Integer Read FWidth;\r\n  end;\r\n\r\n  TCanvasCoordType = double; // Is in fact a number.\r\n\r\n  TJSTextMetrics = record\r\n    width : TCanvasCoordType;\r\n    actualBoundingBoxLeft : TCanvasCoordType;\r\n    actualBoundingBoxRight : TCanvasCoordType;\r\n    fontBoundingBoxAscent : TCanvasCoordType;\r\n    fontBoundingBoxDescent : TCanvasCoordType;\r\n    actualBoundingBoxAscent : TCanvasCoordType;\r\n    actualBoundingBoxDescent : TCanvasCoordType;\r\n    emHeightAscent : TCanvasCoordType;\r\n    emHeightDescent : TCanvasCoordType;\r\n    hangingBaseline : TCanvasCoordType;\r\n    alphabeticBaseline : TCanvasCoordType;\r\n    ideographicBaseline : TCanvasCoordType;\r\n  end;\r\n\r\n  { TJSCanvasRenderingContext2D }\r\n  TJSCanvasRenderingContext2D = class external name 'CanvasRenderingContext2D'\r\n  private\r\n    FCanvas: TJSHTMLCanvasElement; external name 'canvas';\r\n    FfillStyleColor: String; external name 'fillStyle';\r\n    FfillStyleGradient: TJSCanvasGradient; external name 'fillStyle';\r\n    FfillStylePattern: TJSCanvasPattern; external name 'fillStyle';\r\n    FstrokeStyleColor: String; external name 'strokeStyle';\r\n    FstrokeStyleGradient: TJSCanvasGradient; external name 'strokeStyle';\r\n    FstrokeStylePattern: TJSCanvasPattern; external name 'strokeStyle';\r\n  Public\r\n    fillStyle : JSValue;\r\n    font : string;\r\n    globalAlpha : double;\r\n    globalCompositeOperation : String;\r\n    lineCap : string;\r\n    lineDashOffset : Double;\r\n    lineJoin : String;\r\n    lineWidth : Double;\r\n    miterLimit : Double;\r\n    shadowBlur : Double;\r\n    shadowColor : String;\r\n    shadowOffsetX : Double;\r\n    shadowOffsetY : Double;\r\n    strokeStyle : JSValue;\r\n    textAlign : String;\r\n    textBaseline : String;\r\n    procedure arc(x,y, radius,startAngle,endAngle : TCanvasCoordType); overload;\r\n    procedure arc(x,y, radius,startAngle,endAngle : TCanvasCoordType; antiClockWise : boolean); overload;\r\n    procedure arcTo(x1,y1,x2,y2,radius : TCanvasCoordType); overload;\r\n    procedure beginPath;\r\n    procedure bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y : TCanvasCoordType); overload;\r\n    procedure clearRect(x,y,width,height : TCanvasCoordType);\r\n    procedure clip; overload;\r\n    procedure clip(aFillRule : String); overload;\r\n    procedure clip(aPath : TJSPath2D); overload;\r\n    procedure closePath;\r\n    function createImageData(aWidth,aHeight : Integer) : TJSImageData; overload;\r\n    function createImageData(aImage : TJSImageData) : TJSImageData; overload;\r\n    function createLinearGradient(x0,y0,x1,y1 : TCanvasCoordType) : TJSCanvasGradient;\r\n    function createPattern(aImage : TJSObject; repetition : string) : TJSCanvasPattern;\r\n    function createRadialGradient(x0,y0,r0,x1,y1,r1 : TCanvasCoordType) : TJSCanvasGradient;\r\n    procedure drawFocusIfNeeded(aElement : TJSElement); overload;\r\n    procedure drawFocusIfNeeded(aPath : TJSPath2D; aElement : TJSElement); overload;\r\n    procedure drawImage(image : TJSObject; dx,dy : TCanvasCoordType); overload;\r\n    procedure drawImage(image : TJSObject; dx,dy,dwidth,dheight : TCanvasCoordType); overload;\r\n    procedure drawImage(image : TJSObject; sx,sy,sWidth,sHeight,dx,dy,dwidth,dheight : TCanvasCoordType); overload;\r\n    procedure fill; overload;\r\n    procedure fill(aRule : String); overload;\r\n    procedure fill(aPath : TJSPath2D); overload;\r\n    procedure fill(aPath : TJSPath2D;aRule : String); overload;\r\n    procedure fillRect(x,y,awidth,aheight: TCanvasCoordType); overload;\r\n    procedure fillText(aText : string; x,y : TCanvasCoordType); overload;\r\n    procedure fillText(aText : string; x,y, aMaxWidth : TCanvasCoordType); overload;\r\n    function getImageData(x,y,awidth,aheight: TCanvasCoordType) : TJSImageData; overload;\r\n    function getLineDash : TJSArray;\r\n    function isPointInPath(x,y : TCanvasCoordType) : Boolean; overload;\r\n    function isPointInPath(x,y : TCanvasCoordType; aFillRule : String) : Boolean; overload;\r\n    function isPointInPath(aPath : TJSPath2D; x,y : TCanvasCoordType) : Boolean; overload;\r\n    function isPointInPath(aPath : TJSPath2D; x,y : TCanvasCoordType; aFillRule : String) : Boolean; overload;\r\n    function isPointInStroke(x,y : TCanvasCoordType) : Boolean; overload;\r\n    function isPointInStroke(aPath : TJSPath2D; x,y : TCanvasCoordType) : Boolean; overload;\r\n    procedure lineTo(x,y : TCanvasCoordType);\r\n    function measureText(S : String) : TJSTextMetrics;\r\n    procedure moveTo(x,y : TCanvasCoordType);\r\n    procedure putImageData(aData : TJSImageData; x,y: TCanvasCoordType) ; overload;\r\n    procedure putImageData(aData : TJSImageData; x,y,dityX,dirtyY,dirtyWidth,dirtyHeight: TCanvasCoordType) ; overload;\r\n    procedure quadraticCurveTo(cpx,cpy,x,y : TCanvasCoordType);\r\n    procedure rect(x,y,awidth,aheight: TCanvasCoordType); overload;\r\n    procedure restore;\r\n    procedure rotate(anAngle : double);\r\n    procedure save;\r\n    procedure scale(x,y : double);\r\n    procedure setLineDash(segments : TJSArray); overload;\r\n    procedure setLineDash(segments : array of integer); overload;\r\n    procedure setTransform(a,b,c,d,e,f : double);\r\n    procedure stroke; overload;\r\n    procedure stroke(aPath : TJSPath2D); overload;\r\n    procedure strokeRect(x,y,awidth,aheight: TCanvasCoordType);\r\n    procedure strokeText(aText : string; x,y : TCanvasCoordType); overload;\r\n    procedure strokeText(aText : string; x,y, aMaxWidth : TCanvasCoordType); overload;\r\n    procedure transform(a,b,c,d,e,f : double);\r\n    procedure translate(x,y : TCanvasCoordType);\r\n\r\n    property canvas : TJSHTMLCanvasElement Read FCanvas;\r\n    property fillStyleAsColor : String Read FfillStyleColor Write FfillStyleColor;\r\n    property fillStyleAsGradient : TJSCanvasGradient Read FfillStyleGradient Write FfillStyleGradient;\r\n    property fillStyleAsPattern : TJSCanvasPattern Read FfillStylePattern Write FfillStylePattern;\r\n    property strokeStyleAsColor : String Read FstrokeStyleColor Write FstrokeStyleColor;\r\n    property strokeStyleAsGradient : TJSCanvasGradient Read FstrokeStyleGradient Write FstrokeStyleGradient;\r\n    property strokeStyleAsPattern : TJSCanvasPattern Read FstrokeStylePattern Write FstrokeStylePattern;\r\n  end;\r\n\r\n  { TJSHTMLIFrameElement }\r\n\r\n  TJSHTMLIFrameElement = Class external name 'HTMLIFrameElement' (TJSHTMLElement)\r\n  private\r\n    FAllowPaymentRequest: Boolean; external name 'allowPaymentRequest';\r\n    FContentDocument: TJSDocument; external name 'contentDocument';\r\n    FContentWindow: TJSWindow; external name 'contentWindow';\r\n    FSandbox: string; external name 'sandbox';\r\n  Public\r\n    height : string;\r\n    src : string;\r\n    srcdoc : string;\r\n    width : string;\r\n    Property allowPaymentRequest : Boolean Read FAllowPaymentRequest;\r\n    property contentWindow : TJSWindow Read FContentWindow;\r\n    property contentDocument : TJSDocument Read FContentDocument;\r\n    property sandbox : string read FSandbox;\r\n  end;\r\n\r\n  TJSXMLHttpRequestEventTarget = class external name 'XMLHttpRequestEventTarget' (TJSEventTarget)\r\n  end;\r\n\r\n  TJSXMLHttpRequestUpload = class external name 'XMLHttpRequestUpload' (TJSXMLHttpRequestEventTarget)\r\n  end;\r\n\r\n  { TJSXMLHttpRequest }\r\n  TJSOnReadyStateChangeHandler = reference to procedure;\r\n\r\n  TJSXMLHttpRequest = class external name 'XMLHttpRequest' (TJSXMLHttpRequestEventTarget)\r\n  private\r\n    FReadyState: NativeInt; external name 'readyState';\r\n    FResponse: JSValue; external name 'response';\r\n    FResponseText: string; external name 'responseText';\r\n    FResponseType: string; external name 'responseType';\r\n    FresponseURL: string; external name 'responseURL';\r\n    FresponseXML: TJSDocument; external name 'responseXML';\r\n    FUpload: TJSXMLHttpRequestUpload; external name 'upload';\r\n    FStatus : integer; external name 'status';\r\n    FStatusText : string; external name 'statusText';\r\n  public\r\n    const\r\n      UNSENT           = 0;\r\n      OPENED           = 1;\r\n      HEADERS_RECEIVED = 3;\r\n      LOADING          = 3;\r\n      DONE             = 4;\r\n  public\r\n    timeout : LongWord;\r\n    withCredentials : Boolean;\r\n    onreadystatechange : TJSOnReadyStateChangeHandler;\r\n    constructor new;\r\n    procedure abort;\r\n    function getResponseHeader(aName : string) : String;\r\n    function getAllResponseHeaders : String;\r\n    procedure open(aMethod,aURL : String); overload;\r\n    procedure open(aMethod,aURL : String; Async : Boolean); overload;\r\n    procedure open(aMethod,aURL : String; Async : Boolean; AUserame : String); overload;\r\n    procedure open(aMethod,aURL : String; Async : Boolean; AUserame,APassword : String); overload;\r\n    procedure overrideMimeType(aType : String);\r\n    procedure send(aBody : jsValue);overload;\r\n    procedure send;overload;\r\n    procedure setRequestHeader(aName, AValue : string);\r\n\r\n    property readyState : NativeInt read FReadyState;\r\n    property ResponseHeaders[aName : string] : string Read getResponseHeader;\r\n    property responseXML : TJSDocument read FresponseXML;\r\n    property responseURL : string read FresponseURL;\r\n    property responseType : string read FResponseType;\r\n    property response : JSValue Read FResponse;\r\n    property responseText : string read FResponseText;\r\n    property Status : integer read FStatus;\r\n    property StatusText : string read FStatusText;\r\n    property upload : TJSXMLHttpRequestUpload read FUpload;\r\n\r\n  end;\r\n\r\n  { TJSUIEvent }\r\n\r\n  TJSUIEvent = class external name 'UIEvent' (TJSEvent)\r\n  private\r\n    FDetail: NativeInt; external name 'detail';\r\n    FView: TJSWindow; external name 'view';\r\n  Public\r\n    property detail : NativeInt read FDetail;\r\n    property view : TJSWindow read FView;\r\n  end;\r\n\r\n  { TJSMouseEvent }\r\n\r\n  TJSMouseEvent = class external name 'MouseEvent' (TJSUIevent)\r\n  private\r\n    FAltKey: Boolean; external name 'altKey';\r\n    FBUtton: NativeInt; external name 'button';\r\n    FBUttons: NativeInt; external name 'buttons';\r\n    FClientX: Double; external name 'clientX';\r\n    FClientY: Double; external name 'clientY';\r\n    FCtrlKey: Boolean; external name 'ctrlKey';\r\n    FMetaKey: Boolean; external name 'metaKey';\r\n    FmovementX: Double; external name 'movementX';\r\n    FmovementY: Double; external name 'movementY';\r\n    FoffsetX: Double; external name 'offsetX';\r\n    FoffsetY: Double; external name 'offsetY';\r\n    FRegion: String; external name 'region';\r\n    FRelatedTarget: TJSEventTarget; external name 'relatedTarget';\r\n    FscreenX: Double; external name 'screenX';\r\n    FscreenY: Double; external name 'screenY';\r\n    FShiftKey: Boolean; external name 'shiftKey';\r\n  Public\r\n    Property altKey : Boolean read FAltKey;\r\n    Property button: NativeInt read FBUtton;\r\n    Property buttons: NativeInt read FBUttons;\r\n    property clientX : Double read FClientX;\r\n    property clientY : Double read FClientY;\r\n    property ctrlKey : Boolean read FCtrlKey;\r\n    property metaKey : Boolean read FMetaKey;\r\n    property movementX : Double read FmovementX;\r\n    property movementY : Double read FmovementY;\r\n    property offsetX : Double read FoffsetX;\r\n    property offsetY : Double read FoffsetY;\r\n{$IFDEF FIREFOX}\r\n    property pageX : Double read FpageX;\r\n    property pageY : Double read FpageY;\r\n{$ENDIF}\r\n    property region : String read FRegion;\r\n    property relatedTarget : TJSEventTarget read FRelatedTarget;\r\n    property screenX : Double read FscreenX;\r\n    property screenY : Double read FscreenY;\r\n    property shiftKey : Boolean read FShiftKey;\r\n    property x : Double read FClientX;\r\n    property y : Double read FClientY;\r\n  end;\r\n\r\n  { TJSWheelEvent }\r\n  TJSWheelEventInit = record\r\n    deltaX : Double;\r\n    deltaY : Double;\r\n    deltaZ : Double;\r\n    deltaMode : NativeInt;\r\n  end;\r\n\r\n  TJSWheelEvent = class external name 'WheelEvent' (TJSMouseEvent)\r\n  private\r\n    FDeltaMode: NativeInt; external name 'deltaMode';\r\n    FDeltaX: Double; external name 'deltaX';\r\n    FDeltaY: Double; external name 'deltaY';\r\n    FDeltaZ: Double; external name 'deltaZ';\r\n  Public\r\n    constructor new(atype : String); overload;\r\n    constructor new(atype : String; aInit : TJSWheelEventInit); overload;\r\n    Property deltaX : Double Read FDeltaX;\r\n    Property deltaY : Double Read FDeltaY;\r\n    Property deltaZ : Double Read FDeltaZ;\r\n    Property deltaMode : NativeInt Read FDeltaMode;\r\n  end;\r\n\r\n  TJSPointerEvent = Class external name 'PointerEvent' (TJSMouseEvent);\r\n\r\n  TJSTouchEvent = Class external name 'TouchEvent'(TJSUIEvent)\r\n  private\r\n    FAltKey: Boolean; external name 'altKey';\r\n    FChangedTouches: TJSTouchList; external name 'changedTouches';\r\n    FCtrlKey: Boolean; external name 'ctrlKey';\r\n    FMetaKey: Boolean; external name 'metaKey';\r\n    FShiftKey: Boolean; external name 'shiftKey';\r\n    FTargetTouches: TJSTouchList; external name 'targetTouches';\r\n    FTouches: TJSTouchList; external name 'touches';\r\n  Public\r\n    Property altKey : Boolean Read FAltKey;\r\n    Property ctrlKey : Boolean Read FCtrlKey;\r\n    Property metaKey : Boolean Read FMetaKey;\r\n    Property shiftKey : Boolean Read FShiftKey;\r\n    property changedTouches : TJSTouchList Read FChangedTouches;\r\n    property touches : TJSTouchList Read FTouches;\r\n    property targetTouches : TJSTouchList Read FTargetTouches;\r\n  end;\r\n\r\n\r\n  // Namespace for standard key names.\r\n  // See list at https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\r\n  TJSKeyNames = Class\r\n  Const\r\n    Alt = 'Alt';\r\n    AltGraph = 'AltGraph';\r\n    CapsLock = 'CapsLock';\r\n    Control = 'Control';\r\n    Fn = 'Fn';\r\n    FnLock = 'FnLock';\r\n    Hyper = 'Hyper';\r\n    Meta = 'Meta';\r\n    NumLock = 'NumLock';\r\n    ScrollLock = 'ScrollLock';\r\n    Shift = 'Shift';\r\n    Super = 'Super';\r\n    Symbol = 'Symbol';\r\n    SymbolLock = 'SymbolLock';\r\n    Enter = 'Enter';\r\n    Tab = 'Tab';\r\n    Space = ' ';\r\n    ArrowDown = 'ArrowDown';\r\n    ArrowLeft = 'ArrowLeft';\r\n    ArrowRight = 'ArrowRight';\r\n    ArrowUp = 'ArrowUp';\r\n    _End = 'End';\r\n    Home = 'Home';\r\n    PageDown = 'PageDown';\r\n    PageUp = 'PageUp';\r\n    BackSpace = 'Backspace';\r\n    Clear = 'Clear';\r\n    Copy = 'Copy';\r\n    CrSel = 'CrSel';\r\n    Cut = 'Cut';\r\n    Delete = 'Delete';\r\n    EraseEof = 'EraseEof';\r\n    ExSel = 'ExSel';\r\n    Insert = 'Insert';\r\n    Paste = 'Paste';\r\n    Redo = 'Redo';\r\n    Undo = 'Undo';\r\n    Accept = 'Accept';\r\n    Again = 'Again';\r\n    Attn = 'Attn';\r\n    Cancel = 'Cancel';\r\n    ContextMenu = 'Contextmenu';\r\n    Escape = 'Escape';\r\n    Execute = 'Execute';\r\n    Find = 'Find';\r\n    Finish = 'Finish';\r\n    Help = 'Help';\r\n    Pause = 'Pause';\r\n    Play = 'Play';\r\n    Props = 'Props';\r\n    Select = 'Select';\r\n    ZoomIn = 'ZoomIn';\r\n    ZoomOut = 'ZoomOut';\r\n    BrightnessDown = 'BrightnessDown';\r\n    BrightnessUp = 'BrightnessUp';\r\n    Eject = 'Eject';\r\n    LogOff = 'LogOff';\r\n    Power = 'Power';\r\n    PowerOff = 'PowerOff';\r\n    PrintScreen = 'PrintScreen';\r\n    Hibernate = 'Hibernate';\r\n    Standby = 'Standby';\r\n    WakeUp = 'WakeUp';\r\n    AllCandidates = 'AllCandidates';\r\n    Alphanumeric =  'Alphanumeric';\r\n    CodeInput = 'CodeInput';\r\n    Compose = 'Compose';\r\n    Convert = 'Convert';\r\n    Dead = 'Dead';\r\n    FinalMode = 'FinalMode';\r\n    GroupFirst = 'GroupFirst';\r\n    GroupLast = 'GroupLast';\r\n    GroupNext = 'GroupNext';\r\n    GroupPrevious = 'GroupPrevious';\r\n    ModelChange = 'ModelChange';\r\n    NextCandidate = 'NextCandidate';\r\n    NonConvert = 'NonConvert';\r\n    PreviousCandidate = 'PreviousCandidate';\r\n    Process = 'Process';\r\n    SingleCandidate = 'SingleCandidate';\r\n    HangulMode = 'HangulMode';\r\n    HanjaMode = 'HanjaMode';\r\n    JunjaMode = 'JunjaMode';\r\n    Eisu = 'Eisu';\r\n    Hankaku = 'Hankaku';\r\n    Hiranga = 'Hiranga';\r\n    HirangaKatakana = 'HirangaKatakana';\r\n    KanaMode = 'KanaMode';\r\n    Katakana = 'Katakana';\r\n    Romaji = 'Romaji';\r\n    Zenkaku = 'Zenkaku';\r\n    ZenkakuHanaku = 'ZenkakuHanaku';\r\n    F1 = 'F1';\r\n    F2 = 'F2';\r\n    F3 = 'F3';\r\n    F4 = 'F4';\r\n    F5 = 'F5';\r\n    F6 = 'F6';\r\n    F7 = 'F7';\r\n    F8 = 'F8';\r\n    F9 = 'F9';\r\n    F10 = 'F10';\r\n    F11 = 'F11';\r\n    F12 = 'F12';\r\n    F13 = 'F13';\r\n    F14 = 'F14';\r\n    F15 = 'F15';\r\n    F16 = 'F16';\r\n    F17 = 'F17';\r\n    F18 = 'F18';\r\n    F19 = 'F19';\r\n    F20 = 'F20';\r\n    Soft1 = 'Soft1';\r\n    Soft2 = 'Soft2';\r\n    Soft3 = 'Soft3';\r\n    Soft4 = 'Soft4';\r\n    Decimal = 'Decimal';\r\n    Key11 = 'Key11';\r\n    Key12 = 'Key12';\r\n    Multiply = 'Multiply';\r\n    Add = 'Add';\r\n    NumClear = 'Clear';\r\n    Divide = 'Divide';\r\n    Subtract = 'Subtract';\r\n    Separator = 'Separator';\r\n    AppSwitch = 'AppSwitch';\r\n    Call = 'Call';\r\n    Camera = 'Camera';\r\n    CameraFocus = 'CameraFocus';\r\n    EndCall = 'EndCall';\r\n    GoBack = 'GoBack';\r\n    GoHome = 'GoHome';\r\n    HeadsetHook = 'HeadsetHook';\r\n    LastNumberRedial = 'LastNumberRedial';\r\n    Notification = 'Notification';\r\n    MannerMode = 'MannerMode';\r\n    VoiceDial = 'VoiceDial';\r\n    // TODO : Multimedia keys\r\n    // TODO : Audio control keys\r\n    // TODO : TV control keys\r\n    // TODO : Media controller keys\r\n    // TODO : Speech recognition keys\r\n    // TODO : Document keys\r\n    // TODO : Application selector keys\r\n    // TODO : Browser Control keys\r\n  end;\r\n\r\n\r\n  { TJSKeyboardEvent }\r\n\r\n  TJSKeyboardEvent = class external name 'KeyboardEvent' (TJSUIEvent)\r\n  private\r\n    FAltKey: Boolean; external name 'altKey';\r\n    FCode: string; external name 'code';\r\n    FCtrlKey: Boolean; external name 'ctrlKey';\r\n    FIsComposing: Boolean;  external name 'isComposing';\r\n    FKey: String; external name 'key';\r\n    FLocale: string; external name 'locale';\r\n    FLocation: NativeInt; external name 'location';\r\n    FMetaKey: Boolean; external name 'metaKey';\r\n    FRepeat: Boolean; external name 'repeat';\r\n    FShiftKey: Boolean; external name 'shiftKey';\r\n  Public\r\n    function getModifierState(aKey : string) : Boolean;\r\n    property code : string read FCode;\r\n    Property altKey : Boolean read FAltKey;\r\n    property ctrlKey : Boolean read FCtrlKey;\r\n    property isComposing : Boolean read FIsComposing;\r\n    property Key : String read FKey;\r\n    property locale : string read FLocale;\r\n    property location : NativeInt read FLocation;\r\n    property metaKey : Boolean read FMetaKey;\r\n    property _repeat : Boolean read FRepeat;\r\n    property shiftKey : Boolean read FShiftKey;\r\n  end;\r\n\r\n\r\nvar\r\n  document : TJSDocument; external name 'document';\r\n  window : TJSWindow; external name 'window';\r\n  console : TJSConsole; external name 'window.console';\r\n  \r\nimplementation\r\n    \r\nend.\r\n","unit uPromises;\r\n\r\n{$MODE objfpc}\r\n{$MODESWITCH externalclass}\r\n\r\ninterface\r\n\r\n  uses JS, Web;\r\n\r\ntype\r\n  TJSValueDynArray = array of JSValue;\r\n  JDeferred = class;\r\n  TJPromiseCallback = procedure(Value: JSValue);\r\n  TJDeferredObject_fn = function(d: TJPromiseCallback): JSValue;\r\n  TJDeferredObject = procedure(resolve: TJPromiseCallback; reject: TJPromiseCallback);\r\n  TJPromiseCallback_func = function(Value: JSValue): JSValue;\r\n  TJPromiseCallback_fn = function(Value: JSValue): JSValue of object;\r\n  TJDeferredEventHandler = function(event: JSValue): JSValue;\r\n\r\n  JPromise = class external name 'Promise'\r\n    constructor new(fn: TJDeferredObject_fn { = nil}); overload;\r\n    constructor new(resolve: TJDeferredObject_fn; reject: TJDeferredObject_fn); overload;\r\n    constructor new(fn: TJDeferredObject); overload;\r\n    function always(alwaysCallbacks: TJSValueDynArray): JPromise;\r\n    function done(doneCallbacks: TJSValueDynArray): JPromise; overload;\r\n    function done(doneCallbacks: JSValue): JPromise; overload;\r\n    function fail(failCallbacks: TJSValueDynArray): JPromise;\r\n    function progress(progressCallbacks: TJSValueDynArray): JPromise;\r\n    function state(): string;\r\n    function &then(doneCallbacks: JSValue; failCallbacks: JSValue{ = undefined};\r\n      progressCallbacks: JSValue { = undefined}): JPromise; external name 'then';\r\n    function &then(onFulfilled: TJPromiseCallback_fn = nil): JPromise; overload;\r\n      external name 'then';\r\n    function &then(onFulfilled: TJPromiseCallback_func = nil): JPromise; overload;\r\n      external name 'then';\r\n    function &then(onFulfilled: TJPromiseCallback_fn; onRejected:\r\n      TJPromiseCallback_fn): JPromise; overload; external name 'then';\r\n    function &then(onFulfilled: TJPromiseCallback; onRejected:\r\n      TJPromiseCallback): JPromise; overload; external name 'then';\r\n    function catch(rejecTJPromiseCallback: JSValue = nil): JPromise; overload;\r\n    function catch(rejecTJPromiseCallback: TJPromiseCallback_fn): JPromise; overload;\r\n    class function promise(target: JSValue): JPromise;\r\n  end;\r\n\r\ntype\r\n  JDeferred = class external name 'Promise'(JPromise)\r\n    function notify(args: TJSValueDynArray): JDeferred;\r\n    function notifyWith(context: JSValue; args: TJSValueDynArray): JDeferred;\r\n    function reject(args: TJSValueDynArray): JDeferred; overload;\r\n    function reject(args: JSValue): JDeferred; overload;\r\n    function reject(args: TJDeferredEventHandler): JDeferred; overload;\r\n    function rejectWith(context: JSValue; args: TJSValueDynArray): JDeferred;\r\n    function resolve(args: TJSValueDynArray): JDeferred; overload;\r\n    function resolve(value: JSValue = nil): JPromise; overload;\r\n    function resolveWith(context: JSValue; args: TJSValueDynArray): JDeferred;\r\n    function all(iterable: TJSValueDynArray): JPromise; overload;\r\n    function all(iterable: TJSArray): JPromise; overload;\r\n    function race(iterable: TJSValueDynArray): JPromise;\r\n  end;\r\n\r\n  { global external functions }\r\nvar Promise: JDeferred; external name 'Promise';// property;\r\nfunction Error(message: JSValue): JSValue; external name 'Error';\r\n\r\nfunction delay(ms: integer): JPromise;\r\n\r\nimplementation\r\n\r\nfunction delay(ms: integer): JPromise;\r\n  Function setTimeout(ahandler : TJPromiseCallback; aTimeout : Integer): Integer; varargs;  external name 'window.setTimeout';\r\n  procedure p(resolve, reject: TJPromiseCallback);\r\n  begin\r\n    setTimeout(resolve, ms);\r\n  end;\r\nbegin\r\n  result := JPromise.new(@p);\r\nend;\r\n\r\n\r\nend.\r\n\r\n","unit uAccount;\r\n\r\n{$mode objfpc}{$H+}\r\n\r\ninterface\r\n\r\nuses\r\n  Classes, SysUtils, Types, Web;\r\n\r\ntype\r\n  float = Double;\r\n  TAccountState = class;\r\n\r\n  EWithdrawError = class(Exception)\r\n   private\r\n      Fcurrent_balance: float;\r\n    protected\r\n      function _get_current_balance : float; virtual;\r\n    public\r\n      constructor Create(const current_balance: float);\r\n    published\r\n      property Saldo: float read _get_current_balance;\r\n  end;\r\n\r\n  TAccount = class\r\n    private\r\n      _State : TAccountState;\r\n      _AccountNumber : Integer;\r\n      _ClientName : String;\r\n\r\n      procedure CheckStatus;\r\n\r\n    public\r\n\r\n      Constructor Create(aClientName: String);\r\n      Destructor Destroy;override;\r\n\r\n      { Default Transactions }\r\n      procedure Deposit (amount : Float);\r\n      procedure Withdrawal(amount : Float);\r\n      procedure TransferFunds(FromAccount: TAccount; ToAccount: TAccount; amount: Float);\r\n      procedure ApplyReturnRate;\r\n      procedure setBalance(initialValue: Float);\r\n      function getBalance : Float;\r\n      function getAccountNumber : Integer;\r\n      function getAccountState : TAccountState;\r\n  end;\r\n\r\n  TAccountState = class\r\n    protected\r\n      _balanceAmount : Float;\r\n      _returnRate : Float;\r\n      _LimInf, _LimSup : Float;\r\n      _Account : TAccount;\r\n\r\n      Constructor Create(aAccount : TAccount);virtual;\r\n      procedure CopyFrom(aAccountOrg : TAccountState);virtual;\r\n\r\n    public\r\n      Destructor Destroy;override;\r\n\r\n      procedure Deposit (amount : Float);virtual;abstract;\r\n      procedure Withdrawal(amount : Float);virtual;abstract;\r\n(*\r\nMr. John Customer has both a savings account and a checking account at the bank. He makes a trip to\r\nhis local ATM, and decides to transfer $100 from his savings account to this checking account.\r\n1. a withdrawal from the savings account\r\n2. the deposit into the checking account.\r\n*)\r\n      procedure ApplyReturnRate;virtual;abstract;\r\n  end;\r\n\r\n  TDefaultProfitAcc = class(TAccountState)\r\n    protected\r\n      _withdrawalFee : Float;\r\n\r\n      Constructor Create (aAccount : TAccount);override;\r\n    public\r\n      procedure Deposit(amount : Float);override;\r\n      procedure Withdrawal(amount : Float);override;\r\n      procedure ApplyReturnRate;override;\r\n  end;\r\n\r\n  TLowProfitAcc = class(TDefaultProfitAcc)\r\n    protected\r\n      _InterestFeeRate: Float;\r\n      Constructor Create (aAccount : TAccount);override;\r\n    public\r\n      procedure Deposit (amount : Float);override;\r\n      procedure Withdrawal(amount : Float);override;\r\n      procedure ApplyReturnRate;override;\r\n  end;\r\n\r\n  TGoldProfitAcc = class(TAccountState)\r\n    protected\r\n      Constructor Create (aAccount : TAccount);override;\r\n    public\r\n      procedure Deposit(amount : Float);override;\r\n      procedure Withdrawal(amount : Float);override;\r\n      procedure ApplyReturnRate;override;\r\n  end;\r\n\r\nimplementation\r\n\r\n{  C l a s s e   E W i t h d r a w E r r o r }\r\n\r\nconstructor EWithdrawError.Create(const current_balance: float);\r\nbegin\r\n  Fcurrent_balance := current_balance;\r\n console.log('current_balance: '+ FloatToStr(current_balance));\r\nend;\r\n\r\nfunction EWithdrawError._get_current_balance(): float;\r\nbegin\r\n  result := Fcurrent_balance;\r\nend;\r\n\r\n{  C l a s s e   T A c c o u n t }\r\n\r\nConstructor TAccount.Create(aClientName: String);\r\nbegin\r\n  _State := Nil;\r\n  _AccountNumber := Trunc (Now * 100.0);\r\n  _ClientName := aClientName;\r\n  CheckStatus ();\r\nend;\r\n\r\nDestructor TAccount.Destroy;\r\nbegin\r\n//  FreeAndNil (_Estado);\r\n  inherited;\r\nend;\r\n\r\nfunction TAccount.getAccountNumber : Integer;\r\nbegin\r\n  Result := _AccountNumber;\r\nend;\r\n\r\nfunction TAccount.getAccountState : TAccountState;\r\nbegin\r\n  Result := _State;\r\nend;\r\n\r\nprocedure TAccount.CheckStatus;\r\nvar aNewState : TAccountState;\r\nbegin\r\n  { This account is of the Common type by default }\r\n  if (_State = Nil) then begin\r\n    _State := TDefaultProfitAcc.Create(Self);\r\n    Exit;\r\n  end;\r\n\r\n  { Tests the status of the account state }\r\n  aNewState := Nil;\r\n  if (_State._balanceAmount < _State._LimInf) then\r\n  begin\r\n    { Downgrade from DefaultAccount to CheckingAccount }\r\n    if (_State is TDefaultProfitAcc) then begin\r\n    //  ShowMessage('C - D');\r\n      aNewState := TLowProfitAcc.Create (Self);\r\n      end;\r\n    { Downgrade from SavingsAccount to DefaultAccount }\r\n    if (_State is TGoldProfitAcc) then begin\r\n    //  ShowMessage('o - c');\r\n      aNewState := TDefaultProfitAcc.Create (Self);\r\n      end;\r\n  end;\r\n\r\n  if (_State._balanceAmount > _State._LimSup) then\r\n  begin\r\n    { Raises from DefaultAccount to SavingsAccount }\r\n    if (_State is TDefaultProfitAcc) then begin\r\n  //    ShowMessage('c -> O');\r\n      aNewState := TGoldProfitAcc.Create (Self);\r\n      end;\r\n    { Downgrade from SavingsAccount to DefaultAccount }\r\n    if (_State is TGoldProfitAcc) then begin\r\n    //  ShowMessage('O -> c');\r\n      aNewState := TDefaultProfitAcc.Create (Self);\r\n      end;\r\n    { Raises from CheckingAccount to DefaultAccount }\r\n    if (_State is TLowProfitAcc) then begin\r\n    //  ShowMessage('D -> c');\r\n      aNewState := TDefaultProfitAcc.Create (Self);\r\n      end;\r\n\r\n  end;\r\n\r\n  { Effective status change }\r\n  if (aNewState <> Nil) then\r\n  begin\r\n    { Copies relevant data from current account state }\r\n    aNewState.CopyFrom(_State);\r\n\r\n    { Releases current status }\r\n    _State.Free;\r\n\r\n    { Considers new state }\r\n    _State := aNewState;\r\n  end;\r\nend;\r\n\r\nfunction TAccount.getBalance : Float;\r\nbegin\r\n  Result := _State._balanceAmount;\r\nend;\r\n\r\nprocedure TAccount.setBalance(initialValue: Float);\r\nbegin\r\n  _State._balanceAmount := initialValue;\r\nend;\r\n\r\n\r\nprocedure TAccount.Deposit (amount : Float);\r\nbegin\r\n  _State.Deposit(amount);\r\n  CheckStatus ();\r\nend;\r\n\r\nprocedure TAccount.Withdrawal (amount : Float);\r\nbegin\r\n  _State.Withdrawal (amount);\r\n  CheckStatus ();\r\nend;\r\n\r\nprocedure TAccount.TransferFunds(FromAccount: TAccount; ToAccount: TAccount; amount: Float);\r\nbegin\r\n  FromAccount.Withdrawal(amount);\r\n  ToAccount.Deposit(amount);\r\n  CheckStatus();\r\nend;\r\n\r\nprocedure TAccount.ApplyReturnRate;\r\nbegin\r\n  _State.ApplyReturnRate ();\r\n  CheckStatus ();\r\nend;\r\n\r\n{  C l a s s e    T A c c o u n t  S t a t e  }\r\n\r\nConstructor TAccountState.Create (aAccount : TAccount);\r\nbegin\r\n  _Account := aAccount;\r\n  _balanceAmount := 0.0;\r\n  _returnRate := 0.0;\r\n  { Balance values that delimit a state account }\r\n  _LimInf := 0.0;\r\n  _LimSup := 0.0;\r\nend;\r\n\r\nDestructor TAccountState.Destroy;\r\nbegin\r\n  _Account := Nil;\r\n  inherited;\r\nend;\r\n\r\nprocedure TAccountState.CopyFrom (aAccountOrg : TAccountState);\r\nbegin\r\n(*\r\n   Copies only the information relevant to the account. The informations which are state-specific,\r\n   such as the rate of return, should remain as configured in the state itself.\r\n*)\r\n  _balanceAmount := aAccountOrg._balanceAmount;\r\n  _Account := aAccountOrg._Account;\r\nend;\r\n\r\n{\r\n  C l a s s e    T D e f a u l t   A c c o u n t   }\r\n\r\nConstructor TDefaultProfitAcc.Create (aAccount : TAccount);\r\nbegin\r\n//  inherited;\r\n\r\n  _returnRate := 1.0; { the default return rate is 1%}\r\n  _withdrawalFee := 5.00; { there is ATM fee to withdrawals }\r\n  { Balance amount values that delimit a account state }\r\n  _LimInf := 100.00;\r\n  _LimSup := 999.99;\r\nend;\r\n\r\nprocedure TDefaultProfitAcc.Deposit (amount : Float);\r\nbegin\r\n  _balanceAmount := _balanceAmount + amount;\r\nend;\r\n\r\nprocedure TDefaultProfitAcc.Withdrawal (amount : Float);\r\nvar aRealValue : Float;\r\nbegin\r\n  aRealValue := amount + _withdrawalFee;\r\n  _balanceAmount := _balanceAmount - aRealValue;\r\nend;\r\n\r\nprocedure TDefaultProfitAcc.ApplyReturnRate;\r\nbegin\r\n  _balanceAmount := _balanceAmount + (_balanceAmount * _returnRate) / 100.0;\r\nend;\r\n\r\n{  C l a s s e    T C h e c k i n g  A c c o u n t  }\r\n\r\nConstructor TLowProfitAcc.Create (aAccount : TAccount);\r\nbegin\r\n//  inherited;\r\n\r\n  _returnRate  :=  0.0; { no return rate to this kind of account }\r\n  _InterestFeeRate   := 1.00; { Interest rate on withdrawals when the account is without balance }\r\n  _withdrawalFee := 10.00; { withdrawals have charge fee }\r\n\r\n  { Balance values that delimit a state account }\r\n  _LimInf := -100.00;\r\n  _LimSup :=   99.99;\r\nend;\r\n\r\nprocedure TLowProfitAcc.Deposit (amount : Float);\r\nbegin\r\n  _balanceAmount := _balanceAmount + amount;\r\nend;\r\n\r\nprocedure TLowProfitAcc.Withdrawal(amount : Float);\r\nvar lJuros, aRealValue : Float;\r\nbegin\r\n  aRealValue := amount + _withdrawalFee;\r\n try\r\n   if (_balanceAmount - aRealValue) < _LimInf then\r\n    //raise Exception.Create('Withdrawal can not be performed! Insufficient balance on the account.');\r\n   raise EWithdrawError.Create(_balanceAmount - aRealValue);  //raise Exception.Create('Saque não pode ser efetivado. Conta sem saldo.');\r\n except\r\n    on e: EWithdrawError do\r\n      console.log('Withdrawal can not be performed! Insufficient balance on the account. The balance: '+ FloatToStr( e.Fcurrent_balance) );\r\n end;\r\n  lJuros := 0.0;\r\n  if (_balanceAmount - aRealValue) < 0.0 then\r\n    lJuros := (aRealValue - _balanceAmount) * _withdrawalFee / 100.0;\r\n\r\n  _balanceAmount := _balanceAmount - aRealValue - lJuros;\r\nend;\r\n\r\nprocedure TLowProfitAcc.ApplyReturnRate;\r\nbegin\r\n { This type of account does not give income }\r\nend;\r\n\r\n{  C l a s s e    T S a v i n g s  A c c o u n t  }\r\n\r\nConstructor TGoldProfitAcc.Create (aAccount : TAccount);\r\nbegin\r\n//  inherited;\r\n  _returnRate := 2.00; { the return rate to SavingsAccount is 2% }\r\n  { Balance values that delimit a state account }\r\n  _LimInf :=  1000.00;\r\n  _LimSup := 99999.99;\r\nend;\r\n\r\nprocedure TGoldProfitAcc.Deposit (amount : Float);\r\nbegin\r\n  _balanceAmount := _balanceAmount + amount;\r\nend;\r\n\r\nprocedure TGoldProfitAcc.Withdrawal (amount : Float);\r\nbegin\r\n  _balanceAmount := _balanceAmount - amount;\r\nend;\r\n\r\nprocedure TGoldProfitAcc.ApplyReturnRate;\r\nbegin\r\n  _balanceAmount := _balanceAmount + (_balanceAmount * _returnRate) / 100.0;\r\nend;\r\n\r\nend.\r\n","{\r\n    This file is part of the Pas2JS run time library.\r\n    Copyright (c) 2017 by Mattias Gaertner\r\n\r\n    See the file COPYING.FPC, included in this distribution,\r\n    for details about the copyright.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\n **********************************************************************}\r\nunit Math;\r\n\r\n{$mode objfpc}\r\n\r\ninterface\r\n\r\nuses\r\n  SysUtils;\r\n\r\nconst\r\n  MinInteger = -$10000000000000;\r\n  MaxInteger = $fffffffffffff;\r\n  MinDouble  =  5.0e-324;\r\n  MaxDouble  =  1.7e+308;\r\n\r\n\r\nvar\r\n  NaN: Double; external name 'NaN';\r\n  Infinity: Double; external name 'Infinity';\r\n  NegInfinity: Double; external name '-Infinity';\r\n\r\ntype\r\n  float = double;\r\n\r\n  //EInvalidArgument = class(EMathError);\r\n\r\nfunction Min(const a, b: Integer): Integer; varargs; external name 'Math.min'; overload;\r\nfunction Max(const a, b: Integer): Integer; varargs; external name 'Math.max'; overload;\r\nfunction Min(const a, b: Double): Double; varargs; external name 'Math.min'; overload;\r\nfunction Max(const a, b: Double): Double; varargs; external name 'Math.max'; overload;\r\nfunction Min(const a, b: NativeLargeInt): Double; varargs; external name 'Math.min'; overload;\r\nfunction Max(const a, b: NativeLargeUInt): Double; varargs; external name 'Math.max'; overload;\r\n\r\nfunction InRange(const AValue, AMin, AMax: Integer): Boolean; assembler; overload;\r\nfunction InRange(const AValue, AMin, AMax: Double): Boolean; assembler; overload;\r\n\r\nfunction EnsureRange(const AValue, AMin, AMax: Integer): Integer; assembler; overload;\r\nfunction EnsureRange(const AValue, AMin, AMax: Double): Double; assembler; overload;\r\n\r\ntype\r\n  TRoundToRange = -37..37;\r\n\r\nfunction RoundTo(const AValue: Double; const Digits: TRoundToRange): Double;\r\nfunction SimpleRoundTo(const AValue: Double; const Digits: TRoundToRange = -2): Double;\r\n\r\nfunction randg(mean,stddev : float) : float;\r\nfunction RandomRange(const aFrom, aTo: Integer): Integer;\r\nfunction RandomRange(const aFrom, aTo: NativeLargeInt): NativeLargeInt;\r\n\r\nconst\r\n  NegativeValue = -1;\r\n  ZeroValue = 0;\r\n  PositiveValue = 1;\r\n\r\nfunction Sign(const AValue: Integer): Integer; external name 'Math.sign'; overload;\r\nfunction Sign(const AValue: Double): Double; external name 'Math.sign'; overload;\r\n\r\nfunction IsZero(const d: Double; Epsilon: Double): Boolean; overload;\r\nfunction IsZero(const d: Double): Boolean; overload;\r\n\r\nfunction IsNaN(const v: JSValue): boolean; external name {$IFDEF ECMAScript5}'isNaN'{$ELSE}'Number.isNan'{$ENDIF}; overload;\r\nfunction IsFinite(const d: JSValue): Boolean; external name 'isFinite'; overload;// false if NaN, positive or negative infinity\r\nfunction IsInfinite(const d: JSValue): Boolean; assembler; overload; // negative or positive infinity\r\n{$IFDEF ECMAScript6}\r\nfunction IsInteger(const d: JSValue): Boolean; external name 'Number.isInteger'; // any integer representable by a double\r\nfunction IsSafeInteger(const d: JSValue): Boolean; external name 'Number.isSafeInteger'; // an integer between MinInteger and MaxInteger, inclusive\r\n{$ENDIF}\r\n\r\nfunction SameValue(const A, B: Double; Epsilon: Double = 0.0): Boolean; overload;\r\n\r\n// function Abs is in System.pas\r\nfunction ArcCos(const A : Double): Double; external name 'Math.acos';\r\nfunction ArcCosH(const A: Double): Double; external name 'Math.acosh'; // not on IE\r\nfunction ArcSin(const A : Double): Double; external name 'Math.asin';\r\nfunction ArcSinH(const A : Double): Double; external name 'Math.asinh'; // not on IE\r\nfunction ArcTanH(const A: Double): Double; external name 'Math.atanh'; // not on IE\r\nfunction CosH(const A: Double): Double; external name 'Math.cosh'; // not on IE\r\nfunction ExpM1(const A: Double): Double; external name 'Math.expm1'; // not on IE\r\nfunction FRound(const A: Double): Double; overload; external name 'Math.fround'; // not on IE\r\nfunction FTrunc(const A: Double): double; overload; external name 'Math.trunc'; // not on IE\r\nfunction Hypot(const A : Double): Double; varargs; external name 'Math.hypot'; // not on IE\r\nfunction IMul(const A, B: Integer): Integer; external name 'Math.imul'; // not on IE\r\nfunction Log10(const A: Double): Double; external name 'Math.log10';\r\nfunction Log1p(const A: Double): Double; external name 'Math.log1p'; // not on IE\r\nfunction Log2(const A: Double): Double; external name 'Math.log2'; // not on IE\r\nfunction LogN(const A, Base: Double): Double; \r\nfunction Power(const Base, Exponent: Double): Double; external name 'Math.pow';\r\n// ln, round, sqrt, trunc, cos, sin, arctan, round, exp are in unit system\r\nfunction Ceil(const A: Double): Integer;\r\nfunction Floor(const A: Double): Integer;\r\nfunction Ceil64(const A: Double): NativeLargeInt;\r\nfunction Floor64(const A: Double): NativeLargeInt;\r\nfunction ldexp(x : double;const p : Integer) : double;\r\nprocedure Frexp(X: double; out Mantissa: double; out Exponent: integer);\r\nfunction lnxp1(x : double) : double;\r\n\r\nfunction IntPower(base : float;const exponent : Integer) : double;\r\n\r\nprocedure DivMod(Dividend: LongInt; Divisor: Word; out Result, Remainder: Word);\r\nprocedure DivMod(Dividend: LongInt; Divisor: Word; out Result, Remainder: SmallInt);\r\nprocedure DivMod(Dividend: DWord; Divisor: DWord; out Result, Remainder: DWord);\r\nprocedure DivMod(Dividend: LongInt; Divisor: LongInt; out Result, Remainder: LongInt);\r\n\r\n{ Angle conversion }\r\nfunction DegToRad(deg : double) : double;\r\nfunction RadToDeg(rad : double) : double;\r\nfunction GradToRad(grad : double) : double;\r\nfunction RadToGrad(rad : double) : double;\r\nfunction DegToGrad(deg : double) : double;\r\nfunction GradToDeg(grad : double) : double;\r\n{ one cycle are 2*Pi rad }\r\nfunction CycleToRad(cycle : double) : double;\r\nfunction RadToCycle(rad : double) : double;\r\nFunction DegNormalize(deg : double) : double;\r\n\r\nfunction Norm(const data : array of double) : double;\r\n\r\n// Statistical functions\r\nfunction Mean(const data : array of double) : double;\r\nfunction Sum(const data : array of double) : double;\r\nprocedure SumsAndSquares(const data : Array of Double; out Sum,SumOfSquares : double);\r\n\r\nfunction StdDev(const data : array of Double) : float;\r\nprocedure MeanAndStdDev(const data : array of Double; out Mean,StdDev : double);\r\nfunction Variance(const data : array of Double) : double;\r\nfunction TotalVariance(const data : array of Double) : double;\r\nfunction PopNStdDev(const data : array of Double) : double;\r\nfunction PopNVariance(const data : array of Double) : double;\r\nprocedure MomentSkewKurtosis(const data : array of Double; out m1,m2,m3,m4,skew,kurtosis : double);\r\n\r\n// Financial functions\r\n\r\nType\r\n  TPaymentTime = (ptEndOfPeriod,ptStartOfPeriod);\r\n\r\nfunction FutureValue(ARate: double; NPeriods: Integer;\r\n  APayment, APresentValue: double; APaymentTime: TPaymentTime): double;\r\n\r\nfunction InterestRate(NPeriods: Integer; APayment, APresentValue, AFutureValue: double;\r\n  APaymentTime: TPaymentTime): double;\r\n\r\nfunction NumberOfPeriods(ARate, APayment, APresentValue, AFutureValue: double;\r\n  APaymentTime: TPaymentTime): double;\r\n\r\nfunction Payment(ARate: double; NPeriods: Integer;\r\n  APresentValue, AFutureValue: double; APaymentTime: TPaymentTime): double;\r\n\r\nfunction PresentValue(ARate: double; NPeriods: Integer;\r\n  APayment, AFutureValue: double; APaymentTime: TPaymentTime): double;\r\n\r\n// Miscellaneous\r\n\r\nfunction IfThen(val:boolean;const ifTrue:integer; const ifFalse:integer= 0) :integer; overload;\r\nfunction IfThen(val:boolean;const ifTrue:double ; const ifFalse:double =0.0):double; overload;\r\n\r\nType\r\n  TValueRelationship = -1..1;\r\n\r\nconst\r\n  EqualsValue = 0;\r\n  LessThanValue = Low(TValueRelationship);\r\n  GreaterThanValue = High(TValueRelationship);\r\n\r\nfunction CompareValue ( const A, B  : Integer) : TValueRelationship;\r\nfunction CompareValue ( const A, B  : NativeLargeInt) : TValueRelationship;\r\nfunction CompareValue ( const A, B  : NativeLargeUInt) : TValueRelationship;\r\nfunction CompareValue ( const A, B : Double; delta : Double = 0.0) : TValueRelationship;\r\n\r\nimplementation\r\n\r\nfunction InRange(const AValue, AMin, AMax: Integer): Boolean; assembler;\r\nasm\r\n  return (AValue >= AMin) && (AValue <= AMax);\r\nend;\r\n\r\nfunction InRange(const AValue, AMin, AMax: Double): Boolean; assembler;\r\nasm\r\n  return (AValue >= AMin) && (AValue <= AMax);\r\nend;\r\n\r\nfunction EnsureRange(const AValue, AMin, AMax: Integer): Integer; assembler;\r\nasm\r\n  if (AValue<AMin){ return AMin;\r\n  } else if (AValue>AMax){ return AMax;\r\n  } else return AValue;\r\nend;\r\n\r\nfunction EnsureRange(const AValue, AMin, AMax: Double): Double; assembler;\r\nasm\r\n  if (AValue<AMin){ return AMin;\r\n  } else if (AValue>AMax){ return AMax;\r\n  } else return AValue;\r\nend;\r\n\r\nfunction RoundTo(const AValue: Double; const Digits: TRoundToRange): Double;\r\nvar\r\n  RV : Double;\r\n\r\nbegin\r\n  RV:=IntPower(10,Digits);\r\n  Result:=Round(AValue/RV)*RV;\r\nend;\r\n\r\nfunction SimpleRoundTo(const AValue: Double; const Digits: TRoundToRange): Double;\r\nvar\r\n  RV : Double;\r\n\r\nbegin\r\n  RV := IntPower(10, -Digits);\r\n  if AValue < 0 then\r\n    Result := Int((AValue*RV) - 0.5)/RV\r\n  else\r\n    Result := Int((AValue*RV) + 0.5)/RV;\r\nend;\r\n\r\nfunction randg(mean,stddev : float) : float;\r\n\r\nVar\r\n  U1,S2 : Float;\r\n\r\nbegin\r\n  repeat\r\n    u1:= 2*random-1;\r\n    S2:=Sqr(U1)+sqr(2*random-1);\r\n  until s2<1;\r\n  Result:=Sqrt(-2*ln(S2)/S2)*u1*stddev+Mean;\r\nend;\r\n\r\n\r\nfunction RandomRange(const aFrom, aTo: Integer): Integer;\r\nbegin\r\n  Result:=Random(Abs(aFrom-aTo))+Min(aTo,AFrom);\r\nend;\r\n\r\n\r\nfunction RandomRange(const aFrom, aTo: NativeLargeInt): NativeLargeInt;\r\n\r\nVar\r\n  m : NativeLargeInt;\r\nbegin\r\n  if aFrom<aTo then\r\n    M:=aFrom\r\n  else\r\n    M:=aTo;\r\n  Result:=Random(Abs(aFrom-aTo))+M;\r\nend;\r\n\r\nconst\r\n  DZeroResolution = 1E-12;\r\n\r\nfunction IsZero(const d: Double; Epsilon: Double): Boolean;\r\nbegin\r\n  if Epsilon=0 then\r\n    Epsilon:=DZeroResolution;\r\n  Result:=Abs(d)<=Epsilon;\r\nend;\r\n\r\nfunction IsZero(const d: Double): Boolean;\r\nbegin\r\n  Result:=Abs(d)<=DZeroResolution;\r\nend;\r\n\r\nfunction IsInfinite(const d: JSValue): Boolean; assembler;\r\nasm\r\n  return (d==Infinite) || (d==-Infinite);\r\nend;\r\n\r\nfunction SameValue(const A, B: Double; Epsilon: Double): Boolean;\r\nbegin\r\n  if (Epsilon=0.0) then\r\n    Epsilon:=Max(Min(Abs(A),Abs(B))*DZeroResolution,DZeroResolution);\r\n  if (A>B) then\r\n    Result:=((A-B)<=Epsilon)\r\n  else\r\n    Result:=((B-A)<=Epsilon);\r\nend;\r\n\r\nfunction JSFloor(const A: Double): Double; external name 'Math.floor';\r\nfunction JSCeil(const A: Double): Double; external name 'Math.ceil';\r\n\r\nfunction Ceil(const A: Double): Integer;\r\n\r\nbegin\r\n  // TODO: add Range check ?\r\n  Result:=trunc(JSCeil(a));\r\nend;\r\n\r\nfunction Floor(const A: Double): Integer;\r\n\r\nbegin\r\n  // TODO: add Range check ?\r\n  Result:=trunc(JSFloor(a));\r\nend;\r\n\r\nfunction Ceil64(const A: Double): NativeLargeInt;\r\n\r\nbegin\r\n  Result:=trunc(JSCeil(a));\r\nend;\r\n\r\nfunction Floor64(const A: Double): NativeLargeInt;\r\n\r\nbegin\r\n  Result:=trunc(JSCeil(a));\r\nend;\r\n\r\nprocedure Frexp(X: double; out Mantissa: double; out Exponent: integer);\r\n\r\nbegin\r\n  Exponent:=0;\r\n  if (X<>0) then\r\n    if (abs(X)<0.5) then\r\n      repeat\r\n        X:=X*2;\r\n        Dec(Exponent);\r\n      until (abs(X)>=0.5)\r\n    else\r\n      while (abs(X)>=1) do\r\n        begin\r\n        X:=X/2;\r\n        Inc(Exponent);\r\n        end;\r\n  Mantissa:=X;\r\nend;\r\n\r\nfunction LogN(const A, Base: Double): Double; \r\n\r\nbegin\r\n  Result:=Ln(A)/Ln(Base);\r\nend;\r\n\r\nfunction lnxp1(x: double): double;\r\n\r\nvar\r\n  y: float;\r\n\r\nbegin\r\n  if (x>=4.0) then\r\n    result:=ln(1.0+x)\r\n  else\r\n    begin\r\n    y:=1.0+x;\r\n    if (y=1.0) then\r\n      result:=x\r\n    else\r\n      begin\r\n      result:=ln(y);     { lnxp1(-1) = ln(0) = -Inf }\r\n      if y>0.0 then\r\n        result:=result+(x-(y-1.0))/y;\r\n      end;\r\n    end;\r\nend;\r\n\r\nfunction ldexp(x : double;const p : Integer) : double;\r\n\r\nbegin\r\n   result:=x*intpower(2.0,p);\r\nend;\r\n\r\n\r\nfunction IntPower(base: float; const exponent: Integer): double;\r\n\r\nvar\r\n  i : longint;\r\n\r\nbegin\r\n  if (base = 0.0) and (exponent = 0) then\r\n    result:=1\r\n  else\r\n    begin\r\n    i:=abs(exponent);\r\n    Result:=1.0;\r\n    while i>0 do\r\n      begin\r\n      while (i and 1)=0 do\r\n        begin\r\n        i:=i shr 1;\r\n        base:=sqr(base);\r\n        end;\r\n      i:=i-1;\r\n      Result:=Result*base;\r\n      end;\r\n    if exponent<0 then\r\n      Result:=1.0/Result;\r\n    end;\r\nend;\r\n\r\nprocedure DivMod(Dividend: LongInt; Divisor: Word; out Result, Remainder: Word);\r\nbegin\r\n  if Dividend < 0 then\r\n    begin\r\n    Dividend:=-Dividend;\r\n    Result:=-(Dividend Div Divisor);\r\n    Remainder:=-(Dividend+(Result*Divisor));\r\n    end\r\n  else\r\n    begin\r\n    Result:=Dividend Div Divisor;\r\n    Remainder:=Dividend-(Result*Divisor);\r\n    end;\r\nend;\r\n\r\n\r\nprocedure DivMod(Dividend: LongInt; Divisor: Word; out Result,\r\n  Remainder: SmallInt);\r\nbegin\r\n  if Dividend < 0 then\r\n    begin\r\n    Dividend:=-Dividend;\r\n    Result:=-(Dividend Div Divisor);\r\n    Remainder:=-(Dividend+(Result*Divisor));\r\n    end\r\n  else\r\n    begin\r\n    Result:=Dividend Div Divisor;\r\n    Remainder:=Dividend-(Result*Divisor);\r\n    end;\r\nend;\r\n\r\n\r\nprocedure DivMod(Dividend: DWord; Divisor: DWord; out Result, Remainder: DWord);\r\nbegin\r\n  Result:=Dividend Div Divisor;\r\n  Remainder:=Dividend-(Result*Divisor);\r\nend;\r\n\r\n\r\nprocedure DivMod(Dividend: LongInt; Divisor: LongInt; out Result,\r\n  Remainder: LongInt);\r\n\r\nbegin\r\n  if Dividend < 0 then\r\n    begin\r\n    Dividend:=-Dividend;\r\n    Result:=-(Dividend Div Divisor);\r\n    Remainder:=-(Dividend+(Result*Divisor));\r\n    end\r\n  else\r\n    begin\r\n    Result:=Dividend Div Divisor;\r\n    Remainder:=Dividend-(Result*Divisor);\r\n    end;\r\nend;\r\n\r\n{ ---------------------------------------------------------------------\r\n  Angle conversion\r\n  ---------------------------------------------------------------------}\r\nfunction DegToRad(deg: double): double;\r\n\r\nbegin\r\n  Result:=deg*(pi/180.0);\r\nend;\r\n\r\n\r\nfunction RadToDeg(rad: double): double;\r\n\r\nbegin\r\n  Result:=rad*(180.0/pi);\r\nend;\r\n\r\n\r\nfunction GradToRad(grad: double): double;\r\n\r\nbegin\r\n  Result:=grad*(pi/200.0);\r\nend;\r\n\r\n\r\nfunction RadToGrad(rad: double): double;\r\n\r\nbegin\r\n  Result:=rad*(200.0/pi);\r\nend;\r\n\r\n\r\nfunction DegToGrad(deg: double): double;\r\n\r\nbegin\r\n  Result:=deg*(200.0/180.0);\r\nend;\r\n\r\n\r\nfunction GradToDeg(grad: double): double;\r\n\r\nbegin\r\n  Result:=grad*(180.0/200.0);\r\nend;\r\n\r\n\r\nfunction CycleToRad(cycle: double): double;\r\n\r\nbegin\r\n  Result:=(2*pi)*cycle;\r\nend;\r\n\r\n\r\nfunction RadToCycle(rad: double): double;\r\n\r\nbegin\r\n  Result:=rad*(1/(2*pi));\r\nend;\r\n\r\n\r\nfunction DegNormalize(deg: double): double;\r\n\r\nbegin\r\n  Result:=Deg-Int(Deg/360)*360;\r\n  If (Result<0) then Result:=Result+360;\r\nend;\r\n\r\nfunction sumofsquares(const data : array of double) : double;\r\nvar\r\n  i,N : longint;\r\n\r\nbegin\r\n  N:=Length(Data);\r\n  Result:=0.0;\r\n  for i:=0 to N-1 do\r\n    Result:=Result+sqr(data[i]);\r\nend;\r\n\r\nfunction Norm(const data: array of double): double;\r\nbegin\r\n  Result:=sqrt(sumofsquares(data));\r\nend;\r\n\r\n{ ---------------------------------------------------------------------\r\n  Statistical functions\r\n  ---------------------------------------------------------------------}\r\n\r\nfunction Sum(const data: array of double): double;\r\n\r\nvar\r\n  i,N : longint;\r\n\r\nbegin\r\n  N:=Length(Data);\r\n  Result:=0.0;\r\n  for i:=0 to N-1 do\r\n    Result:=Result+data[i];\r\nend;\r\n\r\nfunction Mean(const data: array of double): double;\r\n\r\nVar\r\n  N : integer;\r\n\r\nbegin\r\n  N:=Length(Data);\r\n  if N=0 then\r\n    Result:=0\r\n  else\r\n    Result:=Sum(Data)/N;\r\nend;\r\nprocedure SumsAndSquares(const data: array of Double; out Sum,\r\n  SumOfSquares: double);\r\n\r\nvar\r\n  i,n : Integer;\r\n  t,s,ss: double;\r\n\r\nbegin\r\n  n:=length(Data);\r\n  ss:=0.0; // Use local vars, var is very inefficient in js\r\n  s:=0.0;\r\n  for i:=0 to N-1 do\r\n    begin\r\n    t:=data[i];\r\n    ss:=ss+sqr(t);\r\n    s:=s+t;\r\n    end;\r\n  Sum:=s;\r\n  SumOfSquares:=ss;\r\nend;\r\n\r\nfunction StdDev(const data: array of Double): float;\r\n\r\nbegin\r\n  Result:=Sqrt(Variance(Data));\r\nend;\r\n\r\nfunction Variance(const data: array of Double): double;\r\n\r\nvar\r\n  n : integer;\r\n\r\nbegin\r\n  N:=Length(Data);\r\n  If N=1 then\r\n    Result:=0\r\n  else\r\n    Result:=TotalVariance(Data)/(N-1);\r\nend;\r\n\r\nfunction TotalVariance(const data: array of Double): double;\r\n\r\nvar\r\n  S,SS : Float;\r\n  N : integer;\r\nbegin\r\n  N:=Length(Data);\r\n  If Length(Data)=1 then\r\n    Result:=0\r\n  else\r\n    begin\r\n    SumsAndSquares(Data,S,SS);\r\n    Result := SS-Sqr(S)/N;\r\n    end;\r\nend;\r\n\r\nprocedure MeanAndStdDev(const data: array of Double; out Mean, StdDev: double);\r\n\r\nVar\r\n  I,N : longint;\r\n  M,S : Double;\r\n\r\nbegin\r\n  N:=Length(Data);\r\n  M:=0;\r\n  S:=0;\r\n  For I:=0 to N-1 do\r\n    begin\r\n    M:=M+Data[i];\r\n    S:=S+Sqr(Data[i]);\r\n    end;\r\n  M:=M/N;\r\n  S:=(S-N*Sqr(M));\r\n  If N>1 then\r\n    S:=Sqrt(S/(N-1))\r\n  else\r\n    S:=0;\r\n  Mean:=M;\r\n  StdDev:=S;\r\nend;\r\n\r\nfunction PopNStdDev(const data : array of Double) : double;\r\n\r\nbegin\r\n  Result:=Sqrt(PopnVariance(Data));\r\nend;\r\n\r\nfunction PopNVariance(const data : array of Double) : double;\r\n\r\nVar\r\n  N : integer;\r\n\r\nbegin\r\n  N:=Length(Data);\r\n  if N=0 then\r\n    Result:=0\r\n  else\r\n    Result:=TotalVariance(Data)/N;\r\nend;\r\n\r\nprocedure MomentSkewKurtosis(const data: array of Double; out m1, m2, m3, m4, skew, kurtosis: double);\r\n\r\nvar\r\n  i,N: integer;\r\n  deviation, deviation2: double;\r\n  reciprocalN: float;\r\n  // Use local vars for all calculations, var is very slow\r\n  lm1, lm2, lm3, lm4, lskew, lkurtosis: double;\r\n\r\nbegin\r\n  N:=length(Data);\r\n  lm1 := 0;\r\n  reciprocalN := 1/N;\r\n  for i := 0 to N-1 do\r\n    lm1 := lm1 + data[i];\r\n  lm1 := reciprocalN * lm1;\r\n\r\n  lm2 := 0;\r\n  lm3 := 0;\r\n  lm4 := 0;\r\n  for i := 0 to N-1 do\r\n    begin\r\n    deviation := (data[i]-lm1);\r\n    deviation2 := deviation * deviation;\r\n    lm2 := lm2 + deviation2;\r\n    lm3 := lm3 + deviation2 * deviation;\r\n    lm4 := lm4 + deviation2 * deviation2;\r\n    end;\r\n  lm2 := reciprocalN * lm2;\r\n  lm3 := reciprocalN * lm3;\r\n  lm4 := reciprocalN * lm4;\r\n\r\n  lskew := lm3 / (sqrt(lm2)*lm2);\r\n  lkurtosis := lm4 / (lm2 * lm2);\r\n\r\n  m1:=lm1;\r\n  m2:=lm2;\r\n  m3:=lm3;\r\n  m4:=lm4;\r\n  skew:=lskew;\r\n  kurtosis:=lkurtosis;\r\nend;\r\n\r\n{ ---------------------------------------------------------------------\r\n  Financial functions\r\n  ---------------------------------------------------------------------}\r\n\r\nfunction FutureValue(ARate: double; NPeriods: Integer;\r\n  APayment, APresentValue: double; APaymentTime: TPaymentTime): double;\r\nvar\r\n  q, qn, factor: double;\r\nbegin\r\n  if ARate = 0 then\r\n    Result := -APresentValue - APayment * NPeriods\r\n  else begin\r\n    q := 1.0 + ARate;\r\n    qn := power(q, NPeriods);\r\n    factor := (qn - 1) / (q - 1);\r\n    if APaymentTime = ptStartOfPeriod then\r\n      factor := factor * q;\r\n    Result := -(APresentValue * qn + APayment*factor);\r\n  end;\r\nend;\r\n\r\nfunction InterestRate(NPeriods: Integer; APayment, APresentValue, AFutureValue: double;\r\n  APaymentTime: TPaymentTime): double;\r\n{ The interest rate cannot be calculated analytically. We solve the equation\r\n  numerically by means of the Newton method:\r\n  - guess value for the interest reate\r\n  - calculate at which interest rate the tangent of the curve fv(rate)\r\n    (straight line!) has the requested future vale.\r\n  - use this rate for the next iteration. }\r\nconst\r\n  DELTA = 0.001;\r\n  EPS = 1E-9;   // required precision of interest rate (after typ. 6 iterations)\r\n  MAXIT = 20;   // max iteration count to protect agains non-convergence\r\nvar\r\n  r1, r2, dr: double;\r\n  fv1, fv2: double;\r\n  iteration: Integer;\r\nbegin\r\n  iteration := 0;\r\n  r1 := 0.05;  // inital guess\r\n  repeat\r\n    r2 := r1 + DELTA;\r\n    fv1 := FutureValue(r1, NPeriods, APayment, APresentValue, APaymentTime);\r\n    fv2 := FutureValue(r2, NPeriods, APayment, APresentValue, APaymentTime);\r\n    dr := (AFutureValue - fv1) / (fv2 - fv1) * delta;  // tangent at fv(r)\r\n    r1 := r1 + dr;      // next guess\r\n    inc(iteration);\r\n  until (abs(dr) < EPS) or (iteration >= MAXIT);\r\n  Result := r1;\r\nend;\r\n\r\nfunction NumberOfPeriods(ARate, APayment, APresentValue, AFutureValue: double;\r\n  APaymentTime: TPaymentTime): double;\r\n{ Solve the cash flow equation (1) for q^n and take the logarithm }\r\nvar\r\n  q, x1, x2: double;\r\nbegin\r\n  if ARate = 0 then\r\n    Result := -(APresentValue + AFutureValue) / APayment\r\n  else begin\r\n    q := 1.0 + ARate;\r\n    if APaymentTime = ptStartOfPeriod then\r\n      APayment := APayment * q;\r\n    x1 := APayment - AFutureValue * ARate;\r\n    x2 := APayment + APresentValue * ARate;\r\n    if   (x2 = 0)                    // we have to divide by x2\r\n      or (sign(x1) * sign(x2) < 0)   // the argument of the log is negative\r\n    then\r\n      Result := Infinity\r\n    else begin\r\n      Result := ln(x1/x2) / ln(q);\r\n    end;\r\n  end;\r\nend;\r\n\r\nfunction Payment(ARate: double; NPeriods: Integer;\r\n  APresentValue, AFutureValue: double; APaymentTime: TPaymentTime): double;\r\nvar\r\n  q, qn, factor: double;\r\nbegin\r\n  if ARate = 0 then\r\n    Result := -(AFutureValue + APresentValue) / NPeriods\r\n  else begin\r\n    q := 1.0 + ARate;\r\n    qn := power(q, NPeriods);\r\n    factor := (qn - 1) / (q - 1);\r\n    if APaymentTime = ptStartOfPeriod then\r\n      factor := factor * q;\r\n    Result := -(AFutureValue + APresentValue * qn) / factor;\r\n  end;\r\nend;\r\n\r\nfunction PresentValue(ARate: double; NPeriods: Integer;\r\n  APayment, AFutureValue: double; APaymentTime: TPaymentTime): double;\r\nvar\r\n  q, qn, factor: double;\r\nbegin\r\n  if ARate = 0.0 then\r\n    Result := -AFutureValue - APayment * NPeriods\r\n  else begin\r\n    q := 1.0 + ARate;\r\n    qn := power(q, NPeriods);\r\n    factor := (qn - 1) / (q - 1);\r\n    if APaymentTime = ptStartOfPeriod then\r\n      factor := factor * q;\r\n    Result := -(AFutureValue + APayment*factor) / qn;\r\n  end;\r\nend;\r\n\r\n{ ---------------------------------------------------------------------\r\n  Miscellaneous\r\n  ---------------------------------------------------------------------}\r\n\r\nfunction IfThen(val: boolean; const ifTrue: integer; const ifFalse: integer): integer;\r\n\r\nbegin\r\n  if val then result:=iftrue else result:=iffalse;\r\nend;\r\n\r\nfunction IfThen(val: boolean; const ifTrue: double; const ifFalse: double): double;\r\n\r\nbegin\r\n  if val then result:=iftrue else result:=iffalse;\r\nend;\r\n\r\nfunction CompareValue(const A, B  : Integer): TValueRelationship;\r\n\r\nbegin\r\n  result:=GreaterThanValue;\r\n  if a=b then\r\n    result:=EqualsValue\r\n  else\r\n   if a<b then\r\n     result:=LessThanValue;\r\nend;\r\n\r\nfunction CompareValue(const A, B: NativeLargeInt): TValueRelationship;\r\n\r\nbegin\r\n  result:=GreaterThanValue;\r\n  if a=b then\r\n    result:=EqualsValue\r\n  else\r\n   if a<b then\r\n     result:=LessThanValue;\r\nend;\r\n\r\nfunction CompareValue(const A, B: NativeLargeUInt): TValueRelationship;\r\n\r\nbegin\r\n  result:=GreaterThanValue;\r\n  if a=b then\r\n    result:=EqualsValue\r\n  else\r\n   if a<b then\r\n     result:=LessThanValue;\r\nend;\r\n\r\nfunction CompareValue(const A, B: Double; delta: Double): TValueRelationship;\r\nbegin\r\n  result:=GreaterThanValue;\r\n  if abs(a-b)<=delta then\r\n    result:=EqualsValue\r\n  else\r\n   if a<b then\r\n     result:=LessThanValue;\r\nend;\r\n\r\nend.\r\n\r\n","(*\r\n ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════╗\r\n ║ This is a custom wrapper for DOM manipulation. This library utilizes most edge and high-performance   ║\r\n ║ methods for DOM manipulation. You don't need to learn something new, its usage is very simple because ║\r\n ║ it has the same syntax as well known jQuery library with support of the most popular and widely used  ║\r\n ║ methods and jQuery-like chaining.                                                                     ║\r\n ║ by warleyalex                                                                                         ║\r\n ╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝   }\r\n *)\r\n\r\nunit uDOM;\r\n\r\n{$mode objfpc}\r\n{$modeswitch externalclass}\r\n\r\ninterface\r\n\r\nuses\r\n  Types, Web, JS, Classes, SysUtils{, libjquery};\r\n\r\n\r\nType\r\n  JDom7TopLeft = record\r\n    top,left : integer;\r\n  end;\r\n\r\n\r\ntype\r\n  JDom7 = class;\r\n  //TCallback = Procedure (args : JSValue);\r\n  //TCallbackEvent = Procedure (args : JSValue);\r\n\r\n(*\r\ntype\r\n  TCallbacks = class external name 'Callbacks'\r\n  Public\r\n    function add(aCallBack : TCallBack) : TCallbacks;\r\n    function add(aCallBack : Array of TCallBack) : TCallbacks;\r\n    function add(aCallBack : TCallBackEvent) : TCallbacks;\r\n    function add(aCallBack : Array of TCallBackEvent) : TCallbacks;\r\n    function disable : TCallBacks;\r\n    function disabled : Boolean;\r\n    function empty : TCallBacks;\r\n    function fire(arguments : JSValue) : TCallbacks; varargs;\r\n    function fired : Boolean;\r\n    function fireWith(context : JSValue; arguments : JSValue) : TCallbacks;\r\n    function has(aCallBack : TCallBack) : Boolean;\r\n    function has(aCallBack : TCallBackEvent) : Boolean;\r\n    function lock : TCallBacks;\r\n    function locked : boolean;\r\n    function remove(aCallBack : TCallBack) : TCallbacks;\r\n    function remove(aCallBack : Array of TCallBack) : TCallbacks;\r\n    function remove(aCallBack : TCallBackEvent) : TCallbacks;\r\n    function remove(aCallBack : Array of TCallBackEvent) : TCallbacks;\r\n  end;*)\r\n\r\n  { JDom7 }\r\n\r\n  JDom7AddClassHandler = Reference to Function (aIndex : Integer; AClass : String) : String;\r\n  JDom7AttrHandler = Reference to Function (aIndex : Integer; aAttr : String) : JSValue;\r\n  JDom7CSSHandler = Reference to Function (aIndex : Integer; AClass : String) : JSValue ;\r\n  JDom7EachHandler = Reference to Function (aIndex : Integer; AElement : TJSElement) : Boolean;\r\n  JDom7FilterHandler = Reference to Function (aIndex : Integer; AElement : TJSElement) : Boolean;\r\n  JDom7HeightHandler = Reference to Function (aIndex : Integer; AHeight : jsValue) : JSValue ;\r\n  JDom7HTMLHandler = Reference to Function(aIndex : Integer; aHTML : String) : String;\r\n  //JDom7MapHandler = Reference to Function (aIndex : Integer; AElement : TJSElement) : TJSObject;\r\n  JDom7OffsetHandler = Reference to Function (aIndex : Integer; aCoords : JDom7TopLeft) : JDom7TopLeft;\r\n  JDom7PropHandler = Reference to Function(aIndex : Integer; oldProp : JSValue) : JSValue;\r\n  //JDom7QueueHandler = Reference to procedure;\r\n  JDom7TextHandler  = Reference to Function(aIndex : Integer; aString : String) : String;\r\n  JDom7ToggleClassHandler = Reference to Function(aIndex : Integer; aClassName : string; AState : Boolean) : String;\r\n  JDom7ValHandler = Reference to Function(aIndex :integer; aValue : String) : String;\r\n  JDom7WidthHandler = Reference to Function (aIndex : Integer; AHeight : jsValue) : JSValue ;\r\n\r\n  JDom7DeQueueFunction = Reference to Procedure;\r\n  //JDom7AddQueueHandler = Reference to Procedure (aFunc : JDom7DeQueueFunction);\r\n\r\n  //TAjaxEvent = class external name 'AjaxEvent' (TJSEvent);\r\n\r\n  TDeferredDoneHandler = reference to function : Boolean;\r\n\r\n  JDom7Deferred = class external name 'Deferred' (TJSObject)\r\n  Public\r\n    Function done(aHandler :TDeferredDoneHandler) : JDom7Deferred; overload;\r\n    Function done(aHandlers : Array of TDeferredDoneHandler) : JDom7Deferred; overload;\r\n  end;\r\n\r\n  TJQXHR = class;\r\n\r\n  TJQXHRDoneHandler = reference to function(aData : jsValue; textStatus : String; aJQXHR : TJQXHR) : boolean;\r\n  TJQXHRFailHandler = reference to function(aJQXHR : TJQXHR; textStatus : String; AErrorThrown : jsValue) : boolean;\r\n  TJQXHRAlwaysHandler = reference to function(arg1 : TJSObject; textStatus : String; arg2 : TJSObject) : boolean;\r\n\r\n  TJQXHR = class external name 'jqXHR' (JDom7Deferred)\r\n  private\r\n    FReadyState: NativeInt; external name 'readyState';\r\n    //FResponse: JSValue; external name 'response';\r\n    FResponseText: string; external name 'responseText';\r\n    FresponseXML: TJSDocument; external name 'responseXML';\r\n    //FUpload: TJSXMLHttpRequestUpload; external name 'upload';\r\n    FStatus : NativeInt; external name 'status';\r\n    FStatusText : String; external name 'statustext';\r\n  public\r\n    function getResponseHeader(aName : string) : String;\r\n    function getAllResponseHeaders : String;\r\n    procedure overrideMimeType(aType : String);\r\n    procedure setRequestHeader(aName, AValue : string);\r\n    procedure done(aHandler : TJQXHRDoneHandler); overload;\r\n    procedure always(aHandler : TJQXHRAlwaysHandler); overload;\r\n    procedure fail(aHandler : TJQXHRFailHandler); overload;\r\n    procedure _then(aSuccess : TJQXHRDoneHandler; aFail : TJQXHRFailHandler); overload;\r\n    procedure abort;\r\n    procedure abort(AStatusText : String);\r\n    property readyState : NativeInt read FReadyState;\r\n    property ResponseHeaders[aName : string] : string Read getResponseHeader;\r\n    property responseXML : TJSDocument read FresponseXML;\r\n    property responseText : string read FResponseText;\r\n    property status : NativeInt read FStatus;\r\n    property statusText : string read FStatusText;\r\n  end;\r\n\r\n  TJSAjaxSettings = class;\r\n\r\n  JDom7AjaxSettingsHandler = Reference to Function (aHXR : TJQXHR; aOptions : TJSAjaxSettings) : Boolean;\r\n  JDom7AjaxSettingsDataFilter = Reference to function (aData: String; aType : string) : JSValue;\r\n  JDom7AjaxSettingsErrorHandler = Reference to Function (aHXR : TJQXHR; aOptions : TJSAjaxSettings; aStatus, aError : String) : Boolean;\r\n  JDom7AjaxSettingsSuccessHandler = Reference to Function (data : JSValue; aStatus : String; aHXR : TJQXHR) : Boolean;\r\n  JDom7AjaxSettsingsXHRHandler = reference to function : JSValue;\r\n\r\n  TJSAjaxSettings = class external name 'Object' (TJSObject)\r\n    accepts : TJSObject;\r\n    async : boolean;\r\n    beforeSend : JDom7AjaxSettingsHandler;\r\n    cache : boolean;\r\n    complete : JDom7AjaxSettingsHandler;\r\n    contents : TJSObject;\r\n    contentType : String;\r\n    context : TJSObject;\r\n    converters : TJSObject;\r\n    crossDomain : boolean;\r\n    data : JSValue;\r\n    dataFilter : JDom7AjaxSettingsDataFilter;\r\n    dataType : String;\r\n    error : JDom7AjaxSettingsErrorHandler;\r\n    global: boolean;\r\n    headers : TJSObject;\r\n    ifModified : Boolean;\r\n    isLocal : Boolean;\r\n    json : String;\r\n    jsonpCallback : String;\r\n    method : string;\r\n    mimeType : string;\r\n    password : string;\r\n    processData : Boolean;\r\n    scriptCharset : String;\r\n    statusCode : TJSObject;\r\n    success : JDom7AjaxSettingsSuccessHandler;\r\n    timeout : NativeInt;\r\n    traditional : boolean;\r\n    url : string;\r\n    username : string;\r\n    xhr : JDom7AjaxSettsingsXHRHandler;\r\n    xhrFields : TJSObject;\r\n  end;\r\n\r\n  JDom7AjaxTransportCompleteHandler = function (aStatus : NativeInt; aStatusText : string; responses, Headers : TJSObject) : Boolean;\r\n  JDom7AjaxTransportSendHandler = reference to function(headers: TJSObject; onComplete : JDom7AjaxTransportCompleteHandler) : boolean;\r\n  JDom7AjaxTransportAbortHandler = reference to function () : Boolean;\r\n  JDom7AjaxTransport = record\r\n    send : JDom7AjaxTransportSendHandler;\r\n    abort : JDom7AjaxTransportAbortHandler;\r\n  end;\r\n\r\n  //JDom7AjaxTransportHandler = reference to Function (aOptions,aOriginalOptions : TJSObject; aXHR : TJQXHR) : JDom7AjaxTransport;\r\n  //JDom7AjaxPrefilterHandler = reference to procedure (aOptions,aOriginalOptions : TJSObject; aXHR : TJQXHR);\r\n  //JDom7AjaxEventHandler = Reference to Function (aEvent : TAjaxEvent; aHXR : TJQXHR; aOptions : TJSAjaxSettings) : Boolean;\r\n  //JDom7AjaxErrorHandler = Reference to Function (aEvent : TAjaxEvent; aHXR : TJQXHR; aOptions : TJSAjaxSettings; aError : String) : Boolean;\r\n  JDom7AjaxSuccessHandler = Reference to function (aData : TJSObject; aStatus : String; aXHR : TJQXHR) : Boolean;\r\n  //JDom7AjaxLoadHandler = Reference to function (aResponseText,aStatus : String; aXHR : TJQXHR) : Boolean;\r\n  //JDom7AjaxScriptHandler = Reference to function (aScript,aStatus : String; aXHR : TJQXHR) : Boolean;\r\n  //JDom7AjaxHandler = Reference to procedure;\r\n\r\n  JEvent = class external name 'Event' (TJSEvent);\r\n  JBaseEventObject = class external name 'Object'(JEvent);\r\n  JEventObject = class external name 'Object'(JBaseEventObject);\r\n  JFunction_on_handler = function (eventObject: JEventObject): JSValue;\r\n  JProcEvent = procedure(event: JEvent);\r\n  JProcEventJS = procedure(event: JSValue);\r\n  eachCallBack = procedure(index, value: JSValue);\r\n  eachCallBackProc = procedure(index: Double; element: JSValue);\r\n  JDomFilterHandlerFunc =  function(index: Double; element: JSValue): Boolean;\r\n\r\n{ ╔════════════════════════════════════════════════╗\r\n  ║ DOM7 Library                                   ║\r\n  ╚════════════════════════════════════════════════╝ }\r\n\r\n  JDom7 = class external name 'window.Dom7' (TJSObject)\r\n  private\r\n    FCSSHooks: TJSObject; external name 'cssHooks';\r\n    FCSSNumber: TJSObject; external name 'cssNumber';\r\n    FReady: TJSPromise; external name 'ready';\r\n    function getEl(aIndex : Integer) : TJSElement; external name 'get';\r\n  Public\r\n//-------- Classes --------//\r\n    //function item(aIndex : NativeInt) : TJSNode; //TJSHTMLElement;\r\n    //Property Nodes [aIndex : NativeInt] : TJSNode Read item; default;\r\n    function addClass(Const aClass : String) : JDom7; overload;\r\n    function addClass(Const aClassFunction : JDom7AddClassHandler) : JDom7;  overload;\r\n    function removeClass(Const aClass : String) : JDom7; overload;\r\n    function removeClass(Const aClassFunction : JDom7AddClassHandler) : JDom7; overload;\r\n    function hasClass(Const aClassName : String) : Boolean;\r\n    function toggleClass(Const aClass : String) : JDom7; overload;\r\n    function toggleClass(Const aClass : String; aState : Boolean) : JDom7; overload;\r\n    function toggleClass(Const aHandler : JDom7ToggleClassHandler) : JDom7; overload;\r\n    function toggleClass(Const aHandler : JDom7ToggleClassHandler; AState : Boolean) : JDom7; overload;\r\n\r\n    //-------- Attributes and properties --------//\r\n    function prop(const aPropertyName : String) : JDom7; {JSValue;} overload;\r\n    function prop(const aPropertyName : String; AValue : JSValue) : JDom7; overload;\r\n    function prop(const aPropertyName : String; propValue: boolean) : JDom7; overload;\r\n    function prop(const aPropertyName : String; propValue: String) : JDom7; overload;\r\n    function prop(const TJSObject): JDom7; overload;\r\n    function prop(const propertiesObject : JSValue): JDom7; overload;\r\n    function prop(const aPropertyName: String; aHandler : JDom7PropHandler) : JDom7; overload;\r\n    { function attr(Const attributeName : string) : JDom7; overload; }\r\n    function attr(Const attributeName : string) : string; overload;\r\n    function attr(Const attributeName : string; Const Value : String) : JDom7; overload;\r\n    function attr(Const attributes : TJSObject) : JDom7; overload;\r\n    function attr(Const attributes : JSValue) : JDom7; overload;\r\n    function attr(Const attributeName : string; aHandler : JDom7AttrHandler) : JDom7; overload;\r\n    function removeAttr(Const attributeName : string) : JDom7;\r\n    function val : JSValue; overload;\r\n    {function val : JDom7; overload;}\r\n    function val(Const aValue : String) : JDom7; overload;\r\n    function val(newValue : JSValue): JDom7; overload;\r\n    function val(Const aValue : Integer) : JDom7; overload;\r\n    function val(Const aValue : Array of String) : JDom7; overload;\r\n    function val(aHandler : JDom7ValHandler) : JDom7; overload;\r\n\r\n    //-------- Data storage --------//\r\n    class function data(aElement : TJSElement; const aKey : String; aValue : jsValue) : TJSObject; overload;\r\n    class function data(aElement : TJSElement; const aKey : String) : TJSObject; overload;\r\n    class function data(aElement : TJSElement) : TJSObject; overload;\r\n    function data(aKey : String; aValue : JSValue) : JDom7; overload;\r\n    function data(aObj : TJSObject) : JDom7; overload;\r\n    function data(aKey : String) : TJSObject; overload;\r\n    function data : TJSObject; overload;\r\n    class function removeData(aElement : TJSElement; Const aName : String) : JDom7; overload;\r\n    class function removeData(aElement : TJSElement) : JDom7; overload;\r\n    function removeData(const aName : string) : JDom7; overload;\r\n    function removeData(const aNames : array of string) : JDom7; overload;\r\n    function removeData : JDom7; overload;\r\n\r\n    //-------- Data Set --------//\r\n    function dataset(): JDom7; overload;\r\n\r\n    //-------- CSS transform, transitions --------//\r\n    function transform(CSSTransformString : string): JDom7; overload;\r\n    function transition(transitionDuration : double): JDom7; overload;\r\n\r\n    //-------- Events --------//\r\n    function on(eventName: string; handler: JProcEventJS): JDom7; overload;\r\n    function on(eventName: String; handler: JProcEvent): JDom7; overload;\r\n    function on(eventName: String; handler: JProcEvent; useCapture: Boolean): JDom7; overload;\r\n    function on(eventName: String; delegatedTarget: String; handler: JProcEvent): JDom7; overload;\r\n    function on(eventName: String; delegatedTarget: String; handler: JProcEvent; useCapture: Boolean): JDom7; overload;\r\n\r\n    function on(objParams: TJSObject): JDom7; overload;\r\n    function on(eventName: string; handler: JFunction_on_handler = nil): JDom7; overload;\r\n    {function on(const eventName: JSValue; delegatedTarget: JSValue = undefined; handler: TFunction_on_handler = nil): JDom7; overload;}\r\n   // function on(const eventName: JSValue; delegatedTarget: JSValue; const handler: JFunction_on_handler = nil): JDom7; overload;\r\n    function on(const eventName: JSValue; const delegatedTarget: JSValue; const handler: JFunction_on_handler = nil): JDom7; overload;\r\n\r\n    function once(eventName: String; handler: JProcEvent): JDom7; overload;\r\n    function once(eventName: String; handler: JProcEvent; useCapture: Boolean): JDom7; overload;\r\n    function once(eventName: String; delegatedTarget: String; handler: JProcEvent): JDom7; overload;\r\n    function once(eventName: String; delegatedTarget: String; handler: JProcEvent; useCapture: Boolean): JDom7; overload;\r\n\r\n    function once(eventName: string; handler: JFunction_on_handler = nil): JDom7; overload;\r\n    {function once(eventName: JSValue; delegatedTarget: JSValue = undefined; handler: JFunction_on_handler = nil): JDom7; overload;}\r\n    function once(eventName: JSValue; const delegatedTarget: JSValue; handler: JFunction_on_handler = nil): JDom7; overload;\r\n    function off(eventName: String; handler: JProcEvent): JDom7; overload;\r\n    function off(eventName: String; handler: JProcEvent; useCapture: Boolean): JDom7; overload;\r\n    function off(eventName: String; delegatedTarget: String; handler: JProcEvent): JDom7; overload;\r\n    function off(eventName: String; delegatedTarget: String; handler: JProcEvent; useCapture: Boolean): JDom7; overload;\r\n\r\n    function off(eventName: string): JDom7; overload;\r\n    function off(eventName: string; handler: TProcedure): JDom7; overload;\r\n    {function off(eventName: JSValue; delegatedTarget: JSValue = undefined; handler: TProcedure = nil): JDom7; overload;}\r\n    function &off(eventName: string; delegatedTarget: JSValue; handler: TProcedure = nil): JDom7; overload;\r\n\r\n    function trigger(eventName: string; eventData: JSValue): JDom7; overload;\r\n\r\n    function transitionEnd(callback: TProcedure; permanent: Boolean): JDom7; overload;\r\n    function transitionEnd(callback: TProcedure): JDom7; overload;\r\n    function animationEnd(callback: TProcedure): JDom7; overload;\r\n\r\n    //-------- Styles --------//\r\n    function Width: Integer; overload;\r\n    function Width(aValue: Integer) : JDom7; overload;\r\n    function Width(aValue: String) : JDom7; overload;\r\n    function width(value: JSValue {String or Float}): JDom7; overload;\r\n    function Width(aHandler: JDom7WidthHandler) : JDom7; overload;\r\n\r\n    function height: Integer;\r\n    function height(aValue: Integer) : JDom7;\r\n    function height(aValue: String) : JDom7;\r\n    function height(aValue: JSValue) : JDom7;\r\n    function height(aHandler: JDom7HeightHandler) : JDom7;\r\n    function outerHeight(IncludeMargin : Boolean): Integer; overload;\r\n    function outerHeight: Integer; overload;\r\n    function outerHeight(aValue: Integer) : JDom7; overload;\r\n    function outerHeight(aValue: String) : JDom7; overload;\r\n    function outerHeight(aValue: JSValue) : JDom7; overload;\r\n    function outerHeight(aHandler: JDom7HeightHandler) : JDom7; overload;\r\n    function outerWidth(IncludeMargin : Boolean): Integer; overload;\r\n    function outerWidth: Integer; overload;\r\n    function outerWidth(aValue: Integer) : JDom7; overload;\r\n    function outerWidth(aValue: String) : JDom7; overload;\r\n    function outerWidth(aHandler: JDom7WidthHandler) : JDom7; overload;\r\n    function offSet: Integer; overload;\r\n    function offSet(const aOffset: JSValue): JDom7; overload;\r\n    function offSet(const aOffset : JDom7TopLeft): JDom7; overload;\r\n    function offSet(aHandler : JDom7OffsetHandler): JDom7; overload;\r\n    Function offsetParent : JDom7;\r\n    function hide(): JDom7; overload;\r\n    function show(): JDom7; overload;\r\n    function css(Const aPropertyName : TJSObject) : string; overload;\r\n    function css(Const aPropertyName : String) : string; overload;\r\n    function css(Const aPropertyNames : Array of String) : string; overload;\r\n    function css(Const aPropertyName, Avalue : String) : JDom7; overload;\r\n    function css(Const aPropertyName : String; Avalue : Integer) : JDom7; overload;\r\n    function css(Const aPropertyName : String; AHandler : JDom7CSSHandler) : JDom7; overload;\r\n    {function css(Const aProperty: String): JSValue {String or Float}; overload;}\r\n    function css(Const aProperty: String; value: JSValue {String or Float}): JDom7; overload;\r\n    function css(Const aPropertiesObject: JSValue): JDom7; overload;\r\n\r\n    //-------- Scroll --------//\r\n    function scrollLeft : Integer; overload;\r\n    function scrollLeft(aValue : Integer) : JDom7; overload;\r\n    function scrollLeft(position: Integer; duration: Double): JDom7; overload;\r\n    function scrollLeft(position: Integer; duration: Double; callback: TProcedure): JDom7; overload;\r\n    function scrollLeft(position: integer; duration: integer; callback: TProcedure): JDom7; overload;\r\n    function scrollTop : Integer; overload;\r\n    function scrollTop(aValue : Integer) : JDom7; overload;\r\n    function scrollTop(position: Double; duration: Double): JDom7; overload;\r\n    function scrollTop(position: Double; duration: Double; callback: TProcedure): JDom7; overload;\r\n    function scrollTop(position: integer; duration: integer; callback: TProcedure): JDom7; overload;\r\n    function scrollTo(left: Double; top: Double): JDom7; overload;\r\n    function scrollTo(left: Double; top: Double; duration: Double): JDom7; overload;\r\n    function scrollTo(left: Double; top: Double; duration: Double; callback: TProcedure): JDom7; overload;\r\n    function scrollTo(left, top, duration: integer; callback: TProcedure): JDom7; overload;\r\n\r\n    //-------- Dom Manipulation --------//\r\n    function add(Const aSelector : String) : JDom7; overload;\r\n    function add(Const aSelector : String; AContext : TJSElement) : JDom7; overload;\r\n    function add(Const aElement : TJSElement) : JDom7; overload;\r\n    function add(Const aElement : Array of TJSElement) : JDom7; overload;\r\n    function add(Const aQuery : JDom7) : JDom7; overload;\r\n    function add(Const aElement : JSValue) : JDom7; overload;\r\n    function add(Const aElement : TJSArray) : JDom7; overload;\r\n    function each(aHandler : JDom7EachHandler) : JDom7;\r\n    function each(obj: JSValue; callback: eachCallBack): JDom7; overload;\r\n    function each(callback: TProcedure): JDom7; overload;\r\n    function each(callback: eachCallBackProc): JDom7; overload;\r\n    function html : String; overload;\r\n    function html(Const aHTML : String) : JDom7; overload;\r\n    function html(Const aHTML : JSValue) : JDom7; overload;\r\n    function html(Const aHandler : JDom7HTMLHandler) : JDom7; overload;\r\n    function text : String; overload;\r\n    function text(Const aText : string): JDom7; overload;\r\n    function text(Const aText : Integer): JDom7; overload;\r\n    function text(Const aText : Double): JDom7; overload;\r\n    function text(Const aText : Boolean): JDom7; overload;\r\n    function text(aHandler : JDom7TextHandler) : JDom7; overload;\r\n    function text(newTextContent: JSValue): JDom7; overload;\r\n    function &is(Const aSelector : String) : JDom7; external name 'is';\r\n    function &is(Const aQuery : JDom7) : JDom7; external name 'is';\r\n    function &is(aHandler : JDom7FilterHandler) : JDom7; external name 'is';\r\n    function &is(Const aElement : TJSElement) : JDom7; external name 'is';\r\n    function &is(Const aElements : Array of TJSElement) : JDom7; external name 'is';\r\n    function &is(CSSSelector: JSValue): JDom7; overload; external name 'is';\r\n    (* Dom7.isArray(obj) - Determine whether the argument is an array\r\n       obj - object - Object to test whether or not it is an array\r\n       returns a Boolean indicating whether the object is a JavaScript array *)\r\n    { function isArray(obj: JSValue): JDom7; overload; }\r\n   function isArray(target: JSValue): Boolean; overload;\r\n   function index: Boolean;\r\n   (* Dom7.dataset(el) - Get element's data set (set of data- attributes) as plain Object\r\n      el - HTMLElement or string (with CSS selector) - element with data- attributes to get dataset from\r\n      returns a new plain object with dataset  *)\r\n   //function dataset(el: variant): JDom7; overload\r\n   function dataset(target: String {String or JHTMLElement or JDom7}): JSValue; overload;\r\n   function dataset(target: TJSElement {String or JHTMLElement or JDom7}): JDom7; overload;\r\n   function dataset(target: JSValue {String or JHTMLElement or JDom7}): JDom7; overload;\r\n   function eq(AIndex : Integer) : JDom7; overload;\r\n   function eq(index: JSValue): JDom7; overload;\r\n   function eq(index: Double): Boolean; overload;\r\n   function append(HTMLString: string): JDom7; overload;\r\n   function append(HTMLElement: JSValue): JDom7; overload;\r\n   function appendTo(element: String {String or JElement or JDom7}): JDom7;\r\n   function appendTo(element: TJSElement {String or JElement or JDom7}): JDom7;\r\n   (* Dom7.parseUrlQuery(url) - parse url query get parameters\r\n      url - string - url with GET parameters. Required.\r\n      Method returns object with query parameters *)\r\n   function parseUrlQuery(url: string): JDom7; overload;\r\n   function prepend(HTMLString: string): JDom7; overload;\r\n   function prepend(HTMLElement: JSValue): JDom7; overload;\r\n   function prependTo(element: String {String or JElement or JDom7}): JDom7;\r\n   function prependTo(element: TJSElement {String or JElement or JDom7}): JDom7;\r\n   function prependTo(element: JSValue {String or JElement or JDom7}): JDom7;\r\n   function insertBefore(element: JSValue {String or JElement or JDom7}): JDom7;\r\n   function insertBefore(element: TJSElement {String or JElement or JDom7}): JDom7;\r\n   function insertBefore(element: String {String or JElement or JDom7}): JDom7;\r\n   function insertAfter(element: JSValue {String or JElement or JDom7}): JDom7;\r\n   function insertAfter(element: TJSElement {String or JElement or JDom7}): JDom7;\r\n   function insertAfter(element: String {String or JElement or JDom7}): JDom7;\r\n   function next : JDom7; overload;\r\n   function next(const aSelector : String) : JDom7; overload;\r\n   function nextAll : JDom7; overload;\r\n   function nextAll(const aSelector : String) : JDom7; overload;\r\n   function nextAll(const aSelector : JSValue) : JDom7; overload;\r\n   function nextUntil : JDom7; overload;\r\n   function nextUntil(const aSelector : String) : JDom7; overload;\r\n   function nextUntil(const aSelector,aFilter : String) : JDom7; overload;\r\n   function nextUntil(const aElement : TJSElement) : JDom7; overload;\r\n   function nextUntil(const aElement : TJSElement; aFilter : String) : JDom7; overload;\r\n   function nextUntil(const aQuery : JDom7) : JDom7; overload;\r\n   function nextUntil(const aQuery : JDom7; aFilter : String) : JDom7; overload;\r\n   Function prev : JDom7; overload;\r\n   Function prev(Const aSelector : String) : JDom7; overload;\r\n   Function prev(Const aSelector : JSValue) : JDom7; overload;\r\n   Function prevAll : JDom7; overload;\r\n   Function prevAll(Const aSelector : String) : JDom7; overload;\r\n   Function prevAll(Const aSelector : JSValue) : JDom7; overload;\r\n   (*function prevUntil : JDom7; overload;\r\n   function prevUntil(const aSelector : String) : JDom7; overload;\r\n   function prevUntil(const aSelector,aFilter : String) : JDom7; overload;\r\n   function prevUntil(const aElement : TJSElement) : JDom7; overload;\r\n   function prevUntil(const aElement : TJSElement; aFilter : String) : JDom7; overload;\r\n   function prevUntil(const aQuery : JDom7) : JDom7; overload;\r\n   function prevUntil(const aQuery : JDom7; aFilter : String) : JDom7; overload;*)\r\n   Function parent : JDom7;\r\n   Function parent (const ASelector: String) : JDom7;\r\n   Function parent (const ASelector: JSValue) : JDom7;\r\n   Function parents : JDom7;\r\n   Function parents (const ASelector: String) : JDom7;\r\n   Function parents (const ASelector: JSValue) : JDom7;\r\n   (*function parentsUntil : JDom7;\r\n   function parentsUntil(const aSelector : String) : JDom7;\r\n   function parentsUntil(const aSelector,aFilter : String) : JDom7;\r\n   function parentsUntil(const aElement : TJSElement) : JDom7;\r\n   function parentsUntil(const aElement : TJSElement; aFilter : String) : JDom7;\r\n   function parentsUntil(const aQuery : JDom7) : JDom7;\r\n   function parentsUntil(const aQuery : JDom7; aFilter : String) : JDom7; *)\r\n   function find(Const aSelector : String) : JDom7; overload;\r\n   function find(Const aSelector : JSValue) : JDom7; overload;\r\n   function find(Const aQuery : JDom7) : JDom7; overload;\r\n   function find(Const aElement : TJSElement) : JDom7; overload;\r\n   function children(selector: JSValue): JDom7; overload;\r\n   function children(Const aSelector : String) : JDom7; overload;\r\n   function children : JDom7; overload;\r\n   function filter(callback: TProcedure): JDom7; overload;\r\n   function filter(callback: JDomFilterHandlerFunc): JDom7; overload;\r\n   function filter(Const aSelector : String) : JDom7; overload;\r\n   function filter(aHandler : JDom7FilterHandler) : JDom7; overload;\r\n   function filter(Const aQuery : JDom7) : JDom7; overload;\r\n   function filter(Const aElement : TJSElement) : JDom7; overload;\r\n   function filter(Const aElements : Array of TJSElement) : JDom7; overload;\r\n   function remove(): JDom7; overload;\r\n   (* function removeProp(Const aPropertyName : string) : JDom7; *)\r\n   (* Dom7.requestAnimationFrame(callback) - Cross-browser implementation on requestAnimationFrame\r\n      callback - function - A parameter specifying a function to call when it's time to update your animation for the next repaint\r\n      returns animation request id, that uniquely identifies the entry in the callback list  *)\r\n   (* function requestAnimationFrame(callback: TProcedure): JDom7; overload; *)\r\n   function requestAnimationFrame(callback: TProcedure): Integer; overload;\r\n   (* Dom7.cancelAnimationFrame(requestID) - Cancels an animation frame request\r\n      requestID - number - The ID value returned by the call to $$.requestAnimationFrame() that requested the callback  *)\r\n   function cancelAnimationFrame(requestID: integer): JDom7; overload;\r\n   (* Dom7.serializeObject(object) - Create a serialized representation of a plain object suitable for use in a URL query string\r\n      object - object - Object to serialize\r\n      returns a new unique array  *)\r\n   //function serializeObject(obj: variant): JDom7; overload;\r\n   function serializeObject(target: JSValue): String; overload;\r\n   (* Dom7.toCamelCase(string) - Convert hypens-case string to camelCase string\r\n      string - string - hypens-case string\r\n      returns a new camelCase string *)\r\n   //function toCamelCase(str: string): JDom7; overload;\r\n   function toCamelCase(aStr: String): String; overload;\r\n   (* Dom7.unique(array) - Remove duplicates in passed array\r\n      obj - array - Array to remove duplicates\r\n      returns a new unique array *)\r\n   function unique(arr: JSValue): JDom7; overload;\r\n   function unique(target: TJSValueDynArray): TJSValueDynArray; overload;\r\n\r\n   //-------- Shortcuts --------//\r\n   function click: JDom7; overload;\r\n   function click(handler: JProcEvent): JDom7; overload;\r\n   function click(handler: TProcedure): JDom7; overload;\r\n\r\n   function blur(): JDom7; overload;\r\n   function blur(handler: TProcedure): JDom7; overload;\r\n   function blur(handler: JProcEvent): JDom7; overload;\r\n\r\n   function focus(): JDom7; overload;\r\n   function focus(handler: TProcedure): JDom7; overload;\r\n   function focus(handler: JProcEvent): JDom7; overload;\r\n\r\n   function focusin(): JDom7; overload;\r\n   function focusin(handler: TProcedure): JDom7; overload;\r\n   function focusin(handler: JProcEvent): JDom7; overload;\r\n\r\n   function focusout(): JDom7; overload;\r\n   function focusout(handler: TProcedure): JDom7; overload;\r\n   function focusout(handler: JProcEvent): JDom7; overload;\r\n\r\n   function keyup(): JDom7; overload;\r\n   function keyup(handler: TProcedure): JDom7; overload;\r\n   function keyup(handler: JProcEvent): JDom7; overload;\r\n\r\n   function keydown(): JDom7; overload;\r\n   function keydown(handler: TProcedure): JDom7; overload;\r\n   function keydown(handler: JProcEvent): JDom7; overload;\r\n\r\n   function keypress(): JDom7; overload;\r\n   function keypress(handler: TProcedure): JDom7; overload;\r\n   function keypress(handler: JProcEvent): JDom7; overload;\r\n\r\n   function submit(): JDom7; overload;\r\n   function submit(handler: TProcedure): JDom7; overload;\r\n   function submit(handler: JProcEvent): JDom7; overload;\r\n\r\n   function change(): JDom7; overload;\r\n   function change(handler: TProcedure): JDom7; overload;\r\n   function change(handler: JProcEvent): JDom7; overload;\r\n\r\n   function mousedown(): JDom7; overload;\r\n   function mousedown(handler: TProcedure): JDom7; overload;\r\n   function mousedown(handler: JProcEvent): JDom7; overload;\r\n\r\n   function mousemove(): JDom7; overload;\r\n   function mousemove(handler: TProcedure): JDom7; overload;\r\n   function mousemove(handler: JProcEvent): JDom7; overload;\r\n\r\n   function mouseup(): JDom7; overload;\r\n   function mouseup(handler: TProcedure): JDom7; overload;\r\n   function mouseup(handler: JProcEvent): JDom7; overload;\r\n\r\n   function mouseenter(): JDom7; overload;\r\n   function mouseenter(handler: TProcedure): JDom7; overload;\r\n   function mouseenter(handler: JProcEvent): JDom7; overload;\r\n   function mouseleave(): JDom7; overload;\r\n   function mouseleave(handler: TProcedure): JDom7; overload;\r\n   function mouseleave(handler: JProcEvent): JDom7; overload;\r\n   function mouseout(): JDom7; overload;\r\n   function mouseout(handler: TProcedure): JDom7; overload;\r\n   function mouseout(handler: JProcEvent): JDom7; overload;\r\n   function mouseover(): JDom7; overload;\r\n   function mouseover(handler: TProcedure): JDom7; overload;\r\n   function mouseover(handler: JProcEvent): JDom7; overload;\r\n   function touchstart(): JDom7; overload;\r\n   function touchstart(handler: TProcedure): JDom7; overload;\r\n   function touchstart(handler: JProcEvent): JDom7; overload;\r\n   function touchend(): JDom7; overload;\r\n   function touchend(handler: TProcedure): JDom7; overload;\r\n   function touchend(handler: JProcEvent): JDom7; overload;\r\n   function touchmove(): JDom7; overload;\r\n   function touchmove(handler: TProcedure): JDom7; overload;\r\n   function touchmove(handler: JProcEvent): JDom7; overload;\r\n   function resize(handler: TProcedure): JDom7; overload;\r\n   function resize(handler: JProcEvent): JDom7; overload;\r\n   function scroll(handler: JProcEvent): JDom7; overload;\r\n   function scroll(handler: TProcedure): JDom7; overload;\r\n\r\n   //-------- Ajax --------//\r\n    (*  $$.ajax(parameters) - Load data from the server\r\n        parameters - object - Request parameters\r\n        returns plain XHR object *)\r\n    //function ajax(parameters: JAjaxSettings): JDom7; overload;\r\n    //function ajax(parameters: JAjaxSettings): JDom7XHR; overload;\r\n    class function ajax(aURL : String; aSettings : TJSObject) : tJQXHR; overload;\r\n    class function ajax(aSettings : TJSObject) : TJQXHR; overload;\r\n    class function ajax(aSettings : TJSAjaxSettings) : TJQXHR; overload;\r\n    (* $$.get(url, data, success) - Load data from the server using a HTTP GET request\r\n       url - string - Request url\r\n       data - object - A plain object or string that is sent to the server with the request. Optional\r\n       success - function (data, status, xhr) - A callback function that is executed if the request succeeds. Optional\r\n       returns plain XHR object  *)\r\n    //function get(url: string; data: JSValue; success: aCallBack): JDom7; overload;\r\n    //function get(url: String; data: JSValue; success: procedure(data: JSValue; status: Double; xhr: JDom7XHR)): JDom7XHR; overload;\r\n    function get(aIndex : Integer) : TJSElement; overload;\r\n    class function get : TJQXHR; overload;\r\n    class function get(url : String) : TJQXHR; overload;\r\n    class function get(url,Data : String) : TJQXHR; overload;\r\n    class function get(url : String; Data : TJSObject) : TJQXHR; overload;\r\n    class function get(url : String; Data : TJSObject; success : JDom7AjaxSuccessHandler) : TJQXHR; overload;\r\n    class function get(url,Data : String; success : JDom7AjaxSuccessHandler) : TJQXHR; overload;\r\n    class function get(url : String; Data : TJSObject; success : JDom7AjaxSuccessHandler; aDataType : string) : TJQXHR; overload;\r\n    class function get(url,Data : String; success : JDom7AjaxSuccessHandler; aDataType : string) : TJQXHR; overload;\r\n    class function get(aSettings : TJSAjaxSettings) : TJQXHR; overload;\r\n    class function get(aSettings : TJSObject) : TJQXHR; overload;\r\n    (* $$.post(url, data, success) - Load data from the server using a HTTP POST request\r\n       url - string - Request url\r\n       data - object - A plain object or FormData or string that is sent to the server with the request. Optional\r\n       success - function (data, status, xhr) - A callback function that is executed if the request succeeds. Optional\r\n       returns plain XHR object\r\n    *)\r\n    //function post(url: string; data: variant; success: aCallBack): JDom7; overload;\r\n    //function post(url: String; data: Variant; success: procedure(data: Variant; status: Float; xhr: JDom7XHR)): JDom7XHR; overload;\r\n    class function post(url : String) : TJQXHR; overload;\r\n    class function post(url,Data : String) : TJQXHR; overload;\r\n    class function post(url : String; Data : TJSObject) : TJQXHR; overload;\r\n    class function post(url : String; Data : TJSObject; success : JDom7AjaxSuccessHandler) : TJQXHR; overload;\r\n    class function post(url,Data : String; success : JDom7AjaxSuccessHandler) : TJQXHR; overload;\r\n    class function post(url : String; Data : TJSObject; success : JDom7AjaxSuccessHandler; aDataType : string) : TJQXHR; overload;\r\n    class function post(url,Data : String; success : JDom7AjaxSuccessHandler; aDataType : string) : TJQXHR; overload;\r\n    class function post(aSettings : TJSAjaxSettings) : TJQXHR; overload;\r\n    class function post(aSettings : TJSObject) : TJQXHR; overload;\r\n    (*\r\n      $$.getJSON(url, data, success) - Load JSON-encoded data from the server using a GET HTTP request\r\n      url - string - Request url\r\n      data - object - A plain object or FormData or string that is sent to the server with the request. Optional\r\n      success - function (data, status, xhr) - A callback function that is executed if the request succeeds. Optional\r\n      returns plain XHR object\r\n    *)\r\n    //function getJSON(url: string; data: variant=undefined; success: variant=undefined): JDom7; overload;\r\n    //function getJSON(url: String; data: Variant; success: procedure(data: Variant; status: Float; xhr: JDom7XHR)): JDom7XHR; overload;\r\n    class function getJSON(url : String) : TJQXHR; overload;\r\n    class function getJSON(url,Data : String) : TJQXHR; overload;\r\n    class function getJSON(url : String; Data : TJSObject) : TJQXHR; overload;\r\n    class function getJSON(url : String; Data : TJSObject; success : JDom7AjaxSuccessHandler) : TJQXHR; overload;\r\n    class function getJSON(url,Data : String; success : JDom7AjaxSuccessHandler) : TJQXHR; overload;\r\n    class function getJSON(url : String; Data : TJSObject; success : JDom7AjaxSuccessHandler; aDataType : string) : TJQXHR; overload;\r\n    class function getJSON(url,Data : String; success : JDom7AjaxSuccessHandler; aDataType : string) : TJQXHR; overload;\r\n\r\n    (*\r\n    function addBack(Const aSelector : String) : JDom7; overload;\r\n    function addBack : JDom7; overload;\r\n    function ajaxComplete(aHandler : JDom7AjaxEventHandler) : JDom7;\r\n    function ajaxError(aHandler : JDom7AjaxEventHandler) : JDom7;\r\n    function ajaxSend(aHandler : JDom7AjaxEventHandler) : JDom7;\r\n    function ajaxStart(aHandler : JDom7AjaxHandler) : JDom7;\r\n    function ajaxStop(aHandler : JDom7AjaxHandler) : JDom7;\r\n    function ajaxSuccess(aHandler : JDom7AjaxEventHandler) : JDom7;\r\n    class procedure ajaxPrefilter(dataTypes : string; aHandler : JDom7AjaxPrefilterHandler); overload;\r\n    class procedure ajaxSetup(aSettings : TJSAjaxSettings); overload;\r\n    class procedure ajaxSetup(aSettings : TJSObject); overload;\r\n    class procedure ajaxTransport(aDataType : string; AHandler : JDom7AjaxTransportHandler);\r\n    class function Callbacks : TCallbacks; overload;\r\n    class function Callbacks(const aFlags : string) : TCallbacks; overload;\r\n    function clearQueue : JDom7; overload;\r\n    function clearQueue(const aQueueName : String) : JDom7; overload;\r\n    function closest(Const aSelector : String) : JDom7; overload;\r\n    function closest(Const aSelector : String; AContext : TJSElement) : JDom7; overload;\r\n    function closest(Const aQuery : JDom7) : JDom7; overload;\r\n    function closest(Const aElement : TJSElement) : JDom7; overload;\r\n    function contents : JDom7;\r\n    function dequeue : JDom7; overload;\r\n    function dequeue(const aQueueName : String) : JDom7; overload;\r\n    class function dequeue(aElement : TJSElement) : JDom7; overload;\r\n    class function dequeue(aElement : TJSElement; const aQueueName : String) : JDom7; overload;\r\n    function _end : JDom7; external name 'end';\r\n    class function escapeSelector(const S : String) : String;\r\n    function first : JDom7;\r\n    class function getScript(url : String) : TJQXHR; overload;\r\n    class function getScript(url : String; aSuccess : JDom7AjaxScriptHandler) : TJQXHR; overload;\r\n    function has(Const aSelector : String) : JDom7;\r\n    function has(Const aQuery : JDom7) : JDom7;\r\n    class function hasData(aElement : TJSElement) : Boolean;\r\n    function innerHeight: Integer;\r\n    function innerHeight(aValue: Integer) : JDom7;\r\n    function innerHeight(aValue: String) : JDom7;\r\n    function innerHeight(aHandler: JDom7HeightHandler) : JDom7;\r\n    function innerWidth: Integer;\r\n    function innerWidth(aValue: Integer) : JDom7;\r\n    function innerWidth(aValue: String) : JDom7;\r\n    function innerWidth(aHandler: JDom7WidthHandler) : JDom7;\r\n    function last : JDom7;\r\n    class function load(url : String) : TJQXHR; overload;\r\n    class function load(url,Data : String) : TJQXHR; overload;\r\n    class function load(url : String; Data : TJSObject) : TJQXHR; overload;\r\n    class function load(url : String; Data : TJSObject; success : JDom7AjaxLoadHandler) : TJQXHR; overload;\r\n    class function load(url,Data : String; success : JDom7AjaxLoadHandler) : TJQXHR; overload;\r\n    function map(aHandler : JDom7MapHandler) : JDom7;\r\n    function &not(const aSelector : String) : JDom7; external name 'not'; overload;\r\n    function &not(const aSelector : TJSElement) : JDom7; external name 'not'; overload;\r\n    function &not(const aSelector : Array of TJSElement) : JDom7; external name 'not'; overload;\r\n    function &not(const aSelector : JDom7) : JDom7; external name 'not'; overload;\r\n    function &not(const aSelector : JDom7FilterHandler) : JDom7;external name 'not'; overload;\r\n    function noConflict : TJSObject; overload;\r\n    function noConflict(removeAll: Boolean) : TJSObject; overload;\r\n    class function param (aObject : String) : String; overload;\r\n    class function param (aObject : TJSObject) : String; overload;\r\n    class function param (aObject : JDom7) : String; overload;\r\n    class function param (aObject : String; traditional : Boolean) : String; overload;\r\n    class function param (aObject : TJSObject; traditional : Boolean) : String; overload;\r\n    class function param (aObject : JDom7; traditional : Boolean) : String; overload;\r\n    function position : JDom7TopLeft;\r\n    class function queue(element : TJSElement) : TJSarray; overload;\r\n    class function queue(element : TJSElement; const aQueueName : String) : TJSarray; overload;\r\n    class function queue(element : TJSElement; const aQueueName : string; anewQueue : TJSarray) : JDom7; overload;\r\n    class function queue(element : TJSElement; const aQueueName : String ; aHandler : JDom7QueueHandler) : JDom7; overload;\r\n    function queue : TJSarray; overload;\r\n    function queue(aQueueName : string) : TJSarray; overload;\r\n    function queue(anArray : TJSArray) : JDom7; overload;\r\n    function queue(aQueueName : string; anArray : TJSarray) : JDom7; overload;\r\n    function queue(aQueueName : string; aHandler : JDom7AddQueueHandler) : JDom7; overload;\r\n    function serialize : string;\r\n    function serializeArray : TJSObjectDynArrayArray;\r\n    Function siblings : JDom7; overload;\r\n    Function siblings(Const aSelector : String) : JDom7; overload;\r\n    Function slice(aStart : integer) : JDom7; overload;\r\n    Function slice(aStart,aEnd : integer) : JDom7; overload;\r\n    Function sub : JDom7;\r\n    Function when(APromise : TJSPromise) :  TJSPromise; overload;\r\n    Function when :  TJSPromise; overload;\r\n    Property ready : TJSPromise Read FReady;\r\n    // These should actually be class properties ?\r\n    property cssHooks : TJSObject Read FCSSHooks;\r\n    property cssNumber : TJSObject read FCSSNumber;\r\n    Property Elements[AIndex : Integer] : TJSElement read getEl; default;\r\n    *)\r\n  end;\r\n\r\n{ ╔════════════════════════════════════════════════╗\r\n  ║ External Global Functions                      ║\r\n  ╚════════════════════════════════════════════════╝ }\r\n\r\n  Function Dom7(Const aSelector :  String) : JDom7; external name 'window.Dom7';\r\n  Function Dom7(Const aSelector :  String; Context : TJSElement) : JDom7; external name 'window.Dom7';\r\n  Function Dom7(Const aElement : TJSElement) : JDom7; external name 'window.Dom7';\r\n  Function Dom7(Const aElement : Array of TJSElement) : JDom7; external name 'window.Dom7';\r\n  Function Dom7(Const aElement : TJSObject) : JDom7; external name 'window.Dom7';\r\n  Function Dom7(Const aQuery : JDom7) : JDom7; external name 'window.Dom7';\r\n  Function Dom7() : JDom7; external name 'window.Dom7';\r\n  //Function Dom7(Const aSelector: JSValue) : TJSHTMLElement; external name 'window.Dom7';\r\n\r\n  Var\r\n    gDom7 : JDom7; external name 'window.Dom7';\r\n  var\r\n    this: TJSElement; external name 'this';\r\n\r\n\r\nimplementation\r\n\r\nend.\r\n\r\n\r\n","unit ubindElementAction;\r\n\r\n{$mode objfpc}{$H+}\r\n{$modeswitch externalclass}\r\n\r\ninterface\r\n\r\nuses\r\n  Classes, SysUtils, Types, JS, Web, UPromises, uDOM;\r\n\r\ntype\r\n  TNumber = class external name 'Number'\r\n  public\r\n    function ToFixed(DecimalPlaces: Integer): String{Double}; external name 'toFixed';\r\n  end;\r\n\r\n//function parseFloat(s: String): TNumber; overload; external name 'parseFloat';\r\n\r\ntype\r\n  TProcedureRef  = reference to procedure;\r\n  THandleArray   = array of TJSObject;\r\n\r\ntype\r\n  JEventListenerHandler = procedure of object;\r\n\r\n  JElement = class external name 'Element' (TJSElement)\r\n  Public\r\n    addEventListenerExists: boolean; external name 'addEventListener';\r\n    attachEventExists : boolean; external name 'attachEvent';\r\n    procedure addEventListener(aname: String; callback: JEventListenerHandler; capture : Boolean = false);\r\n    procedure removeEventListener(aname: String; callback: JEventListenerHandler; capture : Boolean = false);\r\n    procedure attachEvent(eventNameWithOn: String; callback: JEventListenerHandler);\r\n    procedure detachEvent(eventNameWithOn: String; callback: JEventListenerHandler);\r\n  end;\r\n\r\ntype\r\n  { TBindEventPage }\r\n  TBindEventPage = class\r\n  private\r\n  { private declarations }\r\n    cardIn   : TJSElement;\r\n    cardOut  : TJSElement;\r\n    loaderPG : TJSElement;\r\n    cashOut  : TJSElement;\r\n    receipt  : TJSElement;\r\n    envelope : TJSElement;\r\n    procedure onCancelClick;\r\n    procedure onCardInClick;\r\n    procedure onCardOutClick;\r\n    procedure onReceiptClick;\r\n    procedure onBeforePageInit;\r\n    //class procedure bindEvents(bindings: THandleArray);\r\n    procedure PrefixedEvent(element: TJSElement; &type: String; callback: TProcedureRef);\r\n    procedure bindEvents;\r\n    procedure bindEvent(element: TJSElement; EventType: String; handler: JEventListenerHandler);\r\n  protected\r\n  { protected declarations }\r\n  public\r\n    function InitializeObject: TObject;\r\n  published\r\n  { published declarations }\r\n  end;\r\n\r\n  { global methods }\r\n  procedure disableAllATMKeys();\r\n  procedure enableATMKey(n: string);\r\n  procedure disableATMKey(n: string);\r\n  procedure disableAllPages();\r\n  procedure gotoPage(n: string);\r\n  procedure envelopeRestart();\r\n  procedure smartLogoANI();\r\n  procedure startReceiptANI();\r\n  procedure killENTER;\r\n\r\nimplementation\r\n\r\nuses Main;\r\n\r\n{ TBindEventPage }\r\n\r\nprocedure TBindEventPage.onCancelClick;\r\nprocedure PROCESS_CARD_ANIMATION;\r\nvar\r\n  defer: JPromise;\r\n\r\nfunction _doTask1(aResponse: JSValue): JSValue;\r\n  begin\r\n    disableAllATMKeys(); \t\t\t\t\t \t // disable all page Keys\r\n    disableAllPages(); \t\t\t\t\t\t\t // clean up all pages\r\n    result := delay(10);\r\n  end;\r\n\r\n  function _doTask2(aResponse: JSValue): JSValue;\r\n  begin\r\n    Dom7('#p2js-page2b').removeClass('paused');   // remove the class 'paused' to perform the card animation\r\n    Dom7('#p2js-page2b').removeClass('nm');   // remove the class 'paused' to perform the card animation\r\n    JDom7(Dom7('#p2js-page2b')['0']).click();              // simulate a virtual click to eject the card\r\n    result := delay(1000);\r\n  end;\r\n\r\nbegin\r\n  defer := Promise.resolve();\r\n  defer\r\n    .&then(@_doTask1)\r\n    .&then(@_doTask2);\r\nend;\r\n\r\n\r\nbegin\r\n  WriteLn('onCancelClick');\r\n  PROCESS_CARD_ANIMATION;\r\n  smartLogoANI(); \t\t\t\t\t\t\t // Display the Main animation Bank SmartMS\r\n\r\nend;\r\n\r\nprocedure TBindEventPage.onCardInClick;\r\nbegin\r\n  WriteLn('onCardInClick');\r\n  console.log('card A clicked');\r\n  disableAllPages();                                                     // clean up the screen\r\n  enableATMKey('2');                         // enable CANCEL button\r\n  Dom7('#p2js-page2a').removeClass('paused'); // remove the class 'paused' to perform the card animation.\r\nend;\r\n\r\nprocedure TBindEventPage.onCardOutClick;\r\nbegin\r\n  WriteLn('onCardOutClick');\r\n  console.log('card B clicked');\r\n  disableAllPages();                                                     // clean up the screen\r\n  TJSHTMLElement(Dom7('#p2js-page2b')['0']).style.webkitAnimationName := 'ani-p2js-page2a-0'; // toggle animation CardOut-CardIn\r\n  Dom7('#p2js-page2b').removeClass('paused');                             // remove the class 'paused' to perform the card animation\r\n  gotoPage('6');                                                       // display the page: 'Please insert card'\r\nend;\r\n\r\nprocedure TBindEventPage.onReceiptClick;\r\nvar\r\n  me: TJSHTMLElement;\r\n\r\n  procedure PROCESS_CASH_ANIMATION;\r\n  var\r\n    defer: JPromise;\r\n\r\n  function _doTask1(aResponse: JSValue): JSValue;\r\n    begin\r\n      console.log('restart CASH animation');\r\n      //Dom7(this).addClass('nm');\r\n      TJSHTMLElement(this).style.webkitAnimation := 'none';\r\n      result := delay(10);\r\n    end;\r\n\r\n    function _doTask2(aResponse: JSValue): JSValue;\r\n    begin\r\n      me := TJSHTMLElement(this);\r\n      me.style.webkitAnimation := '';\r\n      //Dom7('#p2js-page23').addClass('nm');\r\n      me.classList.add('nm');\r\n      result := delay(100);\r\n    end;\r\n\r\n  begin\r\n    defer := Promise.resolve();\r\n    defer\r\n      .&then(@_doTask1)\r\n      .&then(@_doTask2);\r\n  end;\r\n\r\n\r\nbegin\r\n  WriteLn('onReceiptClick');\r\n  Dom7('#p2js-page23').on('click', @PROCESS_CASH_ANIMATION);\r\nend;\r\n\r\n\r\nprocedure TBindEventPage.onBeforePageInit;\r\n\r\n    procedure onCardInAnimationStart;\r\n    begin\r\n    console.log('AnimationStart11111');\r\n    Dom7(this).addClass('paused');   // pause the current animation 'cardIn effect'\r\n    //getPage();\r\n\r\n    end;\r\n\r\n    procedure onCardInAnimationEnd;\r\n    begin\r\n    console.log('AnimationEndt11111');\r\n    gotoPage('24');                                                      // it shows the page: 'Please inform your PIN'\r\n    TJSHTMLElement(Dom7('#p2js-page2b')['0']).style.webkitAnimationName := 'ani-p2js-page2b-0'; // toggle animation 'reversed'\r\n    //getPage();\r\n    end;\r\n\r\n    procedure onCardOutAnimationStart;\r\n    begin\r\n    console.log('AnimationStart2222222222');\r\n    Dom7(this).addClass('paused'); // pause the current animation 'cardOut effect'\r\n    //getPage();\r\n\r\n    end;\r\n\r\n    procedure onCardOutAnimationEnd;\r\n    begin\r\n    console.log('AnimationEnd card out');\r\n    Dom7('#p2js-page1-2').removeClass('nm');                                 // enable Cancel button\r\n    gotoPage('24');                                                       // show the page: 'Please inform your PIN'\r\n    TJSHTMLElement( Dom7('#p2js-page2b')['0'] ).style.webkitAnimationName := 'ani-p2js-page2b-0';  // change animation on the fly reverse effect\r\n    //getPage();\r\n\r\n    end;\r\n\r\n    procedure onCashOutAnimationStart;\r\n    begin\r\n    console.log('AnimationStart cash');\r\n    Dom7(this).addClass('paused');   // pause the current animation 'cardIn effect'\r\n\r\n    end;\r\n\r\n    procedure onCashOutAnimationEnd;\r\n    begin\r\n    console.log('AnimationStart cash');\r\n//\tDom7(this).addClass('paused');   // pause the current animation 'cardIn effect'\r\n\r\n    end;\r\n\r\n    procedure onLoaderAnimationStart;\r\n    begin\r\n    console.log('Processing your request...');\r\n    Dom7(this).addClass('paused');   // pause the current animation 'loader'\r\n//Dom7(this).addClass('nm');       // hide Loader animation\r\n\r\n    end;\r\n\r\n    procedure onLoaderAnimationEnd;\r\n    begin\r\n    console.log('Processing your request...');\r\n    Dom7(this).addClass('nm');              // show the loader animation\r\nDom7(this).addClass('paused');   // pause the current animation 'receipt'\r\n\r\n    end;\r\n\r\n    procedure onReceiptAnimationStart;\r\n    begin\r\n    console.log('take your receipt');\r\n    Dom7(this).addClass('paused');   // pause the current animation 'receipt'\r\n//Dom7(this).addClass('nm');       // hide Loader animation\r\n\r\n    end;\r\n\r\n    procedure onReceiptAnimationEnd;\r\n    begin\r\n    console.log('take your receipt');\r\n    //Dom7(this).addClass('nm');              // show the receipt animation\r\n    Dom7(this).addClass('paused');   // pause the current animation 'receipt'\r\n\r\n    end;\r\n\r\n    procedure onEnvelopeAnimationStart;\r\n    var el2: TJSElement;\r\n    begin\r\n    console.log('pulling the envelope');\r\n    //Dom7(this).addClass('paused');   // pause the current animation 'receipt'\r\n    //Dom7(this).addClass('nm');       // hide Loader animation\r\n    el2 := document.getElementById('p2js-page3a');\r\n    el2.classList.add('paused');\r\n\r\n    end;\r\n\r\n    procedure onEnvelopeAnimationEnd;\r\n    begin\r\n    console.log('pulling the envelope');\r\n    //Dom7(this).addClass('nm');              // show the receipt animation\r\n    //Dom7(this).addClass('paused');   // pause the current animation 'receipt'\r\n\r\n    end;\r\n\r\nbegin\r\n{ ╔═════════════════════╗\r\n  ║ CARD ANIMATION      ║\r\n  ╚═════════════════════╝ }\r\n\r\nPrefixedEvent(cardIn, 'AnimationStart', @onCardInAnimationStart);\r\nPrefixedEvent(cardIn, 'AnimationEnd', @onCardInAnimationEnd);\r\nPrefixedEvent(cardOut, 'AnimationStart', @onCardOutAnimationStart);\r\nPrefixedEvent(cardOut, 'AnimationEnd', @onCardOutAnimationEnd);\r\n\r\n{ ╔═════════════════════╗\r\n  ║ CASH ANIMATION      ║\r\n  ╚═════════════════════╝ }\r\nPrefixedEvent(cashOut, 'AnimationStart', @onCashOutAnimationStart); // on cash out\r\nPrefixedEvent(cashOut, 'AnimationEnd', @onCashOutAnimationEnd); // on cash out\r\n\r\n{ ╔═════════════════════╗\r\n  ║ LOADER ANIMATION    ║\r\n  ╚═════════════════════╝ }\r\nPrefixedEvent(loaderPG, 'AnimationStart', @onLoaderAnimationStart);\r\nPrefixedEvent(loaderPG, 'AnimationEnd', @onLoaderAnimationEnd);\r\n\r\n{ ╔═════════════════════╗\r\n  ║ RECEIPT ANIMATION   ║\r\n  ╚═════════════════════╝ }\r\nPrefixedEvent(receipt, 'AnimationStart', @onReceiptAnimationStart);\r\nPrefixedEvent(receipt, 'AnimationEnd', @onReceiptAnimationEnd);\r\n\r\n{ ╔═════════════════════╗\r\n  ║ ENVELOPE ANIMATION  ║\r\n  ╚═════════════════════╝ }\r\nPrefixedEvent(envelope, 'AnimationStart', @onEnvelopeAnimationStart);\r\nPrefixedEvent(envelope, 'AnimationEnd', @onEnvelopeAnimationEnd);\r\n\r\nEND;\r\n\r\n(*class procedure TBindEventPage.bindEvents(bindings: THandleArray);\r\nvar i : integer;\r\nbegin\r\n  for i := Low(bindings) to High(bindings) do\r\n  begin\r\n    Dom7(bindings[i].element).on(bindings[i].event, bindings[i].handler);\r\n  end;\r\nend;*)\r\n\r\n\r\nprocedure TBindEventPage.bindEvent(element: TJSElement; EventType: String; handler: JEventListenerHandler);\r\nvar\r\n  events : TStringDynArray;\r\n  i: Integer;\r\nbegin\r\n  events := TJSString(EventType).split(' ');\r\n\r\n  (* check if addeventlistener exists / For all major browsers *)\r\n  if (JElement(element).addEventListenerExists) then\r\n  begin\r\n    for i:= 0 to TJSArray(events).length - 1 do\r\n      JElement(element).addEventListener(events[i], handler, false);\r\n  end else\r\n  (* check if attachEvent exists / For IE 8 and earlier *)\r\n  if (JElement(element).attachEventExists) then\r\n  begin\r\n    for i:= 0 to TJSArray(events).length - 1 do\r\n      JElement(element).attachEvent('on'+events[i], handler);\r\n  end;\r\nend;\r\n\r\nprocedure TBindEventPage.bindEvents;\r\nbegin\r\n  bindEvent(document.querySelector('#p2js-page1-2'), 'click', @onCancelClick);\r\n  bindEvent(document.querySelector('#p2js-page2a'), 'click', @onCardInClick);\r\n  bindEvent(document.querySelector('#p2js-page2b'), 'click', @onCardOutClick);\r\nend;\r\n\r\n(*procedure TJFishFacts.bindEvent(element: TJSElement; EventType: String; handler: JEventListenerHandler);\r\nvar\r\n  events : TStringDynArray;\r\n   i: Integer;\r\n\r\nbegin\r\n  events := TJSString(EventType).split(' ');\r\n\r\n  (* check if addeventlistener exists / For all major browsers *)\r\n  if (element.addEventListenerExists) then\r\n  begin\r\n    for i:= 0 to TJSArray(events).length - 1 do\r\n      element.addEventListener(events[i], handler, false);\r\n  end else\r\n  (* check if attachEvent exists / For IE 8 and earlier *)\r\n  if (element.attachEventExists) then\r\n  begin\r\n    for i:= 0 to TJSArray(events).length - 1 do\r\n      element.attachEvent('on'+events[i], handler);\r\n  end;\r\nend; *)\r\n\r\n\r\n\r\n(*var cardIn   : TJSElement = document.getElementById('p2js-page2a');\r\nvar cardOut  : TJSElement = document.getElementById('p2js-page2b');\r\nvar loaderPG : TJSElement = document.getElementById('p2js-page4');\r\nvar cashOut  : TJSElement = document.getElementById('p2js-page5a');\r\nvar receipt  : TJSElement = document.getElementById('p2js-page23');\r\nvar envelope : TJSElement = document.getElementById('p2js-page3a');\r\n*)\r\n\r\nprocedure TBindEventPage.PrefixedEvent(element: TJSElement; &type: String; callback: TProcedureRef);\r\nvar\r\n  p: Integer;\r\n  pfx: TJSArray;\r\n  //const pfx = ('webkit', 'moz', 'MS', 'o', '');\r\n\r\nbegin\r\npfx := TJSArray.new('webkit', 'moz', 'MS', 'o', '');\r\nfor p := 0 to pfx.length do\r\nbegin\r\n  if not (pfx.Elements[p]) then\r\n    &type := TJSString(&type).toLowerCase();\r\n    element.addEventListener(String(pfx.Elements[p]) + &type, callback);\r\nend;\r\n\r\nend;\r\n\r\n\r\nprocedure teste(Sender: TObject);\r\nbegin\r\n  WriteLn('teste');\r\nend;\r\n\r\nfunction TBindEventPage.InitializeObject: TObject;\r\nbegin\r\n  cardIn   := document.getElementById('p2js-page2a');\r\n  cardOut  := document.getElementById('p2js-page2b');\r\n  loaderPG := document.getElementById('p2js-page4');\r\n  cashOut  := document.getElementById('p2js-page5a');\r\n  receipt  := document.getElementById('p2js-page23');\r\n  envelope := document.getElementById('p2js-page3a');\r\n\r\n  console.log('TBindEventPage.InitializeObject');\r\n  onBeforePageInit;\r\n  //bindEvents(bindings);\r\n  bindEvents;\r\n  onReceiptClick;\r\n  //PrefixedEvent(cardIn, 'AnimationStart', @teste);\r\n\r\nend;\r\n\r\n\r\n{ global methods }\r\nprocedure disableAllATMKeys();\r\nvar\r\n  k: integer;\r\n  old_element: TJSElement;\r\n  new_element: TJSNode;\r\n\r\nbegin\r\n//for (k = 2; k < 12; k++) {\r\n//Dom7(\"#p2js-page1-\" + k + \"\").addClass('nm');\r\n\r\n\t(* from 1 to 11 *)\r\n\r\n\t//document.getElementById(\"p2js-page1-\" + k + \"\").removeEventListener(\"click\",funcA);\r\n\r\n\r\n\tdocument.getElementById('p2js-page1-2').classList.add('nm'); // disable CANCEL button\r\n\tdocument.getElementById('p2js-page1-3').classList.add('nm'); // disable ENTER button\r\n\r\n\t(*\r\n\tI think that the fastest way to do this is to just clone the node, which will remove all event listeners:\r\n\tJust be careful, as this will also clear event listeners on all child elements of the node in question, so if you want to preserve that you'll have to resort to explicitly removing listeners one at a time.\r\n$('#myEl').replaceWith($('#myEl').clone());\r\n\t*)\r\nfor k := 4 to 11 do begin\r\n\told_element := document.getElementById('p2js-page1-' + IntToStr(k) + '');\r\n\tnew_element := old_element.cloneNode(true);\r\n\tTJSElement(new_element).classList.add('nm');  // disable | hide all ATM Navigations buttons 4-11\r\n\told_element.parentNode.replaceChild(new_element, old_element);\r\nend;\r\nend;\r\n\r\nprocedure enableATMKey(n: string);\r\nbegin\r\n  Dom7('#p2js-page1-' + n + '').removeClass('nm');\r\nend;\r\n\r\nprocedure disableATMKey(n: string);\r\nbegin\r\n  Dom7('#p2js-page1-' + n + '').addClass('nm');\r\nend;\r\n\r\nprocedure disableAllPages();\r\nvar\r\n  k: integer;\r\n\r\nbegin\r\n(* We need to display initially some basic widgets *)\r\n//for (var k = 1; k <= 5; k++) {\r\n//\tDom7(\"#p2js-page\" + k + \"\").removeClass('nm');\r\n//}\r\n\r\n(* Hide the following screens *)\r\nfor k := 4 to 36 do begin\r\n  Dom7('#p2js-page' + IntToStr(k) + '').addClass('nm');\r\nend;\r\nend;\r\n\r\nprocedure gotoPage(n: string);\r\nbegin\r\n  disableAllPages(); // clean up all pages\r\n  Dom7('#p2js-page' + n + '').removeClass('nm'); // show the Screen number n\r\n  getPage();\r\n  envelopeRestart;\r\nend;\r\n\r\n(*\r\n+-----------------------------+\r\n¦ restart ENVELOPE animation  ¦\r\n+-----------------------------+ *)\r\nprocedure envelopeRestart();\r\n  procedure init;\r\n  begin\r\n  TJSHTMLElement(Dom7('#p2js-page3a')['0']).style.webkitAnimation := '';\r\n  end;\r\n\r\nbegin\r\n// restart Envelope animation\r\nconsole.log('restart ENVELOPE animation');\r\nTJSHTMLElement( Dom7('#p2js-page3a')['0']).style.webkitAnimation := 'none';\r\n\r\nwindow.setTimeout(@init, 10);\r\nend;\r\n\r\n(*\r\n+------------------------------------+\r\n¦ restart logo Bank Smart animation  ¦\r\n+------------------------------------+ *)\r\nprocedure smartLogoANI();\r\n  procedure PROCESS_RESTART_LOGO;\r\n  var\r\n    defer: JPromise;\r\n\r\n  function _doTask1(aResponse: JSValue): JSValue;\r\n    begin\r\n      Dom7('#p2js-page1-1').addClass('nm');\r\n      result := delay(10);\r\n    end;\r\n\r\n    function _doTask2(aResponse: JSValue): JSValue;\r\n    begin\r\n      Dom7('#p2js-page1-1').removeClass('nm');\r\n      result := delay(10);\r\n    end;\r\n\r\n  begin\r\n    defer := Promise.resolve();\r\n    defer\r\n      .&then(@_doTask1)\r\n      .&then(@_doTask2);\r\n  end;\r\n\r\nbegin\r\n  PROCESS_RESTART_LOGO;\r\nend;\r\n\r\nprocedure startReceiptANI();\r\nbegin\r\n  Dom7('#p2js-page23').removeClass('nm');\r\nend;\r\n\r\nprocedure killENTER;\r\nvar\r\n  old_element: TJSElement;\r\n  new_element: TJSNode;\r\n\r\nbegin\r\nold_element := document.getElementById('p2js-page1-3');\r\nnew_element := old_element.cloneNode(true);\r\nTJSElement(new_element).classList.add('nm');  // disable | hide all ATM Navigations buttons 4-11\r\nold_element.parentNode.replaceChild(new_element, old_element);\r\nend;\r\n\r\nend.\r\n","unit System.Color;\r\n\r\n{$mode objfpc}\r\n\r\n\r\ninterface\r\n\r\nuses\r\n  Classes, SysUtils;\r\n\r\ntype\r\n  TColor = Integer;\r\n\r\nconst\r\n  clNone                 = TColor($1FFFFFFF);\r\n  clWhite                = TColor($FFFFFF);\r\n  clAliceBlue            = TColor($F0F8FF);\r\n  clAntiqueWhite         = TColor($FAEBD7);\r\n  clAqua                 = TColor($00FFFF);\r\n  clAquamarine           = TColor($7FFFD4);\r\n  clAzure                = TColor($F0FFFF);\r\n  clBeige                = TColor($F5F5DC);\r\n  clBisque               = TColor($FFE4C4);\r\n  clBlack                = TColor($000000);\r\n  clBlanchedAlmond       = TColor($FFEBCD);\r\n  clBlue                 = TColor($0000FF);\r\n  clBlueViolet           = TColor($8A2BE2);\r\n  clBrown                = TColor($A52A2A);\r\n  clBurlyWood            = TColor($DEB887);\r\n  clCadetBlue            = TColor($5F9EA0);\r\n  clChartreuse           = TColor($7FFF00);\r\n  clChocolate            = TColor($D2691E);\r\n  clCoral                = TColor($FF7F50);\r\n  clCornflowerBlue       = TColor($6495ED);\r\n  clCornsilk             = TColor($FFF8DC);\r\n  clCrimson              = TColor($DC143C);\r\n  clCyan                 = TColor($00FFFF);\r\n  clDarkBlue             = TColor($00008B);\r\n  clDarkCyan             = TColor($008B8B);\r\n  clDarkGoldenRod        = TColor($B8860B);\r\n  clDarkGray             = TColor($A9A9A9);\r\n  clDarkGrey             = TColor($A9A9A9);\r\n  clDarkGreen            = TColor($006400);\r\n  clDarkKhaki            = TColor($BDB76B);\r\n  clDarkMagenta          = TColor($8B008B);\r\n  clDarkOliveGreen       = TColor($556B2F);\r\n  clDarkorange           = TColor($FF8C00);\r\n  clDarkOrchid           = TColor($9932CC);\r\n  clDarkRed              = TColor($8B0000);\r\n  clDarkSalmon           = TColor($E9967A);\r\n  clDarkSeaGreen         = TColor($8FBC8F);\r\n  clDarkSlateBlue        = TColor($483D8B);\r\n  clDarkSlateGray        = TColor($2F4F4F);\r\n  clDarkSlateGrey        = TColor($2F4F4F);\r\n  clDarkTurquoise        = TColor($00CED1);\r\n  clDarkViolet           = TColor($9400D3);\r\n  clDeepPink             = TColor($FF1493);\r\n  clDeepSkyBlue          = TColor($00BFFF);\r\n  clDimGray              = TColor($696969);\r\n  clDimGrey              = TColor($696969);\r\n  clDodgerBlue           = TColor($1E90FF);\r\n  clFireBrick            = TColor($B22222);\r\n  clFloralWhite          = TColor($FFFAF0);\r\n  clForestGreen          = TColor($228B22);\r\n  clFuchsia              = TColor($FF00FF);\r\n  clGainsboro            = TColor($DCDCDC);\r\n  clGhostWhite           = TColor($F8F8FF);\r\n  clGold                 = TColor($FFD700);\r\n  clGoldenRod            = TColor($DAA520);\r\n  clGray                 = TColor($808080);\r\n  clGrey                 = TColor($808080);\r\n  clGreen                = TColor($008000);\r\n  clGreenYellow          = TColor($ADFF2F);\r\n  clHoneyDew             = TColor($F0FFF0);\r\n  clHotPink              = TColor($FF69B4);\r\n  clIndianRed            = TColor($CD5C5C);\r\n  clIndigo               = TColor($4B0082);\r\n  clIvory                = TColor($FFFFF0);\r\n  clKhaki                = TColor($F0E68C);\r\n  clLavender             = TColor($E6E6FA);\r\n  clLavenderBlush        = TColor($FFF0F5);\r\n  clLawnGreen            = TColor($7CFC00);\r\n  clLemonChiffon         = TColor($FFFACD);\r\n  clLightBlue            = TColor($ADD8E6);\r\n  clLightCoral           = TColor($F08080);\r\n  clLightCyan            = TColor($E0FFFF);\r\n  clLightGoldenRodYellow = TColor($FAFAD2);\r\n  clLightGray            = TColor($D3D3D3);\r\n  clLightGrey            = TColor($D3D3D3);\r\n  clLightGreen           = TColor($90EE90);\r\n  clLightPink            = TColor($FFB6C1);\r\n  clLightSalmon          = TColor($FFA07A);\r\n  clLightSeaGreen        = TColor($20B2AA);\r\n  clLightSkyBlue         = TColor($87CEFA);\r\n  clLightSlateGray       = TColor($778899);\r\n  clLightSlateGrey       = TColor($778899);\r\n  clLightSteelBlue       = TColor($B0C4DE);\r\n  clLightYellow          = TColor($FFFFE0);\r\n  clLime                 = TColor($00FF00);\r\n  clLimeGreen            = TColor($32CD32);\r\n  clLinen                = TColor($FAF0E6);\r\n  clMagenta              = TColor($FF00FF);\r\n  clMaroon               = TColor($800000);\r\n  clMediumAquaMarine     = TColor($66CDAA);\r\n  clMediumBlue           = TColor($0000CD);\r\n  clMediumOrchid         = TColor($BA55D3);\r\n  clMediumPurple         = TColor($9370D8);\r\n  clMediumSeaGreen       = TColor($3CB371);\r\n  clMediumSlateBlue      = TColor($7B68EE);\r\n  clMediumSpringGreen    = TColor($00FA9A);\r\n  clMediumTurquoise      = TColor($48D1CC);\r\n  clMediumVioletRed      = TColor($C71585);\r\n  clMidnightBlue         = TColor($191970);\r\n  clMintCream            = TColor($F5FFFA);\r\n  clMistyRose            = TColor($FFE4E1);\r\n  clMoccasin             = TColor($FFE4B5);\r\n  clNavajoWhite          = TColor($FFDEAD);\r\n  clNavy                 = TColor($000080);\r\n  clOldLace              = TColor($FDF5E6);\r\n  clOlive                = TColor($808000);\r\n  clOliveDrab            = TColor($6B8E23);\r\n  clOrange               = TColor($FFA500);\r\n  clOrangeRed            = TColor($FF4500);\r\n  clOrchid               = TColor($DA70D6);\r\n  clPaleGoldenRod        = TColor($EEE8AA);\r\n  clPaleGreen            = TColor($98FB98);\r\n  clPaleTurquoise        = TColor($AFEEEE);\r\n  clPaleVioletRed        = TColor($D87093);\r\n  clPapayaWhip           = TColor($FFEFD5);\r\n  clPeachPuff            = TColor($FFDAB9);\r\n  clPeru                 = TColor($CD853F);\r\n  clPink                 = TColor($FFC0CB);\r\n  clPlum                 = TColor($DDA0DD);\r\n  clPowderBlue           = TColor($B0E0E6);\r\n  clPurple               = TColor($800080);\r\n  clRed                  = TColor($FF0000);\r\n  clRosyBrown            = TColor($BC8F8F);\r\n  clRoyalBlue            = TColor($4169E1);\r\n  clSaddleBrown          = TColor($8B4513);\r\n  clSalmon               = TColor($FA8072);\r\n  clSandyBrown           = TColor($F4A460);\r\n  clSeaGreen             = TColor($2E8B57);\r\n  clSeaShell             = TColor($FFF5EE);\r\n  clSienna               = TColor($A0522D);\r\n  clSilver               = TColor($C0C0C0);\r\n  clSkyBlue              = TColor($87CEEB);\r\n  clSlateBlue            = TColor($6A5ACD);\r\n  clSlateGray            = TColor($708090);\r\n  clSlateGrey            = TColor($708090);\r\n  clSnow                 = TColor($FFFAFA);\r\n  clSpringGreen          = TColor($00FF7F);\r\n  clSteelBlue            = TColor($4682B4);\r\n  clTan                  = TColor($D2B48C);\r\n  clTeal                 = TColor($008080);\r\n  clThistle              = TColor($D8BFD8);\r\n  clTomato               = TColor($FF6347);\r\n  clTurquoise            = TColor($40E0D0);\r\n  clViolet               = TColor($EE82EE);\r\n  clWheat                = TColor($F5DEB3);\r\n  clWhiteSmoke           = TColor($F5F5F5);\r\n  clYellow               = TColor($FFFF00);\r\n  clYellowGreen          = TColor($9ACD32);\r\n  clMoneyGreen           = TColor($C0DCC0);\r\n  clCream                = TColor($F0FBFF);\r\n  clMedGray              = TColor($A4A0A0);\r\n\r\nimplementation\r\n\r\nend.\r\n\r\n","unit uPages;\r\n\r\n{$mode objfpc}{$H+}\r\n\r\ninterface\r\n\r\nuses\r\n  Classes, SysUtils, JS, Web, Math,\r\n  ubindElementAction, uPromises, uAccount, uDOM, System.Color;\r\n\r\ntype\r\n\r\n  { TPage }\r\n\r\n  TPage = class\r\n  private\r\n  { private declarations }\r\n    class var _SavingsAccount: TAccount;\r\n    class var _ChequingAccount: TAccount;\r\n  protected\r\n  { protected declarations }\r\n    class procedure showBalance(ATexto: String; ACor : Integer);\r\n    //class procedure withdrawalStartTransaction(edValorSq: string);\r\n    class function withdrawalStartTransaction(edValorSq: string): boolean;\r\n    class function transferFunds(FromAccount: TAccount; ToAccount: TAccount; amount: Float): boolean;\r\n    class procedure depositStartTransaction(edValorDep: string);\r\n  public\r\n    class function InitializeObject: TObject;\r\n  //published\r\n    class procedure Page4;\r\n    class procedure Page5;\r\n    class procedure Page6;\r\n    class procedure Page7;\r\n    class procedure Page8;\r\n    class procedure Page9;\r\n    class procedure Page10;\r\n    class procedure Page11;\r\n    class procedure Page12;\r\n    class procedure Page13;\r\n    class procedure Page14;\r\n    class procedure Page15;\r\n    class procedure Page16;\r\n    class procedure Page17;\r\n    class procedure Page18;\r\n    class procedure Page19;\r\n    class procedure Page20;\r\n    class procedure Page21;\r\n    class procedure Page22;\r\n    class procedure Page23;\r\n    class procedure Page24;\r\n    class procedure Page25;\r\n    class procedure Page26;\r\n    class procedure Page27;\r\n    class procedure Page28;\r\n    class procedure Page29;\r\n    class procedure Page30;\r\n    class procedure Page31;\r\n    class procedure Page32;\r\n    class procedure Page33;\r\n    class procedure Page34;\r\n    class procedure Page35;\r\n    class procedure Page36;\r\n\r\n  end;\r\n\r\nimplementation\r\n\r\nuses\r\n  Main;\r\n\r\n(*\r\n+------------------------------------------------------------------------------+\r\n¦ Takes the withdrawal amount value  and rounds up to the next multiple of $20 ¦\r\n+------------------------------------------------------------------------------+ *)\r\nfunction roundWithdrawalAmount(aValue: integer): integer;\r\nbegin\r\n  result := Ceil(aValue/20)*20;\r\nend;\r\n\r\nfunction checkWithdrawalAmountMultiple20(aValue: integer): boolean;\r\nbegin\r\n  //result := if aValue mod 20 = 0 then true else false;\r\n  if aValue mod 20 = 0 then\r\n    Result := true else\r\n    Result := false;\r\nend;\r\n\r\nfunction parseFloat(n: String): TNumber; external name 'parseFloat';\r\n\r\nfunction formatAmountValue(amountValue: String): String;\r\nbegin\r\n  result := '$'+ parseFloat(amountValue).toFixed(2);\r\n\r\nend;\r\n\r\n{ TPage }\r\n\r\nclass procedure TPage.showBalance(ATexto: String; ACor: Integer);\r\nvar\r\n    lCor : Integer;\r\n    v0,v1,v2 : String;\r\n    tab: TJSElement;\r\n    rowCount: integer;\r\n    row: TJSHTMLTableRowElement;\r\nbegin\r\n  if (_SavingsAccount.getBalance = 0.0) then\r\n    lCor := 16711680 // $FF0000//clGray\r\n  else\r\n  if (_SavingsAccount.getBalance > 0.0) then\r\n    lCor := clHoneyDew\r\n  else\r\n    lCor := clGold;\r\n\r\n  _SavingsAccount.ApplyReturnRate;\r\n\r\nv0 := ATexto;\r\nv1 := '<font color=\"red\">'+ _SavingsAccount.getAccountState.ClassName+ '</font>';\r\nv2 := formatAmountValue( FloatToStr(_SavingsAccount.getBalance) );\r\n//showMessage(v2);\r\n\r\n\r\n  tab := document.getElementById('nameTable');\r\n  rowCount := TJSHTMLTableElement(tab).rows.length;\r\n  row := TJSHTMLTableSectionElement(tab).insertRow(rowCount);\r\n\r\n  row.insertCell(0).innerHTML := TJSDate.New().toLocaleTimeString();\r\n  row.insertCell(1).innerHTML := v0;\r\n  row.insertCell(2).innerHTML := v1;\r\n  row.insertCell(3).innerHTML := v2;\r\n\r\nend;\r\n\r\nclass procedure TPage.depositStartTransaction(edValorDep: string);\r\nvar lValor : Float;\r\nbegin\r\n  if (_SavingsAccount = Nil) then\r\n    Exit;\r\n\r\n  try\r\n    lValor := StrToFloat (edValorDep);\r\n//    AdicLinhaExtrato (edValorDep.Text, clBlue);\r\n    _SavingsAccount.Deposit(lValor);\r\n//    MostraSaldo('<font color=\"green\">+'+edValorDep+'</font>', clBlue);\r\n      showBalance(formatAmountValue(edValorDep), clRed);\r\n  except\r\n    on Exc : Exception do\r\n      console.log (Exc.Message);\r\n  end;\r\nend;\r\n\r\nclass function TPage.withdrawalStartTransaction(edValorSq: string): boolean;\r\nvar lValor : Float;\r\nbegin\r\n  if (_SavingsAccount = nil) then\r\n    Exit;\r\n  try\r\n    lValor := StrToFloat(edValorSq);\r\n\r\n   if (_SavingsAccount.getBalance < lValor) or  (_SavingsAccount.getBalance < 0) then\r\n     raise EWithdrawError.Create(_SavingsAccount.getBalance);\r\n     result := true;\r\n     _SavingsAccount.Withdrawal(lValor);\r\n     showBalance('<font color=\"red\">-'+formatAmountValue(edValorSq)+'</font>', clRed);\r\n  except\r\n     on e: EWithdrawError do begin\r\n       console.log('The account has insufficient balance: $'+FloatToStr(e.Saldo) );\r\n       result := false;\r\n     end;\r\n  end;\r\n\r\nend;\r\n\r\nclass function TPage.transferFunds(FromAccount: TAccount; ToAccount: TAccount; amount: Float): boolean;\r\nbegin\r\n  if (FromAccount = nil) then\r\n    Exit;\r\n  try\r\n   if (FromAccount.getBalance < amount) or  (FromAccount.getBalance < 0) then\r\n     raise EWithdrawError.Create(FromAccount.getBalance);\r\n     result := true;\r\n     FromAccount.Withdrawal(amount);\r\n     ToAccount.deposit(amount);\r\n     showBalance('<font color=\"green\">-'+formatAmountValue(FloatToStr(amount))+'</font>', clRed);\r\n\r\n  except\r\n     on e: EWithdrawError do begin\r\n       console.log('The account has insufficient balance: $'+FloatToStr(e.Saldo) );\r\n       result := false;\r\n     end;\r\n  end;\r\n\r\nend;\r\n\r\n{ ╔═══ TPage.InitializeObject ════════════════╗\r\n  ║                                           ║\r\n  ║                                           ║\r\n  ╚═══════════════════════════════════════════╝ }\r\nclass function TPage.InitializeObject: TObject;\r\nbegin\r\n  console.log('TPage.InitializeObject');\r\n\r\n  _SavingsAccount  := TAccount.Create('warleyalex');\r\n  _ChequingAccount := TAccount.Create('warleyalex');\r\n  //depositStartTransaction('0'); // initial amount\r\n  _SavingsAccount.setBalance(1000);  // initial Balance amount $1000\r\n  _ChequingAccount.setBalance(300);  // initial Balance amount $300\r\nend;\r\n\r\n(*\r\n+----------------------+\r\n¦ 4   Loader animation ¦\r\n+----------------------+ *)\r\n\r\nprocedure ProcessLoaderAnimation;\r\n  function _doTask1(aResponse: JSValue): JSValue;\r\n  begin\r\n    console.log('Please wait more 20ms');\r\n    Dom7('#p2js-page4').removeClass('nm');  // hide cash container\r\n    result := delay(20);\r\n  end;\r\n\r\n  function _doTask2(aResponse: JSValue): JSValue;\r\n  begin\r\n    console.log('wait only more 10ms');\r\n    Dom7('#p2js-page4').removeClass('paused');  // run cash animation\r\n    result := delay(10);\r\n  end;\r\n\r\nvar\r\n  defer: JPromise;\r\nbegin\r\n  defer := Promise.resolve();\r\n  defer\r\n    .&then(@_doTask1)\r\n    .&then(@_doTask2);\r\nend;\r\n\r\nclass procedure TPage.Page4;\r\n(*\r\n  procedure First;\r\n  begin\r\n    Dom7('#p2js-page4').removeClass('nm');  // hide cash container\r\n  end;\r\n\r\n  procedure Second;\r\n  begin\r\n    Dom7('#p2js-page4').removeClass('paused');  // run cash animation container\r\n  end;\r\n\r\nbegin\r\n      console.log('TELA 4');\r\n\r\nwindow.setTimeout(@First, 20);\r\nwindow.setTimeout(@Second, 10);\r\n*)\r\n\r\nbegin\r\n  ProcessLoaderAnimation;\r\nend;\r\n\r\n(*\r\n+--------------------+\r\n¦ 5   Cash animation ¦\r\n+--------------------+ *)\r\nclass procedure TPage.Page5;\r\nbegin\r\n\tconsole.log('TELA 5');\r\n\t(*\r\n\t\tsetTimeout(function () {\r\n\t\t  Dom7('#p2js-page5').removeClass('nm');\r\n\t\t  Dom7('#p2js-page5a').removeClass('nm');\r\n\t      Dom7('#p2js-page5a').removeClass('paused');\r\n\t\t}, 100);\r\n\r\n\r\n\tDom7('#p2js-page5a')[0].click();\t*)\r\nend;\r\n\r\n(*\r\n+-------------------------+\r\n¦ 6   Please insert card. ¦\r\n+-------------------------+*)\r\nclass procedure TPage.Page6;\r\nbegin\r\n\tconsole.log('TELA 6');\r\nend;\r\n\r\n(*\r\n+---------------------------+\r\n¦ 7   Select a transaction: ¦\r\n+---------------------------+ *)\r\nclass procedure TPage.Page7;\r\n\r\n  procedure Withdrawal;\r\n  begin\r\n    console.log('Withdrawal');\r\n    gotoPage('9');  // From which account?\r\n  end;\r\n\r\n  procedure Transfer;\r\n  begin\r\n    console.log('Transfer');\r\n    gotoPage('36');      // TRANSFER: From which account?\r\n  end;\r\n\r\n  procedure BillPayment;\r\n  begin\r\n    console.log('Bill Payment');\r\n    gotoPage('35');        // BILL PAYMENT: From which account?\r\n  end;\r\n\r\n  procedure Deposit;\r\n  begin\r\n    console.log('Deposit');\r\n    gotoPage('26');  // Inform the amount and press ENTER\r\n  end;\r\n\r\n  procedure Extract;\r\n  begin\r\n    console.log('Extract');\r\n    gotoPage('27');  // Generate Extract | Bank Statement\r\n    //return false;\r\n  end;\r\n\r\n  procedure AccountBalance;\r\n  begin\r\n    console.log('Account Balance');\r\n    gotoPage('22');  // Your account balance is: $x Would you like a receipt?\r\n  end;\r\n\r\nbegin\r\n(*\r\n+------------------------------------------------+\r\n¦ [CANCEL] '2'              ¦ [ENTER] '3'        ¦\r\n¦ [L1]  '8'                 ¦ [R1] '4'           ¦\r\n¦ [L2]  '9'   Withdrawal    ¦ [R2] '5' Deposit   ¦\r\n¦ [L3]  '10'  Transfer      ¦ [R3] '6' Statement ¦\r\n¦ [L4]  '11'  Bill Payment  ¦ [R4] '7' Balance   ¦\r\n+------------------------------------------------+\r\n*)\r\n  console.log('TELA 7');\r\n  disableAllATMKeys();     // disable ATM Navigation buttons, ENTER inclusive\r\n  enableATMKey('2');       // Enable Cancel key\r\n  enableATMKey('9');       // Left 2 Withdrawal\r\n  enableATMKey('10');      // Left 3 Transfer\r\n  enableATMKey('11');      // Left 4 Bill payment\r\n\r\n\r\n  Dom7('#p2js-page1-9').once('click', @withdrawal);    // L2 Withdrawal\r\n  Dom7('#p2js-page1-10').once('click', @Transfer);     // L3 Transfer\r\n  Dom7('#p2js-page1-11').once('click', @BillPayment);  // L4 Bill Payment\r\n\r\n\r\n  enableATMKey('5');      // Right 2 Deposit\r\n  enableATMKey('6');      // Right 3 Bank Statement\r\n  enableATMKey('7');      // Right 4 Balance account\r\n\r\n  Dom7('#p2js-page1-5').once('click', @Deposit);        // R2  Deposit\r\n  Dom7('#p2js-page1-6').once('click', @Extract);         // R3  BANK STATEMENT ACCOUNT / EXTRACT\r\n  Dom7('#p2js-page1-7').once('click', @AccountBalance);  // R4  Balance\r\n\r\n\r\nend;\r\n\r\n(*\r\n+--------------------+\r\n¦ 8   Select amount: ¦\r\n+--------------------+*)\r\nclass procedure TPage.Page8;\r\n\r\n  procedure enableATMKeys;\r\n  begin\r\n    enableATMKey('9');       // Left 2 \t$20\r\n    enableATMKey('10');      // Left 3\t$60\r\n    enableATMKey('11');      // Left 4 \t$100\r\n    enableATMKey('5');       // Right 2\t$140\r\n    enableATMKey('6');       // Right 2\t$200\r\n    enableATMKey('7');       // Right 4\tAnother amount\r\n  end;\r\n\r\n  procedure L2;\r\n  begin\r\n    console.log('$20');\r\n    Dom7('#totalAmount').val( '20' );  // set widthdrawal amount to $20\r\n    gotoPage('14'); // to confirm this withdrawal press ENTER\r\n  end;\r\n\r\n  procedure L3;\r\n  begin\r\n    console.log('$60');\r\n    Dom7('#totalAmount').val( '60' );  // set widthdrawal amount to $60\r\n    gotoPage('14'); // to confirm this withdrawal press ENTER\r\n  end;\r\n\r\n  procedure L4;\r\n  begin\r\n    console.log('$100');\r\n    Dom7('#totalAmount').val( '100' );  // set widthdrawal amount to $100\r\n    gotoPage('14'); // to confirm this withdrawal press ENTER\r\n  end;\r\n\r\n  procedure R2;\r\n  begin\r\n    console.log('$140');\r\n    Dom7('#totalAmount').val( '140' );  // set widthdrawal amount to $140\r\n    gotoPage('14'); // to confirm this withdrawal press ENTER\r\n  end;\r\n\r\n  procedure R3;\r\n  begin\r\n    console.log('$200');\r\n    Dom7('#totalAmount').val( '200' );  // set widthdrawal amount to $200\r\n    gotoPage('14'); // to confirm this withdrawal press ENTER\r\n  end;\r\n\r\n  procedure R4;\r\n  begin\r\n    console.log('another amount');\r\n    gotoPage('11'); // enter the amount and press ENTER\r\n  end;\r\n\r\nbegin\r\n\tconsole.log('TELA 8');\r\n\tdisableAllATMKeys();     // disable ATM Navigation buttons\r\n\tenableATMKey('2');       // Enable Cancel key\r\n        window.setTimeout(@enableATMKeys , 1000);\r\n\r\n\tDom7('#p2js-page1-9').once('click',  @L2);  // L2\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3\r\n\tDom7('#p2js-page1-11').once('click', @L4);  // L4\r\n\r\n        Dom7('#p2js-page1-5').once('click', @R2);  // R2\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3\r\n\tDom7('#p2js-page1-7').once('click', @R4);  // R4\r\nend;\r\n\r\n(*\r\n+-------------------------+\r\n¦ 9   From which account? ¦\r\n+-------------------------+ *)\r\nclass procedure TPage.Page9;\r\n\r\n  procedure L2;\r\n  begin\r\n    console.log('Savings');\r\n    console.log('Savings account has: '+ FloatToStr(_SavingsAccount.getBalance));\r\n    gotoPage('10'); // The operator of this ABM charge...\r\n  end;\r\n\r\n  procedure R2;\r\n  begin\r\n    console.log('Chequing');\r\n    console.log('Checking account has: '+ FloatToStr(_ChequingAccount.getBalance));\r\n  end;\r\n\r\nbegin\r\n\tconsole.log('TELA 9');\r\n        disableAllATMKeys();     // disable ATM Navigation buttons\r\n\tenableATMKey('2');       // Enable Cancel key\r\n\tenableATMKey('9');       // Left 2\r\n\tenableATMKey('5');       // Right 2\r\n\r\n\tDom7('#p2js-page1-9').once('click', @L2);  // L2  Savings\r\n\tDom7('#p2js-page1-5').once('click', @R2);  // R2  Chequing\r\nend;\r\n\r\n(*\r\n+------------------------------------------------------------+\r\n¦ 10   The operator of this ABM charges the following fee... ¦\r\n+------------------------------------------------------------+*)\r\nclass procedure TPage.Page10;\r\n  procedure L4;\r\n  begin\r\n    console.log('I accept');\r\n    gotoPage('8'); // Select amount:\r\n  end;\r\n\r\n  procedure R4;\r\n  begin\r\n    console.log('Cancel button');\r\n    //Dom7('#p2js-page1-2').click();\r\n    gotoPage('18'); // Please remove your card.\r\n  end;\r\n\r\nbegin\r\n\tconsole.log('TELA 10');\r\n  disableAllATMKeys();      // disable ATM Navigation buttons\r\n\tenableATMKey('2');        // Enable Cancel key\r\n\tenableATMKey('11');       // Left 4\t'Accept'\r\n\tenableATMKey('7');        // Right 4 'Cancel'\r\n\r\n\tDom7('#p2js-page1-11').once('click', @L4);  // L4  Accept\r\n\tDom7('#p2js-page1-7').once('click', @R4);  // R4  Cancel\r\nend;\r\n\r\n(*\r\n11   Enter the amount and press ENTER *)\r\nclass procedure TPage.Page11;\r\n  procedure ENTER_KEY;\r\n  var\r\n     aValue: JSValue;\r\n\r\n  begin\r\n    console.log('I accept, that is correct the amount.');\r\n    aValue:= Dom7('#totalAmount').val();\r\n    if aValue = '' then exit;\r\n    if checkWithdrawalAmountMultiple20(Integer(aValue)) = false then\r\n    gotoPage('12') else\r\n    gotoPage('14'); // to confirm this withdrawal press Enter\r\n\r\n    //  console.log( roundWithdrawalAmount(StrToInt(aValue)) );\r\n    //  console.log ( checkWithdrawalAmountMultiple20(StrToInt(aValue)) );\r\n\r\n        (* TODO\r\n    'The amount entered is not multiple of $20'\r\n    \t    'Daily withdrawal limit exceeded'\r\n        *)\r\n        //gotoPage('14'); // to confirm this withdrawal press Enter\r\n        //gotoPage('8'); // Select amount:\r\n\r\n  end;\r\n\r\n  procedure R4;\r\n  begin\r\n\r\n  end;\r\n\r\nbegin\r\n\tconsole.log('TELA 11');\r\n  disableAllATMKeys();      // disable ATM Navigation buttons\r\n\tenableATMKey('2');        // Enable Cancel key\r\n\tenableATMKey('3');        // Enable ENTER key\r\n\t// enableATMKey('7');     // Right 4 'Change amount'\r\n\r\n\tDom7('#p2js-page1-3').once('click', @ENTER_KEY);  // ENTER KEY\r\n\r\nend;\r\n\r\n(*\r\n+------------------------------------------------+\r\n¦ 12   The amount entered is not multiple of $20 ¦\r\n+------------------------------------------------+*)\r\nclass procedure TPage.Page12;\r\n  procedure L3;\r\n  var\r\n     aValue: JSValue;\r\n  begin\r\n    console.log('YES, I want another amount value');\r\n    (* rounds up the withdrawal value to neasted multiple of $20 *)\r\n    aValue := Dom7('#totalAmount').val();\r\n    Dom7('#totalAmount').val( roundWithdrawalAmount(Integer(aValue)) );\r\n    gotoPage('11'); // Enter the amount and press ENTER\r\n  end;\r\n\r\n  procedure R3;\r\n  begin\r\n    console.log('No, that is all');\r\n    gotoPage('18'); // Please remove your card.\r\n  end;\r\n\r\nbegin\r\n\tconsole.log('TELA 12');\r\n  disableAllATMKeys();      // disable ATM Navigation buttons\r\n\tenableATMKey('2');        // Enable Cancel key\r\n\tenableATMKey('10');       // Left 3\t'Yes'  // for another transaction\r\n\tenableATMKey('6');        // Right 3 'No'  // for another transaction\r\n\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3  'YES' for another transaction\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3  'No' for another transaction\r\n\r\n\r\n\r\n\r\nend;\r\n\r\n(*\r\n+---------------------------------------+\r\n¦ 13   Daily withdrawal limit exceeeded ¦\r\n+---------------------------------------+*)\r\nclass procedure TPage.Page13;\r\n  procedure L3;\r\n  var aValue: JSValue;\r\n  begin\r\n    console.log('YES, I want another amount value');\r\n    (* rounds up the withdrawal value to neasted multiple of $20 *)\r\n    aValue := Dom7('#totalAmount').val();\r\n    Dom7('#totalAmount').val( roundWithdrawalAmount(Integer(aValue)) );\r\n\r\n    gotoPage('11'); // Enter the amount and press ENTER\r\n\r\n  end;\r\n\r\n  procedure R3;\r\n  begin\r\n    console.log('No, that is all');\r\n    gotoPage('18'); // Please remove your card.\r\n   end;\r\n\r\nbegin\r\n\tconsole.log('TELA 13');\r\n  disableAllATMKeys();      // disable ATM Navigation buttons\r\n\tenableATMKey('2');        // Enable Cancel key\r\n\tenableATMKey('10');       // Left 3\t'Yes'  // for another transaction\r\n\tenableATMKey('6');        // Right 3 'No'  // for another transaction\r\n\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3  'YES' for another amout value\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3  'No' for another value\r\n\r\n\r\nend;\r\n\r\n(*\r\n+---------------------------------------------+\r\n¦ 14   to confirm this withdrawal press ENTER ¦\r\n+---------------------------------------------+*)\r\nclass procedure TPage.Page14;\r\nvar\r\n  aValue: String;\r\n\r\n  procedure CHANGE_AMOUNT;\r\n  begin\r\n    console.log('hum, there are something wrong with the amount entered.');\r\n    //gotoPage('11'); // to confirm this withdrawal press Enter\r\n    gotoPage('8');    // select amount:\r\n  end;\r\n\r\n  procedure PROCESS_REQUEST;\r\n  var\r\n    defer: JPromise;\r\n\r\n  function _doTask1(aResponse: JSValue): JSValue;\r\n    begin\r\n      gotoPage('4'); // Processing your request...\r\n      result := delay(3000);\r\n    end;\r\n\r\n    function _doTask2(aResponse: JSValue): JSValue;\r\n    begin\r\n      gotoPage('15'); // please remove your cash. Would you like a receipt\r\n      result := delay(1000);\r\n    end;\r\n\r\n  begin\r\n    defer := Promise.resolve();\r\n    defer\r\n      .&then(@_doTask1)\r\n      .&then(@_doTask2);\r\n  end;\r\n\r\n\r\n  procedure ENTER_KEY;\r\n  begin\r\n      console.log('I accept, that is correct the amount.');\r\n      withdrawalStartTransaction( aValue );\r\n      //gotoPage('4'); // loader animation\r\n      //gotoPage('15'); // please remove your cash. Would you like a receipt\r\n      PROCESS_REQUEST;\r\n  end;\r\n\r\nbegin\r\n  Console.log('TELA 14');\r\n  aValue := String( Dom7('#totalAmount').val() );\r\n  KillENTER;\r\n\r\n  Dom7('#p2js-page14c').text('Amount: ' + formatAmountValue(aValue) );\r\n  disableAllATMKeys();      // disable ATM Navigation buttons\r\n  enableATMKey('2');        // Enable Cancel key\r\n  enableATMKey('3');        // Enable ENTER key\r\n  enableATMKey('7');        // Right 4 'Change amount'\r\n\r\n\r\n  Dom7('#p2js-page1-7').once('click', @CHANGE_AMOUNT);  // Change amount\r\n  Dom7('#p2js-page1-3').once('click', @ENTER_KEY);  // ENTER KEY\r\n\r\nend;\r\n\r\n(*\r\n+---------------------------------------------------------+\r\n¦ 15   Please remove your cash. Would you like a receipt? ¦\r\n+---------------------------------------------------------+*)\r\nvar\r\n  this: TJSHTMLElement; external name 'this';\r\n\r\nclass procedure TPage.Page15;\r\n  procedure PROCESS_CASH_SPEW_OUT;\r\n  var\r\n    defer: JPromise;\r\n\r\n  function _doTask1(aResponse: JSValue): JSValue;\r\n    begin\r\n      Dom7('#p2js-page5').removeClass('nm');  // hide cash container\r\n      Dom7('#p2js-page5a').removeClass('nm');  // hide cash animation\r\n      console.log('first');\r\n      result := delay(1000);\r\n    end;\r\n\r\n    function _doTask2(aResponse: JSValue): JSValue;\r\n    begin\r\n      console.log('second');\r\n      Dom7('#p2js-page5').removeClass('paused');  // run cash animation container\r\n      Dom7('#p2js-page5a').removeClass('paused'); // run cash animation main\r\n      result := delay(1000);\r\n    end;\r\n\r\n  begin\r\n    defer := Promise.resolve();\r\n    defer\r\n      .&then(@_doTask1)\r\n      .&then(@_doTask2);\r\n  end;\r\n\r\n  procedure PROCESS_RECEIPT;\r\n  var\r\n    defer: JPromise;\r\n\r\n    function _doTask1(aResponse: JSValue): JSValue;\r\n    begin\r\n      console.log('starting receipt');\r\n      gotoPage('17'); // Please remove your receipt, another transaction?\r\n      result := delay(1000);\r\n    end;\r\n\r\n    function _doTask2(aResponse: JSValue): JSValue;\r\n    begin\r\n      console.log('going to screen 17');\r\n      startReceiptANI();\r\n      result := delay(1000);\r\n    end;\r\n\r\n  begin\r\n    defer := Promise.resolve();\r\n    defer\r\n      .&then(@_doTask1)\r\n      .&then(@_doTask2);\r\n  end;\r\n\r\n\r\n  var\r\n    me: TJSHTMLElement;\r\n\r\n  procedure CASH_ONCLICK;\r\n\r\n    procedure PROCESS_AFTER_CASH_OUT;\r\n    begin\r\n  \tme.style.webkitAnimation := '';\r\n  \tDom7('#p2js-page5a').addClass('nm');\r\n    end;\r\n\r\n  begin\r\n    // restart animation\r\n    console.log('restart CASH animation');\r\n    me := this;\r\n    //Dom7(this).addClass('nm');\r\n    //var me = this;\r\n    //this.style.webkitAnimation := 'none';\r\n    this.style.webkitAnimation:= 'none';\r\n    window.setTimeout(@PROCESS_AFTER_CASH_OUT, 10);\r\n\r\n  end;\r\n\r\n  procedure R3;\r\n  begin\r\n    console.log('NO');\r\n    gotoPage('16'); // Another transaction?\r\n\r\n  end;\r\n\r\n  procedure L3;\r\n  begin\r\n  console.log('YES');\r\n  PROCESS_RECEIPT;\r\n  end;\r\n\r\nbegin\r\n\r\n\tconsole.log('TELA 15');\r\n  disableAllATMKeys();      // disable ATM Navigation buttons\r\n\tenableATMKey('2');        // Enable Cancel key\r\n\tenableATMKey('3');        // Enable ENTER key\r\n\tenableATMKey('10');       // Left 3  'Yes' // Would you like a receipt?\r\n\tenableATMKey('6');        // Right 3 'No'  // Would you like a receipt?\r\n\r\n\t//gotoPage('5');  // Cash animation.\r\n\t(* CASH SPEW OUT ANIMATION *)\r\n        PROCESS_CASH_SPEW_OUT;\r\n\r\n\t(* Cash onClick *)\r\n\tDom7('#p2js-page5a').once('click', @CASH_ONCLICK);\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3 NO\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3 YES\r\n\r\nend;\r\n\r\n\r\n(*\r\n+---------------------------+\r\n¦ 16   Another Transaction? ¦\r\n+---------------------------+*)\r\nclass procedure TPage.Page16;\r\n  procedure L3;\r\n  begin\r\n    console.log('YES, I want to do something else');\r\n    gotoPage('7'); // Enter the amount and press ENTER\r\n\r\n  end;\r\n\r\n  procedure R3;\r\n  begin\r\n      console.log('No, that is all');\r\n    gotoPage('18');\r\n\r\n  end;\r\n\r\nbegin\r\n\tconsole.log('TELA 16');\r\n  disableAllATMKeys();      // disable ATM Navigation buttons\r\n\tenableATMKey('2');        // Enable Cancel key\r\n\tenableATMKey('10');       // Left 3\t'Yes'  // for another transaction\r\n\tenableATMKey('6');        // Right 3 'No'  // for another transaction\r\n\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3  'YES' for another transaction\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3  'No' for another transaction\r\n\r\nend;\r\n\r\n(*\r\n+-------------------------------------------------------+\r\n¦ 17   Please remove your receipt. Another transaction? ¦\r\n+-------------------------------------------------------+*)\r\nclass procedure TPage.Page17;\r\n  procedure L3;\r\n  begin\r\n    console.log('YES, I want to do something else');\r\n    gotoPage('7'); // Enter the amount and press ENTER\r\n\r\n  end;\r\n\r\n  procedure R3;\r\n  begin\r\n      console.log('No, that is all');\r\n    //Dom7('#p2js-page1-2').click();  // click CANCEL ?????\r\n    gotoPage('18');\r\n\r\n  end;\r\n\r\nbegin\r\n\tconsole.log('TELA 17');\r\n\r\n\tdisableAllATMKeys();      // disable ATM Navigation buttons\r\n\tenableATMKey('2');        // Enable Cancel key\r\n\tenableATMKey('10');       // Left 3\t'Yes'  // for another transaction\r\n\tenableATMKey('6');        // Right 3 'No'  // for another transaction\r\n\r\n\r\n\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3  'YES' for another transaction\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3  'No' for another transaction\r\nend;\r\n\r\n(*\r\n+------------------------------------------------------+\r\n¦ 18   Please remove your card. Thank you. Come again! ¦\r\n+------------------------------------------------------+*)\r\nclass procedure TPage.Page18;\r\n  procedure CANCEL;\r\n  begin\r\n    Dom7('#p2js-page1-2').click();  // simulate click CANCEL\r\n  end;\r\n\r\n\r\nbegin\r\n\tconsole.log('TELA 18');\r\n\r\n\tWindow.setTimeout(@CANCEL, 2000);\r\n\r\n\r\n(*\r\nJWindowTimers(Window).setTimeout(lambda\r\n\tDom7('#p2js-page2b').removeClass('paused');   // remove the class 'paused' to perform the card animation\r\n\tDom7('#p2js-page2b').removeClass('nm');   // remove the class 'paused' to perform the card animation\r\n\tDom7('#p2js-page2b')[0].click();              // simulate a virtual click to eject the card\r\nend,1000);\r\n*)\r\n//    smartLogoANI(); \t\t\t\t\t\t\t // Display the Main animation Bank SmartMS\r\n\r\n\r\nend;\r\n\r\n(*\r\n+--------------------------------+\r\n¦ 19   Would you like a receipt? ¦\r\n+--------------------------------+*)\r\nclass procedure TPage.Page19;\r\n  procedure PROCESS_RECEIPT_DONE;\r\n  var\r\n    defer: JPromise;\r\n\r\n    function _doTask1(aResponse: JSValue): JSValue;\r\n    begin\r\n\tconsole.log('starting receipt');\r\n\r\n      gotoPage('17'); // Please remove your receipt, another transaction?\r\n      result := delay(1000);\r\n    end;\r\n\r\n    function _doTask2(aResponse: JSValue): JSValue;\r\n    begin\r\n\tconsole.log('going to screen 17');\r\n        startReceiptANI();\r\n      result := delay(1000);\r\n    end;\r\n\r\n  begin\r\n    defer := Promise.resolve();\r\n    defer\r\n      .&then(@_doTask1)\r\n      .&then(@_doTask2);\r\n  end;\r\n  procedure R3;\r\n  begin\r\n      console.log('NO');\r\n    gotoPage('16'); // Another transaction?\r\n\r\n  end;\r\n\r\n  procedure L3;\r\n  begin\r\n      console.log('YES');\r\n      PROCESS_RECEIPT_DONE;\r\n  end;\r\n\r\nbegin\r\n\tconsole.log('TELA 19');\r\n        disableAllATMKeys();      // disable ATM Navigation buttons\r\n\t//enableATMKey('2');        // Enable Cancel key\r\n\t//enableATMKey('3');        // Enable ENTER key\r\n\tenableATMKey('10');       // Left 3  'Yes' // Would you like a receipt?\r\n\tenableATMKey('6');        // Right 3 'No'  // Would you like a receipt?\r\n\tenvelopeRestart();       // put another envelope to new deposit\r\n\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3 NO\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3 YES\r\n\r\nend;\r\n\r\n(*\r\n+---------------------------------------------------------------+\r\n¦ 20   Please deposit into envelope. Insert envelope into slot. ¦\r\n+---------------------------------------------------------------+*)\r\nclass procedure TPage.Page20;\r\nvar\r\n  me: TJSHTMLElement;\r\n\r\n\r\n  procedure PROCESS_REQUEST;\r\n  var\r\n    defer: JPromise;\r\n\r\n  function _doTask1(aResponse: JSValue): JSValue;\r\n    begin\r\n      me.style.webkitAnimation := '';\r\n      Dom7('#p2js-page3a').removeClass('paused');\r\n      //Dom7(\"#p2js-page3a\").addClass('nm');\r\n      //me.classList.add('nm');\r\n      result := delay(1000);\r\n    end;\r\n\r\n    function _doTask2(aResponse: JSValue): JSValue;\r\n    begin\r\n      gotoPage('4'); // Processing your request...\r\n      result := delay(2000);\r\n    end;\r\n\r\n    function _doTask3(aResponse: JSValue): JSValue;\r\n    begin\r\n      gotoPage('19'); // Would you like a receipt?\r\n      result := delay(3000);\r\n\r\n    end;\r\n\r\n\r\n  begin\r\n    defer := Promise.resolve();\r\n    defer\r\n      .&then(@_doTask1)\r\n      .&then(@_doTask2)\r\n      .&then(@_doTask3);\r\n\r\n  end;\r\n\r\n\r\n  procedure ENVELOPE_CLICK;\r\n  begin\r\n    // restart animation\r\n    console.log('restart CASH animation');\r\n    depositStartTransaction( String(Dom7('#totalDeposit').val()) );\r\n    //Dom7(this).addClass('nm');\r\n    me := this;\r\n    this.style.webkitAnimation := 'none';\r\n    PROCESS_REQUEST;\r\n  end;\r\n\r\n\r\nbegin\r\n\tconsole.log('TELA 20');\r\n    disableAllATMKeys();      // disable ATM Navigation buttons\r\n//\tenableATMKey('2');        // Enable Cancel key\r\n//\tenableATMKey('3');        // Enable ENTER key\r\n\t// enableATMKey('7');     // Right 4 'Change amount'\r\n\r\n\t(*\r\n\t+-------------------+\r\n\t¦ ENVELOPE onClick  ¦\r\n\t+-------------------+ *)\r\n\tDom7('#p2js-page3a').once('click', @ENVELOPE_CLICK);\r\n\r\n\r\n\t(*\r\n\tDom7('#p2js-page3a').once('click', lambda(event: variant) { // RECEIPT onClick\r\n\t\tconsole.log('Envelope has a lot of money now.');\r\n\tend);\r\n*)\r\n\r\nend;\r\n\r\n(*\r\n+-------------------------+\r\n¦ 21   For which account? ¦\r\n+-------------------------+*)\r\nclass procedure TPage.Page21;\r\nbegin\r\n\tconsole.log('TELA 21');\r\nend;\r\n\r\n(*\r\n22   Your account balance is: $ Would you like a receipt? *)\r\nclass procedure TPage.Page22;\r\n  procedure PROCESS_RECEIPT_DONE;\r\n  var\r\n    defer: JPromise;\r\n\r\n    function _doTask1(aResponse: JSValue): JSValue;\r\n    begin\r\n\tconsole.log('starting receipt');\r\n\r\n      gotoPage('17'); // Please remove your receipt, another transaction?\r\n      result := delay(1000);\r\n    end;\r\n\r\n    function _doTask2(aResponse: JSValue): JSValue;\r\n    begin\r\n\tconsole.log('going to screen 17');\r\n        startReceiptANI();\r\n      result := delay(1000);\r\n    end;\r\n\r\n  begin\r\n    defer := Promise.resolve();\r\n    defer\r\n      .&then(@_doTask1)\r\n      .&then(@_doTask2);\r\n  end;\r\n\r\n\r\n  procedure R3;\r\n  begin\r\n      console.log('NO');\r\n      gotoPage('16'); // Another transaction?\r\n\r\n  end;\r\n\r\n  procedure L3;\r\n  begin\r\n      console.log('YES');\r\n      PROCESS_RECEIPT_DONE;\r\n  end;\r\n\r\nbegin\r\n\tconsole.log('TELA 22');\r\n  disableAllATMKeys();      // disable ATM Navigation buttons\r\n\t//enableATMKey('2');        // Enable Cancel key\r\n\t//enableATMKey('3');        // Enable ENTER key\r\n\tenableATMKey('10');       // Left 3  'Yes' // Would you like a receipt?\r\n\tenableATMKey('6');        // Right 3 'No'  // Would you like a receipt?\r\n\r\n\t//envelopeRestart();       // put another envelope to new deposit\r\n\r\n  //Dom7('#p2js-page22b').text( 'US$ '+FloatToStr(_Conta.getBalance) );\r\n  WriteLn(_SavingsAccount.getBalance);\r\n  Dom7('#p2js-page22b').text( formatAmountValue(FloatToStr(_SavingsAccount.getBalance)) );\r\n\r\n\r\n\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3 NO\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3 YES\r\n\r\n\r\n\r\nend;\r\n\r\n(*\r\n+------------------------+\r\n¦ 23   Receipt animation ¦\r\n+------------------------+*)\r\nclass procedure TPage.Page23;\r\nbegin\r\n\tconsole.log('TELA 23');\r\nend;\r\n\r\n(*\r\n+---------------------------------------------+\r\n¦ 24   Please inform your PIN and press ENTER ¦\r\n+---------------------------------------------+*)\r\nclass procedure TPage.Page24;\r\n\r\n  procedure INCORRECT_PIN;\r\n  begin\r\n    gotoPage('25'); // show the Screen number 25: 'Incorrect PIN'\r\n  end;\r\n\r\n  procedure checkPin();\r\n  var enteredPin: String;\r\n  begin\r\n  \tenableATMKey('6'); // Right 3\r\n  \tenableATMKey('10'); // Left 3\r\n\r\n  \tenteredPin := String(Dom7('#p2js-page24b input').val());\r\n  \tif (enteredPin = '1234') then begin\r\n  \t\tconsole.log('correct PIN');\r\n  \t\tgotoPage('7'); // show the Screen number 07: 'Select a Transaction'\r\n  \tend else\r\n  begin\r\n  \t\tconsole.log('incorrect PIN');\r\n  \t\tWindow.setTimeout(@INCORRECT_PIN, 10);\r\n  \tend;\r\n  end;\r\n\r\n  procedure ENTER_CLICK;\r\n  begin\r\n    //actualScreenId = getActualScreen();\r\n    //console.log( actualScreenId );\r\n    getPage();\r\n    checkPin();\r\n\r\n  end;\r\n\r\n\r\nbegin\r\n\tconsole.log('TELA 24');\r\n\r\n\r\n\r\n  enableATMKey('3'); // ENTER\r\n\t(* on Button ENTER click *)\r\n\tDom7('#p2js-page1-3').once('click', @ENTER_CLICK);\r\nend;\r\n\r\n(*\r\n+--------------------------------+\r\n¦ 25   Incorrect PIN. Try again? ¦\r\n+--------------------------------+ *)\r\nclass procedure TPage.Page25;\r\n        procedure L3(event: TJSEvent);\r\n        begin\r\n        event.preventDefault();\r\n  \t\t//e.stopPropagation();\r\n  \tconsole.log('L3');\r\n  \t\tgotoPage('24'); // show the Screen number 24: 'Inform your PIN'\r\n  \t\t//e.stopPropagation();\r\n      //return false;\r\n\r\n        end;\r\n\r\n        procedure R3(event: TJSEvent);\r\n        begin\r\n         \tevent.preventDefault();\r\n  \t\t//e.stopPropagation();\r\n  \tconsole.log('R3');\r\n  \t\tDom7('#p2js-page1-2').click(); // return to the main screen\r\n\r\n  \t//return false;\r\n\r\n        end;\r\n\r\nbegin\r\n\tconsole.log('TELA 25');\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3\r\nend;\r\n\r\n(*\r\n+-----------------------------------------------+\r\n¦ Inform the amount to deposit and press ENTER  ¦\r\n+-----------------------------------------------+ *)\r\nclass procedure TPage.Page26;\r\n        (*procedure PROCESS_REQUEST;\r\n        var\r\n          defer: JPromise;\r\n\r\n        function _doTask1(aResponse: JSValue): JSValue;\r\n          begin\r\n            gotoPage('4'); // Processing your request...\r\n            result := delay(3000);\r\n          end;\r\n\r\n          function _doTask2(aResponse: JSValue): JSValue;\r\n          begin\r\n            gotoPage('30'); // Would you like to PAY another bill?\r\n            result := delay(1000);\r\n          end;\r\n\r\n        begin\r\n          defer := Promise.resolve();\r\n          defer\r\n            .&then(@_doTask1)\r\n            .&then(@_doTask2);\r\n        end;*)\r\n\r\n        procedure ENTER_KEY;\r\n        begin\r\n  \tconsole.log('Exactly, that is correct the amount.');\r\n  \tgotoPage('20');  // Place deposit into envelope. Insert envelope into deposit slot.\r\n\r\n  \t(* TODO\r\n      'The amount entered is not multiple of $20'\r\n  \t\t'Daily withdrawal limit exceeded'\r\n  \t*)\r\n  \t//gotoPage('14'); // to confirm this withdrawal press Enter\r\n  \t//gotoPage('8'); // Select amount:\r\n\r\n        end;\r\n\r\n\r\nbegin\r\n\tconsole.log('TELA 26');\r\n\r\n  disableAllATMKeys();      // disable ATM Navigation buttons\r\n\tenableATMKey('2');        // Enable Cancel key\r\n\tenableATMKey('3');        // Enable ENTER\r\n\r\n\r\n\t// enableATMKey('7');     // Right 4 'Change amount'\r\n\r\n\tDom7('#p2js-page1-3').once('click', @ENTER_KEY);  // ENTER KEY\r\n\r\nend;\r\n\r\n(*\r\n+-----------------------------------+\r\n¦                                   ¦\r\n+-----------------------------------+ *)\r\nclass procedure TPage.Page27;\r\nbegin\r\n\tconsole.log('TELA 27');\r\nend;\r\n\r\n\r\n(*\r\n+-----------------------------------+\r\n¦ Select a bill to pay off:         ¦\r\n+-----------------------------------+ *)\r\nclass procedure TPage.Page28;\r\n        procedure L2;\r\n        begin\r\n        \t\tconsole.log('NET Company');\r\n\t\tgotoPage('29'); // Enter the amount to PAY\r\n\r\n        end;\r\n\r\n        procedure R2;\r\n        begin\r\n  \tconsole.log('OI Company');\r\ngotoPage('29'); // Enter the amount to PAY\r\n\r\n        end;\r\n\r\n        procedure R3;\r\n        begin\r\n  \tconsole.log('LIFE Company');\r\ngotoPage('29'); // Enter the amount to PAY\r\n\r\n        end;\r\n\r\nbegin\r\n\tconsole.log('TELA 28');\r\n  //JWindowTimers(Window).setTimeout(lambda\r\n    disableAllATMKeys();     // disable ATM Navigation buttons\r\n  \tenableATMKey('2');       // Enable Cancel key\r\n    enableATMKey('9');       // Left 2\r\n    enableATMKey('5');       // Right 2\r\n  \tenableATMKey('6');       // Right 3\r\n  //end, 100);\r\n\r\n\tDom7('#p2js-page1-9').once('click', @L2);  // L2  NET\r\n\tDom7('#p2js-page1-5').once('click', @R2);  // R2  OI\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3  LIFE\r\n\r\nend;\r\n\r\n\r\n(*\r\n+-----------------------------------+\r\n¦ Enter the amount to PAY           ¦\r\n+-----------------------------------+ *)\r\nclass procedure TPage.Page29;\r\n        procedure PROCESS_REQUEST;\r\n        var\r\n          defer: JPromise;\r\n\r\n        function _doTask1(aResponse: JSValue): JSValue;\r\n          begin\r\n            gotoPage('4'); // Processing your request...\r\n            result := delay(3000);\r\n          end;\r\n\r\n          function _doTask2(aResponse: JSValue): JSValue;\r\n          begin\r\n            gotoPage('30'); // Would you like to PAY another bill?\r\n            result := delay(1000);\r\n          end;\r\n\r\n        begin\r\n          defer := Promise.resolve();\r\n          defer\r\n            .&then(@_doTask1)\r\n            .&then(@_doTask2);\r\n        end;\r\n\r\n        procedure ENTER_KEY;\r\n        var aValue: String;\r\n        begin\r\n  \tconsole.log('I accept, that is correct the amount TO PAY.');\r\n        aValue := String( Dom7('#totalBill').val() );\r\n        if aValue = '' then exit;\r\n        withdrawalStartTransaction( aValue );\r\n        //if withdrawalStartTransaction( aValue ) = false then begin\r\n        PROCESS_REQUEST;\r\n\r\n        end;\r\n\r\nbegin\r\n\tconsole.log('TELA 29');\r\n  KillENTER;                // avoid propagating event?\r\n  disableAllATMKeys();      // disable ATM Navigation buttons\r\n\tenableATMKey('2');        // Enable Cancel key\r\n\tenableATMKey('3');        // Enable ENTER key\r\n\r\n\tDom7('#p2js-page1-3').once('click', @ENTER_KEY);  // ENTER KEY\r\n\r\nend;\r\n\r\n\r\n(*\r\n+---------------------------------------+\r\n¦ Would you like to PAY another bill?   ¦\r\n+---------------------------------------+ *)\r\nclass procedure TPage.Page30;\r\n        procedure L3;\r\n        begin\r\n  \tconsole.log('YES');\r\n  \tgotoPage('28'); // Select a bill to pay off:\r\n\r\n        end;\r\n\r\n        procedure R3;\r\n        begin\r\n  \tconsole.log('NO');\r\ngotoPage('16'); // Another transaction?\r\n\r\n        end;\r\n\r\nbegin\r\n\tconsole.log('TELA 30');\r\n  //JWindowTimers(Window).setTimeout(lambda\r\n    disableAllATMKeys();     // disable ATM Navigation buttons\r\n//  \tenableATMKey('2');       // Enable Cancel key\r\n  \tenableATMKey('10');       // Left 3 YES\r\n  \tenableATMKey('6');       // Right 3 NO\r\n  //end, 100);\r\n\r\n    startReceiptANI(); // A receipt is necessary\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3  YES\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3  NO\r\n\r\nend;\r\n\r\n\r\n(*\r\n+-----------------------------------+\r\n¦ TRANSFER: TO which account        ¦\r\n+-----------------------------------+ *)\r\nclass procedure TPage.Page31;\r\n        procedure L3;\r\n        begin\r\n  \tconsole.log('Savings not available');\r\n        end;\r\n\r\n        procedure R3;\r\n        begin\r\n  \tconsole.log('Chequing');\r\n  \tgotoPage('32'); // Enter the amount to TRANSFER:\r\n\r\n        end;\r\n\r\nbegin\r\n\tconsole.log('TELA 31');\r\n  disableAllATMKeys();     // disable ATM Navigation buttons\r\n\tenableATMKey('2');       // Enable Cancel key\r\n\tenableATMKey('9');       // Left 2\r\n\tenableATMKey('5');       // Right 2\r\n\r\n\r\n\t//Dom7('#p2js-l2sav').addClass('nm'); // hide the button SAVINGS TODO\r\n \t//Dom7('#p2js-r2cheq').addClass('nm'); // hide the button CHEQUING TODO\r\n\r\n\tDom7('#p2js-page1-9').once('click', @L3);  // L3  Savings\r\n\tDom7('#p2js-page1-5').once('click', @R3);  // R3  Chequing\r\n\r\nend;\r\n\r\n\r\n(*\r\n+-----------------------------------+\r\n¦ Enter the amount to TRANSFER:     ¦\r\n+-----------------------------------+ *)\r\nclass procedure TPage.Page32;\r\n        procedure ENTER_KEY;\r\n        var aValue: string;\r\n        begin\r\n  \tconsole.log('I accept, that is correct the amount.');\r\n        aValue := String( Dom7('#totalTransfer').val());\r\n        if aValue = '' then exit;\r\n        gotoPage('33'); // to confirm this TRANSFER press ENTER\r\n\r\n        end;\r\n\r\nbegin\r\n\tconsole.log('TELA 32');\r\n  KillENTER;                // avoid propagating event?\r\n  disableAllATMKeys();      // disable ATM Navigation buttons\r\n\tenableATMKey('2');        // Enable Cancel key\r\n\tenableATMKey('3');        // Enable ENTER key\r\n\r\n\tDom7('#p2js-page1-3').once('click', @ENTER_KEY);  // ENTER KEY\r\nend;\r\n\r\n(*\r\n+---------------------------------------+\r\n¦ to confirm this TRANSFER press ENTER  ¦\r\n+---------------------------------------+ *)\r\nclass procedure TPage.Page33;\r\n        procedure PROCESS_REQUEST;\r\n        var\r\n          defer: JPromise;\r\n\r\n        function _doTask1(aResponse: JSValue): JSValue;\r\n          begin\r\n            gotoPage('4'); // Processing your request...\r\n            result := delay(3000);\r\n          end;\r\n\r\n          function _doTask2(aResponse: JSValue): JSValue;\r\n          begin\r\n            gotoPage('34'); // TRANSFER COMPLETE. Would you like a receipt?\r\n            result := delay(1000);\r\n          end;\r\n\r\n        begin\r\n          defer := Promise.resolve();\r\n          defer\r\n            .&then(@_doTask1)\r\n            .&then(@_doTask2);\r\n        end;\r\n\r\n\r\n        procedure CHANGE_AMOUNT;\r\n        begin\r\n  \tconsole.log('hum, there are something wrong with the amount entered.');\r\n  \tgotoPage('32');    // Enter the amount to TRANSFER:\r\n\r\n        end;\r\n\r\n        procedure ENTER_KEY;\r\n        var amountToTransfer: String;\r\n        begin\r\n    \tconsole.log('I accept, that is correct the amount.');\r\n\r\n        (* Performing the Transfer operation *)\r\n        amountToTransfer := String( Dom7('#totalTransfer').val() );\r\n\r\n        //_SavingsAccount.TransferFunds(_SavingsAccount, _ChequingAccount, amountToTransfer );\r\n\r\n        (* check if the Savingss account has sufficient balance  *)\r\n\r\n        if transferFunds(_SavingsAccount, _ChequingAccount, StrToFloat(amountToTransfer) ) = false then exit;\r\n        (* update the Extract *)\r\n        showBalance('<font color=\"blue\">-'+ String(amountToTransfer) +'</font>', clRed);\r\n        console.log('_ChequingAccount: '+ FloatToStr(_ChequingAccount.getBalance) );  // 250 + 200 - 100 = 350\r\n        console.log('_SavingsAccount: '+ FloatToStr(_SavingsAccount.getBalance) );\r\n        PROCESS_REQUEST;\r\n\r\n        end;\r\n\r\nbegin\r\n\tconsole.log('TELA 33');\r\n  Dom7('#p2js-billconfirm').text('Amount: $' + String( Dom7('#totalTransfer').val()) );\r\n\r\n\t\tdisableAllATMKeys();      // disable ATM Navigation buttons\r\n\t\tenableATMKey('2');        // Enable Cancel key\r\n\t\tenableATMKey('3');        // Enable ENTER key\r\n\t\tenableATMKey('7');        // Right 4 'Change amount'\r\n\r\n\r\n\tDom7('#p2js-page1-7').once('click', @CHANGE_AMOUNT);  // Change amount\r\n\tDom7('#p2js-page1-3').once('click', @ENTER_KEY);  // ENTER KEY\r\n\r\nend;\r\n\r\n(*\r\n+-----------------------------------------------+\r\n¦ TRANFER COMPLETE: Would you like a receipt?   ¦\r\n+-----------------------------------------------+ *)\r\nclass procedure TPage.Page34;\r\n        procedure PROCESS_RECEIPT;\r\n        var\r\n          defer: JPromise;\r\n\r\n          function _doTask1(aResponse: JSValue): JSValue;\r\n          begin\r\n            console.log('starting receipt');\r\n            gotoPage('17'); // Please remove your receipt, another transaction?\r\n            result := delay(1000);\r\n          end;\r\n\r\n          function _doTask2(aResponse: JSValue): JSValue;\r\n          begin\r\n            console.log('going to screen 17');\r\n            startReceiptANI();\r\n            result := delay(1000);\r\n          end;\r\n\r\n        begin\r\n          defer := Promise.resolve();\r\n          defer\r\n            .&then(@_doTask1)\r\n            .&then(@_doTask2);\r\n        end;\r\n\r\n        procedure R3;\r\n        begin\r\n  \t  console.log('NO');\r\n\t  gotoPage('16'); // Another transaction?\r\n\r\n        end;\r\n\r\n        procedure L3;\r\n        begin\r\n  \t  console.log('YES');\r\n          PROCESS_RECEIPT;\r\n        end;\r\n\r\nbegin\r\n\tconsole.log('TELA 34');\r\n        disableAllATMKeys();      // disable ATM Navigation buttons\r\n\tenableATMKey('2');        // Enable Cancel key\r\n\tenableATMKey('3');        // Enable ENTER key\r\n\tenableATMKey('10');       // Left 3  'Yes' // Would you like a receipt?\r\n\tenableATMKey('6');        // Right 3 'No'  // Would you like a receipt?\r\n\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3 NO\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3 YES\r\n\r\nend;\r\n\r\n(*\r\n+-----------------------------------+\r\n¦ BILL PAYMENT: From which account? ¦\r\n+-----------------------------------+ *)\r\nclass procedure TPage.Page35;\r\n        procedure L3;\r\n        begin\r\n  \tconsole.log('Savings');\r\n  \tgotoPage('28'); // Select a bill to pay off:\r\n\r\n        end;\r\n\r\n        procedure R3;\r\n        begin\r\n  \tconsole.log('Chequing');\r\n        end;\r\n\r\nbegin\r\n\tconsole.log('TELA 35');\r\n  //JWindowTimers(Window).setTimeout(lambda\r\n    disableAllATMKeys();     // disable ATM Navigation buttons\r\n  \tenableATMKey('2');       // Enable Cancel key\r\n  \tenableATMKey('10');       // Left 3\r\n  \tenableATMKey('6');       // Right 3\r\n  //end, 100);\r\n\r\n\r\n\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3  Savings\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3  Chequing\r\n\r\nend;\r\n\r\n(*\r\n+-----------------------------------+\r\n¦ TRANSFER: From which account?     ¦\r\n+-----------------------------------+ *)\r\nclass procedure TPage.Page36;\r\n        procedure L3;\r\n        begin\r\n  \tconsole.log('Savings');\r\n  \tgotoPage('31'); // TRANSFER: TO which account?\r\n\r\n        end;\r\n\r\n        procedure R3;\r\n        begin\r\n    \tconsole.log('Chequing option is unavailable');\r\n        end;\r\n\r\nbegin\r\n\tconsole.log('TELA 36');\r\n  //JWindowTimers(Window).setTimeout(lambda\r\n    disableAllATMKeys();     // disable ATM Navigation buttons\r\n  \tenableATMKey('2');       // Enable Cancel key\r\n  \tenableATMKey('10');       // Left 3\r\n  \tenableATMKey('6');       // Right 3\r\n  //end, 100);\r\n\r\n\tDom7('#p2js-page1-10').once('click', @L3);  // L3  Savings\r\n\tDom7('#p2js-page1-6').once('click', @R3);  // R3  Chequing\r\n\r\nend;\r\n\r\nend.\r\n\r\n","unit main;\r\n\r\n{$mode objfpc}{$H+}\r\n\r\ninterface\r\n\r\nuses\r\n  Classes, SysUtils, JS, Web,\r\n  uPromises, uAccount, uPages;\r\n\r\ntype\r\n\r\n  { TApplication }\r\n\r\n  TApplication = class\r\n  private\r\n    //mForm: TBasePage;\r\n  protected\r\n    procedure InitApp;\r\n  public\r\n    procedure RunApp;\r\n  end;\r\n\r\n{ global methods }\r\nprocedure getPage();\r\n\r\nimplementation\r\n\r\nuses\r\n  ubindElementAction;\r\n\r\n(*\r\n+-----------------------------------------------------------------------+\r\n¦ Use selectors to find all the items that don't have a class .nm       ¦\r\n+-----------------------------------------------------------------------+ *)\r\nfunction getActualScreen(): String;\r\nbegin\r\n//  result := document.querySelector('.tela:not(.nm)') !== null ? document.querySelector('.tela:not(.nm)').id : '';\r\n  if (document.querySelector('.tela:not(.nm)') <> null) then\r\n    result:= document.querySelector('.tela:not(.nm)').id else\r\n    result:= '';\r\nend;\r\n\r\n(*\r\n  Controlling the ATM views\r\n+-----------------------------------------------------------------+\r\n¦ PAGE ¦                       DESCRIPTION                        ¦\r\n¦------+----------------------------------------------------------¦\r\n¦   1* ¦ ATM machine                                              ¦\r\n¦   2* ¦ cardIn / cardOut animation                               ¦\r\n¦   3* ¦ envelope animation                                       ¦\r\n¦   4* ¦ Loader animation                                         ¦\r\n¦   5* ¦ Cash animation                                           ¦\r\n¦   6  ¦ Please insert card.                                      ¦\r\n¦   7  ¦ Select a transaction:                                    ¦\r\n¦   8  ¦ Select amount:                                           ¦\r\n¦   9  ¦ From which account?                                      ¦\r\n¦  10  ¦ The operator of this ABM charges the following fee...    ¦\r\n¦  11  ¦ Enter the amount and press ENTER                         ¦\r\n¦  12  ¦ The amount entered is not multiple of $20                ¦\r\n¦  13  ¦ Daily withdrawal limit exceeeded                         ¦\r\n¦  14  ¦ to confirm this withdrawal press ENTER                   ¦\r\n¦  15  ¦ Please remove your cash. Would you like a receipt?       ¦\r\n¦  16  ¦ Another Transaction?                                     ¦\r\n¦  17  ¦ Please remove your receipt. Another transaction?         ¦\r\n¦  18  ¦ Please remove your card. Thank you. Come again!          ¦\r\n¦  19  ¦ Would you like a receipt?                                ¦\r\n¦  20  ¦ Please deposit into envelope. Insert envelope into slot. ¦\r\n¦  21  ¦ For which account?                                       ¦\r\n¦  22  ¦ Your account balance is: $ Would you like a receipt?     ¦\r\n¦  23  ¦ Receipt animation                                        ¦\r\n¦  24  ¦ Please inform your PIN and press ENTER                   ¦\r\n¦  25  ¦ Incorrect PIN. Try again?                                ¦\r\n¦  26  ¦ TODO                                                     ¦\r\n¦  27  ¦ TODO                                                     ¦\r\n+-----------------------------------------------------------------+ *)\r\nprocedure getPage();\r\nvar\r\n  page: String;\r\nbegin\r\n  page := getActualScreen;  // // Page Data contains all required information about loaded and initialized page\r\n\r\n  case page of\r\n  'p2js-page4': // Loader animation\r\n   begin\r\n     TPage.page4;\r\n   end;\r\n\r\n  'p2js-page5': // Cash animation\r\n   begin\r\n     TPage.page5;\r\n   end;\r\n\r\n  'p2js-page6': // Please insert card.\r\n   begin\r\n     TPage.page6;\r\n   end;\r\n\r\n  'p2js-page7': // Select a transaction:\r\n   begin\r\n     TPage.page7;\r\n   end;\r\n\r\n  'p2js-page8': // Select amount:\r\n   begin\r\n     TPage.page8;\r\n   end;\r\n\r\n  'p2js-page9': // From which account?\r\n   begin\r\n     TPage.page9;\r\n   end;\r\n\r\n  'p2js-page10': // The operator of this ABM charges the following fee...\r\n   begin\r\n     TPage.page10;\r\n   end;\r\n\r\n  'p2js-page11': // Enter the amount and press ENTER\r\n   begin\r\n     TPage.page11;\r\n   end;\r\n\r\n  'p2js-page12': // The amount entered is not multiple of $20\r\n   begin\r\n     TPage.page12;\r\n   end;\r\n\r\n  'p2js-page13': // Daily withdrawal limit exceeeded\r\n   begin\r\n     TPage.page13;\r\n   end;\r\n\r\n  'p2js-page14': // to confirm this withdrawal press ENTER\r\n   begin\r\n     TPage.page14;\r\n   end;\r\n\r\n  'p2js-page15': // Please remove your cash. Would you like a receipt?\r\n   begin\r\n     TPage.page15;\r\n   end;\r\n\r\n  'p2js-page16': // Another Transaction?\r\n   begin\r\n     TPage.page16;\r\n   end;\r\n\r\n  'p2js-page17': // Please remove your receipt. Another transaction?\r\n   begin\r\n     TPage.page17;\r\n   end;\r\n\r\n  'p2js-page18': // Please remove your card. Thank you. Come again!\r\n   begin\r\n     TPage.page18;\r\n   end;\r\n\r\n  'p2js-page19': // Would you like a receipt?\r\n   begin\r\n     TPage.page19;\r\n   end;\r\n\r\n  'p2js-page20': // Please deposit into envelope. Insert envelope into slot.\r\n   begin\r\n     TPage.page20;\r\n   end;\r\n\r\n  'p2js-page21': // For which account?\r\n   begin\r\n     TPage.page21;\r\n   end;\r\n\r\n  'p2js-page22': // Your account balance is: $ Would you like a receipt?\r\n   begin\r\n     TPage.page22;\r\n   end;\r\n\r\n  'p2js-page23': // Receipt animation\r\n   begin\r\n     TPage.page23;\r\n   end;\r\n\r\n  'p2js-page24': // Please inform your PIN and press ENTER\r\n   begin\r\n     TPage.page24;\r\n   end;\r\n\r\n  'p2js-page25': // Incorrect PIN. Try again?\r\n   begin\r\n     TPage.page25;\r\n   end;\r\n\r\n  'p2js-page26': // Enter the amount to DEPOSIT and press ENTER\r\n   begin\r\n     TPage.page26;\r\n   end;\r\n\r\n  'p2js-page27': // EXTRACT ( Bank Statement)\r\n   begin\r\n     TPage.page27;\r\n   end;\r\n\r\n  'p2js-page28': // Select a BILL TO PAY: ()NET ()OI  ()LIFE\r\n   begin\r\n     TPage.page28;\r\n   end;\r\n\r\n  'p2js-page29': // Enter the amount to PAY and press ENTER\r\n   begin\r\n     TPage.page29;\r\n   end;\r\n\r\n  'p2js-page30': // Would you like to PAY another bill?\r\n   begin\r\n     TPage.page30;\r\n   end;\r\n\r\n  'p2js-page31': // TRANSFER TO which account?\r\n   begin\r\n     TPage.page31;\r\n   end;\r\n\r\n  'p2js-page32': // Enter the amount to TRANSFER and press ENTER\r\n   begin\r\n     TPage.page32;\r\n   end;\r\n\r\n  'p2js-page33': // to confirm this TRANSFER, press ENTER\r\n   begin\r\n     TPage.page33;\r\n   end;\r\n\r\n  'p2js-page34': // Transfer complete! Would you like a receipt?\r\n   begin\r\n     TPage.page34;\r\n   end;\r\n\r\n  'p2js-page35': // BILL Payment. FROM which account?\r\n   begin\r\n     TPage.page35;\r\n   end;\r\n\r\n  'p2js-page36': // TRANSFER Operation. FROM which account?\r\n   begin\r\n     TPage.page36;\r\n   end;\r\n\r\n\r\nEnd; // END DO CASE\r\nend;\r\n\r\n{ ╔═════════════════════╗\r\n  ║ TApplication        ║\r\n  ╚═════════════════════╝ }\r\nprocedure TApplication.InitApp;\r\nbegin\r\n{ ╔══ PARAMETERS TO INITIALIZE THE APP ══╗\r\n  ║                                      ║\r\n  ╚══════════════════════════════════════╝ }\r\n  WriteLn('starting InitApp.');\r\n    document.getElementById('p2js-an-scene-0').setAttribute('class', 'run ' + 't-0'); //   Dom7('#p2js-an-scene-0').addClass('run t-0');\r\n  //  resizeMe();           // resize me;\r\n    disableAllPages();    // All ATM Pages are hidden.\r\n    disableAllATMKeys();  // All ATM keys are disabled.\r\n    smartLogoANI();       // to perform the Main animation Bank SmartMS\r\n    gotoPage('6');      // it shows the page: \"Please insert card\"\r\nend;\r\n\r\n\r\n{ ╔═══ RUNAPP ════════════════════════════════╗\r\n  ║ var Application := TApplication.Create;   ║\r\n  ║ Application.RunApp;                       ║\r\n  ║ This is the Application starting method.  ║\r\n  ╚═══════════════════════════════════════════╝ }\r\nprocedure TApplication.RunApp;\r\nvar ev: TBindEventPage;\r\nbegin\r\n  TPage.InitializeObject;\r\n  ev:= TBindEventPage.Create;\r\n  ev.InitializeObject;\r\n  InitApp;\r\n\r\nend;\r\nend.\r\n\r\n","program projBank;\r\n\r\n{$mode objfpc}\r\n\r\nuses\r\n  JS, Classes, SysUtils, Web, main, uAccount, uPages, ubindElementAction;\r\n\r\nvar\r\n  Application: TApplication;\r\n\r\nbegin\r\n// Your code here\r\ntry\r\n  Application := TApplication.Create;\r\n  Application.RunApp;\r\nexcept\r\n  on e: Exception do\r\n    console.log(e.Message);\r\nend;\r\n\r\nend.\r\n"],"names":[],"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"}